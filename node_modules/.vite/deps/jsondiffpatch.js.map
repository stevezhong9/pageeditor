{
  "version": 3,
  "sources": ["../../diff-match-patch/index.js", "../../color-name/index.js", "../../color-convert/conversions.js", "../../color-convert/route.js", "../../color-convert/index.js", "../../ansi-styles/index.js", "../../supports-color/browser.js", "../../chalk/source/util.js", "../../chalk/source/templates.js", "../../chalk/source/index.js", "../../jsondiffpatch/src/processor.js", "../../jsondiffpatch/src/pipe.js", "../../jsondiffpatch/src/contexts/context.js", "../../jsondiffpatch/src/clone.js", "../../jsondiffpatch/src/contexts/diff.js", "../../jsondiffpatch/src/contexts/patch.js", "../../jsondiffpatch/src/contexts/reverse.js", "../../jsondiffpatch/src/filters/trivial.js", "../../jsondiffpatch/src/filters/nested.js", "../../jsondiffpatch/src/filters/lcs.js", "../../jsondiffpatch/src/filters/arrays.js", "../../jsondiffpatch/src/filters/dates.js", "../../jsondiffpatch/src/filters/texts.js", "../../jsondiffpatch/src/diffpatcher.js", "../../jsondiffpatch/src/formatters/base.js", "../../jsondiffpatch/src/formatters/html.js", "../../jsondiffpatch/src/formatters/annotated.js", "../../jsondiffpatch/src/formatters/jsonpatch.js", "../../jsondiffpatch/src/formatters/console.js", "../../jsondiffpatch/src/date-reviver.js", "../../jsondiffpatch/src/main.js"],
  "sourcesContent": ["/**\n * Diff Match and Patch\n * Copyright 2018 The diff-match-patch Authors.\n * https://github.com/google/diff-match-patch\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @fileoverview Computes the difference between two texts to create a patch.\n * Applies the patch onto another text, allowing for errors.\n * @author fraser@google.com (Neil Fraser)\n */\n\n/**\n * Class containing the diff, match and patch methods.\n * @constructor\n */\nvar diff_match_patch = function() {\n\n  // Defaults.\n  // Redefine these in your program to override the defaults.\n\n  // Number of seconds to map a diff before giving up (0 for infinity).\n  this.Diff_Timeout = 1.0;\n  // Cost of an empty edit operation in terms of edit characters.\n  this.Diff_EditCost = 4;\n  // At what point is no match declared (0.0 = perfection, 1.0 = very loose).\n  this.Match_Threshold = 0.5;\n  // How far to search for a match (0 = exact location, 1000+ = broad match).\n  // A match this many characters away from the expected location will add\n  // 1.0 to the score (0.0 is a perfect match).\n  this.Match_Distance = 1000;\n  // When deleting a large block of text (over ~64 characters), how close do\n  // the contents have to be to match the expected contents. (0.0 = perfection,\n  // 1.0 = very loose).  Note that Match_Threshold controls how closely the\n  // end points of a delete need to match.\n  this.Patch_DeleteThreshold = 0.5;\n  // Chunk size for context length.\n  this.Patch_Margin = 4;\n\n  // The number of bits in an int.\n  this.Match_MaxBits = 32;\n};\n\n\n//  DIFF FUNCTIONS\n\n\n/**\n * The data structure representing a diff is an array of tuples:\n * [[DIFF_DELETE, 'Hello'], [DIFF_INSERT, 'Goodbye'], [DIFF_EQUAL, ' world.']]\n * which means: delete 'Hello', add 'Goodbye' and keep ' world.'\n */\nvar DIFF_DELETE = -1;\nvar DIFF_INSERT = 1;\nvar DIFF_EQUAL = 0;\n\n/**\n * Class representing one diff tuple.\n * ~Attempts to look like a two-element array (which is what this used to be).~\n * Constructor returns an actual two-element array, to allow destructing @JackuB\n * See https://github.com/JackuB/diff-match-patch/issues/14 for details\n * @param {number} op Operation, one of: DIFF_DELETE, DIFF_INSERT, DIFF_EQUAL.\n * @param {string} text Text to be deleted, inserted, or retained.\n * @constructor\n */\ndiff_match_patch.Diff = function(op, text) {\n  return [op, text];\n};\n\n/**\n * Find the differences between two texts.  Simplifies the problem by stripping\n * any common prefix or suffix off the texts before diffing.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {boolean=} opt_checklines Optional speedup flag. If present and false,\n *     then don't run a line-level diff first to identify the changed areas.\n *     Defaults to true, which does a faster, slightly less optimal diff.\n * @param {number=} opt_deadline Optional time when the diff should be complete\n *     by.  Used internally for recursive calls.  Users should set DiffTimeout\n *     instead.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_main = function(text1, text2, opt_checklines,\n    opt_deadline) {\n  // Set a deadline by which time the diff must be complete.\n  if (typeof opt_deadline == 'undefined') {\n    if (this.Diff_Timeout <= 0) {\n      opt_deadline = Number.MAX_VALUE;\n    } else {\n      opt_deadline = (new Date).getTime() + this.Diff_Timeout * 1000;\n    }\n  }\n  var deadline = opt_deadline;\n\n  // Check for null inputs.\n  if (text1 == null || text2 == null) {\n    throw new Error('Null input. (diff_main)');\n  }\n\n  // Check for equality (speedup).\n  if (text1 == text2) {\n    if (text1) {\n      return [new diff_match_patch.Diff(DIFF_EQUAL, text1)];\n    }\n    return [];\n  }\n\n  if (typeof opt_checklines == 'undefined') {\n    opt_checklines = true;\n  }\n  var checklines = opt_checklines;\n\n  // Trim off common prefix (speedup).\n  var commonlength = this.diff_commonPrefix(text1, text2);\n  var commonprefix = text1.substring(0, commonlength);\n  text1 = text1.substring(commonlength);\n  text2 = text2.substring(commonlength);\n\n  // Trim off common suffix (speedup).\n  commonlength = this.diff_commonSuffix(text1, text2);\n  var commonsuffix = text1.substring(text1.length - commonlength);\n  text1 = text1.substring(0, text1.length - commonlength);\n  text2 = text2.substring(0, text2.length - commonlength);\n\n  // Compute the diff on the middle block.\n  var diffs = this.diff_compute_(text1, text2, checklines, deadline);\n\n  // Restore the prefix and suffix.\n  if (commonprefix) {\n    diffs.unshift(new diff_match_patch.Diff(DIFF_EQUAL, commonprefix));\n  }\n  if (commonsuffix) {\n    diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, commonsuffix));\n  }\n  this.diff_cleanupMerge(diffs);\n  return diffs;\n};\n\n\n/**\n * Find the differences between two texts.  Assumes that the texts do not\n * have any common prefix or suffix.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {boolean} checklines Speedup flag.  If false, then don't run a\n *     line-level diff first to identify the changed areas.\n *     If true, then run a faster, slightly less optimal diff.\n * @param {number} deadline Time when the diff should be complete by.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_compute_ = function(text1, text2, checklines,\n    deadline) {\n  var diffs;\n\n  if (!text1) {\n    // Just add some text (speedup).\n    return [new diff_match_patch.Diff(DIFF_INSERT, text2)];\n  }\n\n  if (!text2) {\n    // Just delete some text (speedup).\n    return [new diff_match_patch.Diff(DIFF_DELETE, text1)];\n  }\n\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  var i = longtext.indexOf(shorttext);\n  if (i != -1) {\n    // Shorter text is inside the longer text (speedup).\n    diffs = [new diff_match_patch.Diff(DIFF_INSERT, longtext.substring(0, i)),\n             new diff_match_patch.Diff(DIFF_EQUAL, shorttext),\n             new diff_match_patch.Diff(DIFF_INSERT,\n                 longtext.substring(i + shorttext.length))];\n    // Swap insertions for deletions if diff is reversed.\n    if (text1.length > text2.length) {\n      diffs[0][0] = diffs[2][0] = DIFF_DELETE;\n    }\n    return diffs;\n  }\n\n  if (shorttext.length == 1) {\n    // Single character string.\n    // After the previous speedup, the character can't be an equality.\n    return [new diff_match_patch.Diff(DIFF_DELETE, text1),\n            new diff_match_patch.Diff(DIFF_INSERT, text2)];\n  }\n\n  // Check to see if the problem can be split in two.\n  var hm = this.diff_halfMatch_(text1, text2);\n  if (hm) {\n    // A half-match was found, sort out the return data.\n    var text1_a = hm[0];\n    var text1_b = hm[1];\n    var text2_a = hm[2];\n    var text2_b = hm[3];\n    var mid_common = hm[4];\n    // Send both pairs off for separate processing.\n    var diffs_a = this.diff_main(text1_a, text2_a, checklines, deadline);\n    var diffs_b = this.diff_main(text1_b, text2_b, checklines, deadline);\n    // Merge the results.\n    return diffs_a.concat([new diff_match_patch.Diff(DIFF_EQUAL, mid_common)],\n                          diffs_b);\n  }\n\n  if (checklines && text1.length > 100 && text2.length > 100) {\n    return this.diff_lineMode_(text1, text2, deadline);\n  }\n\n  return this.diff_bisect_(text1, text2, deadline);\n};\n\n\n/**\n * Do a quick line-level diff on both strings, then rediff the parts for\n * greater accuracy.\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} deadline Time when the diff should be complete by.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_lineMode_ = function(text1, text2, deadline) {\n  // Scan the text on a line-by-line basis first.\n  var a = this.diff_linesToChars_(text1, text2);\n  text1 = a.chars1;\n  text2 = a.chars2;\n  var linearray = a.lineArray;\n\n  var diffs = this.diff_main(text1, text2, false, deadline);\n\n  // Convert the diff back to original text.\n  this.diff_charsToLines_(diffs, linearray);\n  // Eliminate freak matches (e.g. blank lines)\n  this.diff_cleanupSemantic(diffs);\n\n  // Rediff any replacement blocks, this time character-by-character.\n  // Add a dummy entry at the end.\n  diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, ''));\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        break;\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        break;\n      case DIFF_EQUAL:\n        // Upon reaching an equality, check for prior redundancies.\n        if (count_delete >= 1 && count_insert >= 1) {\n          // Delete the offending records and add the merged ones.\n          diffs.splice(pointer - count_delete - count_insert,\n                       count_delete + count_insert);\n          pointer = pointer - count_delete - count_insert;\n          var subDiff =\n              this.diff_main(text_delete, text_insert, false, deadline);\n          for (var j = subDiff.length - 1; j >= 0; j--) {\n            diffs.splice(pointer, 0, subDiff[j]);\n          }\n          pointer = pointer + subDiff.length;\n        }\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n    pointer++;\n  }\n  diffs.pop();  // Remove the dummy entry at the end.\n\n  return diffs;\n};\n\n\n/**\n * Find the 'middle snake' of a diff, split the problem in two\n * and return the recursively constructed diff.\n * See Myers 1986 paper: An O(ND) Difference Algorithm and Its Variations.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} deadline Time at which to bail if not yet complete.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_bisect_ = function(text1, text2, deadline) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  var max_d = Math.ceil((text1_length + text2_length) / 2);\n  var v_offset = max_d;\n  var v_length = 2 * max_d;\n  var v1 = new Array(v_length);\n  var v2 = new Array(v_length);\n  // Setting all elements to -1 is faster in Chrome & Firefox than mixing\n  // integers and undefined.\n  for (var x = 0; x < v_length; x++) {\n    v1[x] = -1;\n    v2[x] = -1;\n  }\n  v1[v_offset + 1] = 0;\n  v2[v_offset + 1] = 0;\n  var delta = text1_length - text2_length;\n  // If the total number of characters is odd, then the front path will collide\n  // with the reverse path.\n  var front = (delta % 2 != 0);\n  // Offsets for start and end of k loop.\n  // Prevents mapping of space beyond the grid.\n  var k1start = 0;\n  var k1end = 0;\n  var k2start = 0;\n  var k2end = 0;\n  for (var d = 0; d < max_d; d++) {\n    // Bail out if deadline is reached.\n    if ((new Date()).getTime() > deadline) {\n      break;\n    }\n\n    // Walk the front path one step.\n    for (var k1 = -d + k1start; k1 <= d - k1end; k1 += 2) {\n      var k1_offset = v_offset + k1;\n      var x1;\n      if (k1 == -d || (k1 != d && v1[k1_offset - 1] < v1[k1_offset + 1])) {\n        x1 = v1[k1_offset + 1];\n      } else {\n        x1 = v1[k1_offset - 1] + 1;\n      }\n      var y1 = x1 - k1;\n      while (x1 < text1_length && y1 < text2_length &&\n             text1.charAt(x1) == text2.charAt(y1)) {\n        x1++;\n        y1++;\n      }\n      v1[k1_offset] = x1;\n      if (x1 > text1_length) {\n        // Ran off the right of the graph.\n        k1end += 2;\n      } else if (y1 > text2_length) {\n        // Ran off the bottom of the graph.\n        k1start += 2;\n      } else if (front) {\n        var k2_offset = v_offset + delta - k1;\n        if (k2_offset >= 0 && k2_offset < v_length && v2[k2_offset] != -1) {\n          // Mirror x2 onto top-left coordinate system.\n          var x2 = text1_length - v2[k2_offset];\n          if (x1 >= x2) {\n            // Overlap detected.\n            return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);\n          }\n        }\n      }\n    }\n\n    // Walk the reverse path one step.\n    for (var k2 = -d + k2start; k2 <= d - k2end; k2 += 2) {\n      var k2_offset = v_offset + k2;\n      var x2;\n      if (k2 == -d || (k2 != d && v2[k2_offset - 1] < v2[k2_offset + 1])) {\n        x2 = v2[k2_offset + 1];\n      } else {\n        x2 = v2[k2_offset - 1] + 1;\n      }\n      var y2 = x2 - k2;\n      while (x2 < text1_length && y2 < text2_length &&\n             text1.charAt(text1_length - x2 - 1) ==\n             text2.charAt(text2_length - y2 - 1)) {\n        x2++;\n        y2++;\n      }\n      v2[k2_offset] = x2;\n      if (x2 > text1_length) {\n        // Ran off the left of the graph.\n        k2end += 2;\n      } else if (y2 > text2_length) {\n        // Ran off the top of the graph.\n        k2start += 2;\n      } else if (!front) {\n        var k1_offset = v_offset + delta - k2;\n        if (k1_offset >= 0 && k1_offset < v_length && v1[k1_offset] != -1) {\n          var x1 = v1[k1_offset];\n          var y1 = v_offset + x1 - k1_offset;\n          // Mirror x2 onto top-left coordinate system.\n          x2 = text1_length - x2;\n          if (x1 >= x2) {\n            // Overlap detected.\n            return this.diff_bisectSplit_(text1, text2, x1, y1, deadline);\n          }\n        }\n      }\n    }\n  }\n  // Diff took too long and hit the deadline or\n  // number of diffs equals number of characters, no commonality at all.\n  return [new diff_match_patch.Diff(DIFF_DELETE, text1),\n          new diff_match_patch.Diff(DIFF_INSERT, text2)];\n};\n\n\n/**\n * Given the location of the 'middle snake', split the diff in two parts\n * and recurse.\n * @param {string} text1 Old string to be diffed.\n * @param {string} text2 New string to be diffed.\n * @param {number} x Index of split point in text1.\n * @param {number} y Index of split point in text2.\n * @param {number} deadline Time at which to bail if not yet complete.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @private\n */\ndiff_match_patch.prototype.diff_bisectSplit_ = function(text1, text2, x, y,\n    deadline) {\n  var text1a = text1.substring(0, x);\n  var text2a = text2.substring(0, y);\n  var text1b = text1.substring(x);\n  var text2b = text2.substring(y);\n\n  // Compute both diffs serially.\n  var diffs = this.diff_main(text1a, text2a, false, deadline);\n  var diffsb = this.diff_main(text1b, text2b, false, deadline);\n\n  return diffs.concat(diffsb);\n};\n\n\n/**\n * Split two texts into an array of strings.  Reduce the texts to a string of\n * hashes where each Unicode character represents one line.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {{chars1: string, chars2: string, lineArray: !Array.<string>}}\n *     An object containing the encoded text1, the encoded text2 and\n *     the array of unique strings.\n *     The zeroth element of the array of unique strings is intentionally blank.\n * @private\n */\ndiff_match_patch.prototype.diff_linesToChars_ = function(text1, text2) {\n  var lineArray = [];  // e.g. lineArray[4] == 'Hello\\n'\n  var lineHash = {};   // e.g. lineHash['Hello\\n'] == 4\n\n  // '\\x00' is a valid character, but various debuggers don't like it.\n  // So we'll insert a junk entry to avoid generating a null character.\n  lineArray[0] = '';\n\n  /**\n   * Split a text into an array of strings.  Reduce the texts to a string of\n   * hashes where each Unicode character represents one line.\n   * Modifies linearray and linehash through being a closure.\n   * @param {string} text String to encode.\n   * @return {string} Encoded string.\n   * @private\n   */\n  function diff_linesToCharsMunge_(text) {\n    var chars = '';\n    // Walk the text, pulling out a substring for each line.\n    // text.split('\\n') would would temporarily double our memory footprint.\n    // Modifying text would create many large strings to garbage collect.\n    var lineStart = 0;\n    var lineEnd = -1;\n    // Keeping our own length variable is faster than looking it up.\n    var lineArrayLength = lineArray.length;\n    while (lineEnd < text.length - 1) {\n      lineEnd = text.indexOf('\\n', lineStart);\n      if (lineEnd == -1) {\n        lineEnd = text.length - 1;\n      }\n      var line = text.substring(lineStart, lineEnd + 1);\n\n      if (lineHash.hasOwnProperty ? lineHash.hasOwnProperty(line) :\n          (lineHash[line] !== undefined)) {\n        chars += String.fromCharCode(lineHash[line]);\n      } else {\n        if (lineArrayLength == maxLines) {\n          // Bail out at 65535 because\n          // String.fromCharCode(65536) == String.fromCharCode(0)\n          line = text.substring(lineStart);\n          lineEnd = text.length;\n        }\n        chars += String.fromCharCode(lineArrayLength);\n        lineHash[line] = lineArrayLength;\n        lineArray[lineArrayLength++] = line;\n      }\n      lineStart = lineEnd + 1;\n    }\n    return chars;\n  }\n  // Allocate 2/3rds of the space for text1, the rest for text2.\n  var maxLines = 40000;\n  var chars1 = diff_linesToCharsMunge_(text1);\n  maxLines = 65535;\n  var chars2 = diff_linesToCharsMunge_(text2);\n  return {chars1: chars1, chars2: chars2, lineArray: lineArray};\n};\n\n\n/**\n * Rehydrate the text in a diff from a string of line hashes to real lines of\n * text.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @param {!Array.<string>} lineArray Array of unique strings.\n * @private\n */\ndiff_match_patch.prototype.diff_charsToLines_ = function(diffs, lineArray) {\n  for (var i = 0; i < diffs.length; i++) {\n    var chars = diffs[i][1];\n    var text = [];\n    for (var j = 0; j < chars.length; j++) {\n      text[j] = lineArray[chars.charCodeAt(j)];\n    }\n    diffs[i][1] = text.join('');\n  }\n};\n\n\n/**\n * Determine the common prefix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the start of each\n *     string.\n */\ndiff_match_patch.prototype.diff_commonPrefix = function(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 || text1.charAt(0) != text2.charAt(0)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: https://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerstart = 0;\n  while (pointermin < pointermid) {\n    if (text1.substring(pointerstart, pointermid) ==\n        text2.substring(pointerstart, pointermid)) {\n      pointermin = pointermid;\n      pointerstart = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n};\n\n\n/**\n * Determine the common suffix of two strings.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of each string.\n */\ndiff_match_patch.prototype.diff_commonSuffix = function(text1, text2) {\n  // Quick check for common null cases.\n  if (!text1 || !text2 ||\n      text1.charAt(text1.length - 1) != text2.charAt(text2.length - 1)) {\n    return 0;\n  }\n  // Binary search.\n  // Performance analysis: https://neil.fraser.name/news/2007/10/09/\n  var pointermin = 0;\n  var pointermax = Math.min(text1.length, text2.length);\n  var pointermid = pointermax;\n  var pointerend = 0;\n  while (pointermin < pointermid) {\n    if (text1.substring(text1.length - pointermid, text1.length - pointerend) ==\n        text2.substring(text2.length - pointermid, text2.length - pointerend)) {\n      pointermin = pointermid;\n      pointerend = pointermin;\n    } else {\n      pointermax = pointermid;\n    }\n    pointermid = Math.floor((pointermax - pointermin) / 2 + pointermin);\n  }\n  return pointermid;\n};\n\n\n/**\n * Determine if the suffix of one string is the prefix of another.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {number} The number of characters common to the end of the first\n *     string and the start of the second string.\n * @private\n */\ndiff_match_patch.prototype.diff_commonOverlap_ = function(text1, text2) {\n  // Cache the text lengths to prevent multiple calls.\n  var text1_length = text1.length;\n  var text2_length = text2.length;\n  // Eliminate the null case.\n  if (text1_length == 0 || text2_length == 0) {\n    return 0;\n  }\n  // Truncate the longer string.\n  if (text1_length > text2_length) {\n    text1 = text1.substring(text1_length - text2_length);\n  } else if (text1_length < text2_length) {\n    text2 = text2.substring(0, text1_length);\n  }\n  var text_length = Math.min(text1_length, text2_length);\n  // Quick check for the worst case.\n  if (text1 == text2) {\n    return text_length;\n  }\n\n  // Start by looking for a single character match\n  // and increase length until no match is found.\n  // Performance analysis: https://neil.fraser.name/news/2010/11/04/\n  var best = 0;\n  var length = 1;\n  while (true) {\n    var pattern = text1.substring(text_length - length);\n    var found = text2.indexOf(pattern);\n    if (found == -1) {\n      return best;\n    }\n    length += found;\n    if (found == 0 || text1.substring(text_length - length) ==\n        text2.substring(0, length)) {\n      best = length;\n      length++;\n    }\n  }\n};\n\n\n/**\n * Do the two texts share a substring which is at least half the length of the\n * longer text?\n * This speedup can produce non-minimal diffs.\n * @param {string} text1 First string.\n * @param {string} text2 Second string.\n * @return {Array.<string>} Five element Array, containing the prefix of\n *     text1, the suffix of text1, the prefix of text2, the suffix of\n *     text2 and the common middle.  Or null if there was no match.\n * @private\n */\ndiff_match_patch.prototype.diff_halfMatch_ = function(text1, text2) {\n  if (this.Diff_Timeout <= 0) {\n    // Don't risk returning a non-optimal diff if we have unlimited time.\n    return null;\n  }\n  var longtext = text1.length > text2.length ? text1 : text2;\n  var shorttext = text1.length > text2.length ? text2 : text1;\n  if (longtext.length < 4 || shorttext.length * 2 < longtext.length) {\n    return null;  // Pointless.\n  }\n  var dmp = this;  // 'this' becomes 'window' in a closure.\n\n  /**\n   * Does a substring of shorttext exist within longtext such that the substring\n   * is at least half the length of longtext?\n   * Closure, but does not reference any external variables.\n   * @param {string} longtext Longer string.\n   * @param {string} shorttext Shorter string.\n   * @param {number} i Start index of quarter length substring within longtext.\n   * @return {Array.<string>} Five element Array, containing the prefix of\n   *     longtext, the suffix of longtext, the prefix of shorttext, the suffix\n   *     of shorttext and the common middle.  Or null if there was no match.\n   * @private\n   */\n  function diff_halfMatchI_(longtext, shorttext, i) {\n    // Start with a 1/4 length substring at position i as a seed.\n    var seed = longtext.substring(i, i + Math.floor(longtext.length / 4));\n    var j = -1;\n    var best_common = '';\n    var best_longtext_a, best_longtext_b, best_shorttext_a, best_shorttext_b;\n    while ((j = shorttext.indexOf(seed, j + 1)) != -1) {\n      var prefixLength = dmp.diff_commonPrefix(longtext.substring(i),\n                                               shorttext.substring(j));\n      var suffixLength = dmp.diff_commonSuffix(longtext.substring(0, i),\n                                               shorttext.substring(0, j));\n      if (best_common.length < suffixLength + prefixLength) {\n        best_common = shorttext.substring(j - suffixLength, j) +\n            shorttext.substring(j, j + prefixLength);\n        best_longtext_a = longtext.substring(0, i - suffixLength);\n        best_longtext_b = longtext.substring(i + prefixLength);\n        best_shorttext_a = shorttext.substring(0, j - suffixLength);\n        best_shorttext_b = shorttext.substring(j + prefixLength);\n      }\n    }\n    if (best_common.length * 2 >= longtext.length) {\n      return [best_longtext_a, best_longtext_b,\n              best_shorttext_a, best_shorttext_b, best_common];\n    } else {\n      return null;\n    }\n  }\n\n  // First check if the second quarter is the seed for a half-match.\n  var hm1 = diff_halfMatchI_(longtext, shorttext,\n                             Math.ceil(longtext.length / 4));\n  // Check again based on the third quarter.\n  var hm2 = diff_halfMatchI_(longtext, shorttext,\n                             Math.ceil(longtext.length / 2));\n  var hm;\n  if (!hm1 && !hm2) {\n    return null;\n  } else if (!hm2) {\n    hm = hm1;\n  } else if (!hm1) {\n    hm = hm2;\n  } else {\n    // Both matched.  Select the longest.\n    hm = hm1[4].length > hm2[4].length ? hm1 : hm2;\n  }\n\n  // A half-match was found, sort out the return data.\n  var text1_a, text1_b, text2_a, text2_b;\n  if (text1.length > text2.length) {\n    text1_a = hm[0];\n    text1_b = hm[1];\n    text2_a = hm[2];\n    text2_b = hm[3];\n  } else {\n    text2_a = hm[0];\n    text2_b = hm[1];\n    text1_a = hm[2];\n    text1_b = hm[3];\n  }\n  var mid_common = hm[4];\n  return [text1_a, text1_b, text2_a, text2_b, mid_common];\n};\n\n\n/**\n * Reduce the number of edits by eliminating semantically trivial equalities.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupSemantic = function(diffs) {\n  var changes = false;\n  var equalities = [];  // Stack of indices where equalities are found.\n  var equalitiesLength = 0;  // Keeping our own length var is faster in JS.\n  /** @type {?string} */\n  var lastEquality = null;\n  // Always equal to diffs[equalities[equalitiesLength - 1]][1]\n  var pointer = 0;  // Index of current position.\n  // Number of characters that changed prior to the equality.\n  var length_insertions1 = 0;\n  var length_deletions1 = 0;\n  // Number of characters that changed after the equality.\n  var length_insertions2 = 0;\n  var length_deletions2 = 0;\n  while (pointer < diffs.length) {\n    if (diffs[pointer][0] == DIFF_EQUAL) {  // Equality found.\n      equalities[equalitiesLength++] = pointer;\n      length_insertions1 = length_insertions2;\n      length_deletions1 = length_deletions2;\n      length_insertions2 = 0;\n      length_deletions2 = 0;\n      lastEquality = diffs[pointer][1];\n    } else {  // An insertion or deletion.\n      if (diffs[pointer][0] == DIFF_INSERT) {\n        length_insertions2 += diffs[pointer][1].length;\n      } else {\n        length_deletions2 += diffs[pointer][1].length;\n      }\n      // Eliminate an equality that is smaller or equal to the edits on both\n      // sides of it.\n      if (lastEquality && (lastEquality.length <=\n          Math.max(length_insertions1, length_deletions1)) &&\n          (lastEquality.length <= Math.max(length_insertions2,\n                                           length_deletions2))) {\n        // Duplicate record.\n        diffs.splice(equalities[equalitiesLength - 1], 0,\n                     new diff_match_patch.Diff(DIFF_DELETE, lastEquality));\n        // Change second copy to insert.\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n        // Throw away the equality we just deleted.\n        equalitiesLength--;\n        // Throw away the previous equality (it needs to be reevaluated).\n        equalitiesLength--;\n        pointer = equalitiesLength > 0 ? equalities[equalitiesLength - 1] : -1;\n        length_insertions1 = 0;  // Reset the counters.\n        length_deletions1 = 0;\n        length_insertions2 = 0;\n        length_deletions2 = 0;\n        lastEquality = null;\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n\n  // Normalize the diff.\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n  this.diff_cleanupSemanticLossless(diffs);\n\n  // Find any overlaps between deletions and insertions.\n  // e.g: <del>abcxxx</del><ins>xxxdef</ins>\n  //   -> <del>abc</del>xxx<ins>def</ins>\n  // e.g: <del>xxxabc</del><ins>defxxx</ins>\n  //   -> <ins>def</ins>xxx<del>abc</del>\n  // Only extract an overlap if it is as big as the edit ahead or behind it.\n  pointer = 1;\n  while (pointer < diffs.length) {\n    if (diffs[pointer - 1][0] == DIFF_DELETE &&\n        diffs[pointer][0] == DIFF_INSERT) {\n      var deletion = diffs[pointer - 1][1];\n      var insertion = diffs[pointer][1];\n      var overlap_length1 = this.diff_commonOverlap_(deletion, insertion);\n      var overlap_length2 = this.diff_commonOverlap_(insertion, deletion);\n      if (overlap_length1 >= overlap_length2) {\n        if (overlap_length1 >= deletion.length / 2 ||\n            overlap_length1 >= insertion.length / 2) {\n          // Overlap found.  Insert an equality and trim the surrounding edits.\n          diffs.splice(pointer, 0, new diff_match_patch.Diff(DIFF_EQUAL,\n              insertion.substring(0, overlap_length1)));\n          diffs[pointer - 1][1] =\n              deletion.substring(0, deletion.length - overlap_length1);\n          diffs[pointer + 1][1] = insertion.substring(overlap_length1);\n          pointer++;\n        }\n      } else {\n        if (overlap_length2 >= deletion.length / 2 ||\n            overlap_length2 >= insertion.length / 2) {\n          // Reverse overlap found.\n          // Insert an equality and swap and trim the surrounding edits.\n          diffs.splice(pointer, 0, new diff_match_patch.Diff(DIFF_EQUAL,\n              deletion.substring(0, overlap_length2)));\n          diffs[pointer - 1][0] = DIFF_INSERT;\n          diffs[pointer - 1][1] =\n              insertion.substring(0, insertion.length - overlap_length2);\n          diffs[pointer + 1][0] = DIFF_DELETE;\n          diffs[pointer + 1][1] =\n              deletion.substring(overlap_length2);\n          pointer++;\n        }\n      }\n      pointer++;\n    }\n    pointer++;\n  }\n};\n\n\n/**\n * Look for single edits surrounded on both sides by equalities\n * which can be shifted sideways to align the edit to a word boundary.\n * e.g: The c<ins>at c</ins>ame. -> The <ins>cat </ins>came.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupSemanticLossless = function(diffs) {\n  /**\n   * Given two strings, compute a score representing whether the internal\n   * boundary falls on logical boundaries.\n   * Scores range from 6 (best) to 0 (worst).\n   * Closure, but does not reference any external variables.\n   * @param {string} one First string.\n   * @param {string} two Second string.\n   * @return {number} The score.\n   * @private\n   */\n  function diff_cleanupSemanticScore_(one, two) {\n    if (!one || !two) {\n      // Edges are the best.\n      return 6;\n    }\n\n    // Each port of this function behaves slightly differently due to\n    // subtle differences in each language's definition of things like\n    // 'whitespace'.  Since this function's purpose is largely cosmetic,\n    // the choice has been made to use each language's native features\n    // rather than force total conformity.\n    var char1 = one.charAt(one.length - 1);\n    var char2 = two.charAt(0);\n    var nonAlphaNumeric1 = char1.match(diff_match_patch.nonAlphaNumericRegex_);\n    var nonAlphaNumeric2 = char2.match(diff_match_patch.nonAlphaNumericRegex_);\n    var whitespace1 = nonAlphaNumeric1 &&\n        char1.match(diff_match_patch.whitespaceRegex_);\n    var whitespace2 = nonAlphaNumeric2 &&\n        char2.match(diff_match_patch.whitespaceRegex_);\n    var lineBreak1 = whitespace1 &&\n        char1.match(diff_match_patch.linebreakRegex_);\n    var lineBreak2 = whitespace2 &&\n        char2.match(diff_match_patch.linebreakRegex_);\n    var blankLine1 = lineBreak1 &&\n        one.match(diff_match_patch.blanklineEndRegex_);\n    var blankLine2 = lineBreak2 &&\n        two.match(diff_match_patch.blanklineStartRegex_);\n\n    if (blankLine1 || blankLine2) {\n      // Five points for blank lines.\n      return 5;\n    } else if (lineBreak1 || lineBreak2) {\n      // Four points for line breaks.\n      return 4;\n    } else if (nonAlphaNumeric1 && !whitespace1 && whitespace2) {\n      // Three points for end of sentences.\n      return 3;\n    } else if (whitespace1 || whitespace2) {\n      // Two points for whitespace.\n      return 2;\n    } else if (nonAlphaNumeric1 || nonAlphaNumeric2) {\n      // One point for non-alphanumeric.\n      return 1;\n    }\n    return 0;\n  }\n\n  var pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] == DIFF_EQUAL &&\n        diffs[pointer + 1][0] == DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      var equality1 = diffs[pointer - 1][1];\n      var edit = diffs[pointer][1];\n      var equality2 = diffs[pointer + 1][1];\n\n      // First, shift the edit as far left as possible.\n      var commonOffset = this.diff_commonSuffix(equality1, edit);\n      if (commonOffset) {\n        var commonString = edit.substring(edit.length - commonOffset);\n        equality1 = equality1.substring(0, equality1.length - commonOffset);\n        edit = commonString + edit.substring(0, edit.length - commonOffset);\n        equality2 = commonString + equality2;\n      }\n\n      // Second, step character by character right, looking for the best fit.\n      var bestEquality1 = equality1;\n      var bestEdit = edit;\n      var bestEquality2 = equality2;\n      var bestScore = diff_cleanupSemanticScore_(equality1, edit) +\n          diff_cleanupSemanticScore_(edit, equality2);\n      while (edit.charAt(0) === equality2.charAt(0)) {\n        equality1 += edit.charAt(0);\n        edit = edit.substring(1) + equality2.charAt(0);\n        equality2 = equality2.substring(1);\n        var score = diff_cleanupSemanticScore_(equality1, edit) +\n            diff_cleanupSemanticScore_(edit, equality2);\n        // The >= encourages trailing rather than leading whitespace on edits.\n        if (score >= bestScore) {\n          bestScore = score;\n          bestEquality1 = equality1;\n          bestEdit = edit;\n          bestEquality2 = equality2;\n        }\n      }\n\n      if (diffs[pointer - 1][1] != bestEquality1) {\n        // We have an improvement, save it back to the diff.\n        if (bestEquality1) {\n          diffs[pointer - 1][1] = bestEquality1;\n        } else {\n          diffs.splice(pointer - 1, 1);\n          pointer--;\n        }\n        diffs[pointer][1] = bestEdit;\n        if (bestEquality2) {\n          diffs[pointer + 1][1] = bestEquality2;\n        } else {\n          diffs.splice(pointer + 1, 1);\n          pointer--;\n        }\n      }\n    }\n    pointer++;\n  }\n};\n\n// Define some regex patterns for matching boundaries.\ndiff_match_patch.nonAlphaNumericRegex_ = /[^a-zA-Z0-9]/;\ndiff_match_patch.whitespaceRegex_ = /\\s/;\ndiff_match_patch.linebreakRegex_ = /[\\r\\n]/;\ndiff_match_patch.blanklineEndRegex_ = /\\n\\r?\\n$/;\ndiff_match_patch.blanklineStartRegex_ = /^\\r?\\n\\r?\\n/;\n\n/**\n * Reduce the number of edits by eliminating operationally trivial equalities.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupEfficiency = function(diffs) {\n  var changes = false;\n  var equalities = [];  // Stack of indices where equalities are found.\n  var equalitiesLength = 0;  // Keeping our own length var is faster in JS.\n  /** @type {?string} */\n  var lastEquality = null;\n  // Always equal to diffs[equalities[equalitiesLength - 1]][1]\n  var pointer = 0;  // Index of current position.\n  // Is there an insertion operation before the last equality.\n  var pre_ins = false;\n  // Is there a deletion operation before the last equality.\n  var pre_del = false;\n  // Is there an insertion operation after the last equality.\n  var post_ins = false;\n  // Is there a deletion operation after the last equality.\n  var post_del = false;\n  while (pointer < diffs.length) {\n    if (diffs[pointer][0] == DIFF_EQUAL) {  // Equality found.\n      if (diffs[pointer][1].length < this.Diff_EditCost &&\n          (post_ins || post_del)) {\n        // Candidate found.\n        equalities[equalitiesLength++] = pointer;\n        pre_ins = post_ins;\n        pre_del = post_del;\n        lastEquality = diffs[pointer][1];\n      } else {\n        // Not a candidate, and can never become one.\n        equalitiesLength = 0;\n        lastEquality = null;\n      }\n      post_ins = post_del = false;\n    } else {  // An insertion or deletion.\n      if (diffs[pointer][0] == DIFF_DELETE) {\n        post_del = true;\n      } else {\n        post_ins = true;\n      }\n      /*\n       * Five types to be split:\n       * <ins>A</ins><del>B</del>XY<ins>C</ins><del>D</del>\n       * <ins>A</ins>X<ins>C</ins><del>D</del>\n       * <ins>A</ins><del>B</del>X<ins>C</ins>\n       * <ins>A</del>X<ins>C</ins><del>D</del>\n       * <ins>A</ins><del>B</del>X<del>C</del>\n       */\n      if (lastEquality && ((pre_ins && pre_del && post_ins && post_del) ||\n                           ((lastEquality.length < this.Diff_EditCost / 2) &&\n                            (pre_ins + pre_del + post_ins + post_del) == 3))) {\n        // Duplicate record.\n        diffs.splice(equalities[equalitiesLength - 1], 0,\n                     new diff_match_patch.Diff(DIFF_DELETE, lastEquality));\n        // Change second copy to insert.\n        diffs[equalities[equalitiesLength - 1] + 1][0] = DIFF_INSERT;\n        equalitiesLength--;  // Throw away the equality we just deleted;\n        lastEquality = null;\n        if (pre_ins && pre_del) {\n          // No changes made which could affect previous entry, keep going.\n          post_ins = post_del = true;\n          equalitiesLength = 0;\n        } else {\n          equalitiesLength--;  // Throw away the previous equality.\n          pointer = equalitiesLength > 0 ?\n              equalities[equalitiesLength - 1] : -1;\n          post_ins = post_del = false;\n        }\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n};\n\n\n/**\n * Reorder and merge like edit sections.  Merge equalities.\n * Any edit section can move as long as it doesn't cross an equality.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n */\ndiff_match_patch.prototype.diff_cleanupMerge = function(diffs) {\n  // Add a dummy entry at the end.\n  diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, ''));\n  var pointer = 0;\n  var count_delete = 0;\n  var count_insert = 0;\n  var text_delete = '';\n  var text_insert = '';\n  var commonlength;\n  while (pointer < diffs.length) {\n    switch (diffs[pointer][0]) {\n      case DIFF_INSERT:\n        count_insert++;\n        text_insert += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_DELETE:\n        count_delete++;\n        text_delete += diffs[pointer][1];\n        pointer++;\n        break;\n      case DIFF_EQUAL:\n        // Upon reaching an equality, check for prior redundancies.\n        if (count_delete + count_insert > 1) {\n          if (count_delete !== 0 && count_insert !== 0) {\n            // Factor out any common prefixies.\n            commonlength = this.diff_commonPrefix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              if ((pointer - count_delete - count_insert) > 0 &&\n                  diffs[pointer - count_delete - count_insert - 1][0] ==\n                  DIFF_EQUAL) {\n                diffs[pointer - count_delete - count_insert - 1][1] +=\n                    text_insert.substring(0, commonlength);\n              } else {\n                diffs.splice(0, 0, new diff_match_patch.Diff(DIFF_EQUAL,\n                    text_insert.substring(0, commonlength)));\n                pointer++;\n              }\n              text_insert = text_insert.substring(commonlength);\n              text_delete = text_delete.substring(commonlength);\n            }\n            // Factor out any common suffixies.\n            commonlength = this.diff_commonSuffix(text_insert, text_delete);\n            if (commonlength !== 0) {\n              diffs[pointer][1] = text_insert.substring(text_insert.length -\n                  commonlength) + diffs[pointer][1];\n              text_insert = text_insert.substring(0, text_insert.length -\n                  commonlength);\n              text_delete = text_delete.substring(0, text_delete.length -\n                  commonlength);\n            }\n          }\n          // Delete the offending records and add the merged ones.\n          pointer -= count_delete + count_insert;\n          diffs.splice(pointer, count_delete + count_insert);\n          if (text_delete.length) {\n            diffs.splice(pointer, 0,\n                new diff_match_patch.Diff(DIFF_DELETE, text_delete));\n            pointer++;\n          }\n          if (text_insert.length) {\n            diffs.splice(pointer, 0,\n                new diff_match_patch.Diff(DIFF_INSERT, text_insert));\n            pointer++;\n          }\n          pointer++;\n        } else if (pointer !== 0 && diffs[pointer - 1][0] == DIFF_EQUAL) {\n          // Merge this equality with the previous one.\n          diffs[pointer - 1][1] += diffs[pointer][1];\n          diffs.splice(pointer, 1);\n        } else {\n          pointer++;\n        }\n        count_insert = 0;\n        count_delete = 0;\n        text_delete = '';\n        text_insert = '';\n        break;\n    }\n  }\n  if (diffs[diffs.length - 1][1] === '') {\n    diffs.pop();  // Remove the dummy entry at the end.\n  }\n\n  // Second pass: look for single edits surrounded on both sides by equalities\n  // which can be shifted sideways to eliminate an equality.\n  // e.g: A<ins>BA</ins>C -> <ins>AB</ins>AC\n  var changes = false;\n  pointer = 1;\n  // Intentionally ignore the first and last element (don't need checking).\n  while (pointer < diffs.length - 1) {\n    if (diffs[pointer - 1][0] == DIFF_EQUAL &&\n        diffs[pointer + 1][0] == DIFF_EQUAL) {\n      // This is a single edit surrounded by equalities.\n      if (diffs[pointer][1].substring(diffs[pointer][1].length -\n          diffs[pointer - 1][1].length) == diffs[pointer - 1][1]) {\n        // Shift the edit over the previous equality.\n        diffs[pointer][1] = diffs[pointer - 1][1] +\n            diffs[pointer][1].substring(0, diffs[pointer][1].length -\n                                        diffs[pointer - 1][1].length);\n        diffs[pointer + 1][1] = diffs[pointer - 1][1] + diffs[pointer + 1][1];\n        diffs.splice(pointer - 1, 1);\n        changes = true;\n      } else if (diffs[pointer][1].substring(0, diffs[pointer + 1][1].length) ==\n          diffs[pointer + 1][1]) {\n        // Shift the edit over the next equality.\n        diffs[pointer - 1][1] += diffs[pointer + 1][1];\n        diffs[pointer][1] =\n            diffs[pointer][1].substring(diffs[pointer + 1][1].length) +\n            diffs[pointer + 1][1];\n        diffs.splice(pointer + 1, 1);\n        changes = true;\n      }\n    }\n    pointer++;\n  }\n  // If shifts were made, the diff needs reordering and another shift sweep.\n  if (changes) {\n    this.diff_cleanupMerge(diffs);\n  }\n};\n\n\n/**\n * loc is a location in text1, compute and return the equivalent location in\n * text2.\n * e.g. 'The cat' vs 'The big cat', 1->1, 5->8\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @param {number} loc Location within text1.\n * @return {number} Location within text2.\n */\ndiff_match_patch.prototype.diff_xIndex = function(diffs, loc) {\n  var chars1 = 0;\n  var chars2 = 0;\n  var last_chars1 = 0;\n  var last_chars2 = 0;\n  var x;\n  for (x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_INSERT) {  // Equality or deletion.\n      chars1 += diffs[x][1].length;\n    }\n    if (diffs[x][0] !== DIFF_DELETE) {  // Equality or insertion.\n      chars2 += diffs[x][1].length;\n    }\n    if (chars1 > loc) {  // Overshot the location.\n      break;\n    }\n    last_chars1 = chars1;\n    last_chars2 = chars2;\n  }\n  // Was the location was deleted?\n  if (diffs.length != x && diffs[x][0] === DIFF_DELETE) {\n    return last_chars2;\n  }\n  // Add the remaining character length.\n  return last_chars2 + (loc - last_chars1);\n};\n\n\n/**\n * Convert a diff array into a pretty HTML report.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} HTML representation.\n */\ndiff_match_patch.prototype.diff_prettyHtml = function(diffs) {\n  var html = [];\n  var pattern_amp = /&/g;\n  var pattern_lt = /</g;\n  var pattern_gt = />/g;\n  var pattern_para = /\\n/g;\n  for (var x = 0; x < diffs.length; x++) {\n    var op = diffs[x][0];    // Operation (insert, delete, equal)\n    var data = diffs[x][1];  // Text of change.\n    var text = data.replace(pattern_amp, '&amp;').replace(pattern_lt, '&lt;')\n        .replace(pattern_gt, '&gt;').replace(pattern_para, '&para;<br>');\n    switch (op) {\n      case DIFF_INSERT:\n        html[x] = '<ins style=\"background:#e6ffe6;\">' + text + '</ins>';\n        break;\n      case DIFF_DELETE:\n        html[x] = '<del style=\"background:#ffe6e6;\">' + text + '</del>';\n        break;\n      case DIFF_EQUAL:\n        html[x] = '<span>' + text + '</span>';\n        break;\n    }\n  }\n  return html.join('');\n};\n\n\n/**\n * Compute and return the source text (all equalities and deletions).\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Source text.\n */\ndiff_match_patch.prototype.diff_text1 = function(diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_INSERT) {\n      text[x] = diffs[x][1];\n    }\n  }\n  return text.join('');\n};\n\n\n/**\n * Compute and return the destination text (all equalities and insertions).\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Destination text.\n */\ndiff_match_patch.prototype.diff_text2 = function(diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    if (diffs[x][0] !== DIFF_DELETE) {\n      text[x] = diffs[x][1];\n    }\n  }\n  return text.join('');\n};\n\n\n/**\n * Compute the Levenshtein distance; the number of inserted, deleted or\n * substituted characters.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {number} Number of changes.\n */\ndiff_match_patch.prototype.diff_levenshtein = function(diffs) {\n  var levenshtein = 0;\n  var insertions = 0;\n  var deletions = 0;\n  for (var x = 0; x < diffs.length; x++) {\n    var op = diffs[x][0];\n    var data = diffs[x][1];\n    switch (op) {\n      case DIFF_INSERT:\n        insertions += data.length;\n        break;\n      case DIFF_DELETE:\n        deletions += data.length;\n        break;\n      case DIFF_EQUAL:\n        // A deletion and an insertion is one substitution.\n        levenshtein += Math.max(insertions, deletions);\n        insertions = 0;\n        deletions = 0;\n        break;\n    }\n  }\n  levenshtein += Math.max(insertions, deletions);\n  return levenshtein;\n};\n\n\n/**\n * Crush the diff into an encoded string which describes the operations\n * required to transform text1 into text2.\n * E.g. =3\\t-2\\t+ing  -> Keep 3 chars, delete 2 chars, insert 'ing'.\n * Operations are tab-separated.  Inserted text is escaped using %xx notation.\n * @param {!Array.<!diff_match_patch.Diff>} diffs Array of diff tuples.\n * @return {string} Delta text.\n */\ndiff_match_patch.prototype.diff_toDelta = function(diffs) {\n  var text = [];\n  for (var x = 0; x < diffs.length; x++) {\n    switch (diffs[x][0]) {\n      case DIFF_INSERT:\n        text[x] = '+' + encodeURI(diffs[x][1]);\n        break;\n      case DIFF_DELETE:\n        text[x] = '-' + diffs[x][1].length;\n        break;\n      case DIFF_EQUAL:\n        text[x] = '=' + diffs[x][1].length;\n        break;\n    }\n  }\n  return text.join('\\t').replace(/%20/g, ' ');\n};\n\n\n/**\n * Given the original text1, and an encoded string which describes the\n * operations required to transform text1 into text2, compute the full diff.\n * @param {string} text1 Source string for the diff.\n * @param {string} delta Delta text.\n * @return {!Array.<!diff_match_patch.Diff>} Array of diff tuples.\n * @throws {!Error} If invalid input.\n */\ndiff_match_patch.prototype.diff_fromDelta = function(text1, delta) {\n  var diffs = [];\n  var diffsLength = 0;  // Keeping our own length var is faster in JS.\n  var pointer = 0;  // Cursor in text1\n  var tokens = delta.split(/\\t/g);\n  for (var x = 0; x < tokens.length; x++) {\n    // Each token begins with a one character parameter which specifies the\n    // operation of this token (delete, insert, equality).\n    var param = tokens[x].substring(1);\n    switch (tokens[x].charAt(0)) {\n      case '+':\n        try {\n          diffs[diffsLength++] =\n              new diff_match_patch.Diff(DIFF_INSERT, decodeURI(param));\n        } catch (ex) {\n          // Malformed URI sequence.\n          throw new Error('Illegal escape in diff_fromDelta: ' + param);\n        }\n        break;\n      case '-':\n        // Fall through.\n      case '=':\n        var n = parseInt(param, 10);\n        if (isNaN(n) || n < 0) {\n          throw new Error('Invalid number in diff_fromDelta: ' + param);\n        }\n        var text = text1.substring(pointer, pointer += n);\n        if (tokens[x].charAt(0) == '=') {\n          diffs[diffsLength++] = new diff_match_patch.Diff(DIFF_EQUAL, text);\n        } else {\n          diffs[diffsLength++] = new diff_match_patch.Diff(DIFF_DELETE, text);\n        }\n        break;\n      default:\n        // Blank tokens are ok (from a trailing \\t).\n        // Anything else is an error.\n        if (tokens[x]) {\n          throw new Error('Invalid diff operation in diff_fromDelta: ' +\n                          tokens[x]);\n        }\n    }\n  }\n  if (pointer != text1.length) {\n    throw new Error('Delta length (' + pointer +\n        ') does not equal source text length (' + text1.length + ').');\n  }\n  return diffs;\n};\n\n\n//  MATCH FUNCTIONS\n\n\n/**\n * Locate the best instance of 'pattern' in 'text' near 'loc'.\n * @param {string} text The text to search.\n * @param {string} pattern The pattern to search for.\n * @param {number} loc The location to search around.\n * @return {number} Best match index or -1.\n */\ndiff_match_patch.prototype.match_main = function(text, pattern, loc) {\n  // Check for null inputs.\n  if (text == null || pattern == null || loc == null) {\n    throw new Error('Null input. (match_main)');\n  }\n\n  loc = Math.max(0, Math.min(loc, text.length));\n  if (text == pattern) {\n    // Shortcut (potentially not guaranteed by the algorithm)\n    return 0;\n  } else if (!text.length) {\n    // Nothing to match.\n    return -1;\n  } else if (text.substring(loc, loc + pattern.length) == pattern) {\n    // Perfect match at the perfect spot!  (Includes case of null pattern)\n    return loc;\n  } else {\n    // Do a fuzzy compare.\n    return this.match_bitap_(text, pattern, loc);\n  }\n};\n\n\n/**\n * Locate the best instance of 'pattern' in 'text' near 'loc' using the\n * Bitap algorithm.\n * @param {string} text The text to search.\n * @param {string} pattern The pattern to search for.\n * @param {number} loc The location to search around.\n * @return {number} Best match index or -1.\n * @private\n */\ndiff_match_patch.prototype.match_bitap_ = function(text, pattern, loc) {\n  if (pattern.length > this.Match_MaxBits) {\n    throw new Error('Pattern too long for this browser.');\n  }\n\n  // Initialise the alphabet.\n  var s = this.match_alphabet_(pattern);\n\n  var dmp = this;  // 'this' becomes 'window' in a closure.\n\n  /**\n   * Compute and return the score for a match with e errors and x location.\n   * Accesses loc and pattern through being a closure.\n   * @param {number} e Number of errors in match.\n   * @param {number} x Location of match.\n   * @return {number} Overall score for match (0.0 = good, 1.0 = bad).\n   * @private\n   */\n  function match_bitapScore_(e, x) {\n    var accuracy = e / pattern.length;\n    var proximity = Math.abs(loc - x);\n    if (!dmp.Match_Distance) {\n      // Dodge divide by zero error.\n      return proximity ? 1.0 : accuracy;\n    }\n    return accuracy + (proximity / dmp.Match_Distance);\n  }\n\n  // Highest score beyond which we give up.\n  var score_threshold = this.Match_Threshold;\n  // Is there a nearby exact match? (speedup)\n  var best_loc = text.indexOf(pattern, loc);\n  if (best_loc != -1) {\n    score_threshold = Math.min(match_bitapScore_(0, best_loc), score_threshold);\n    // What about in the other direction? (speedup)\n    best_loc = text.lastIndexOf(pattern, loc + pattern.length);\n    if (best_loc != -1) {\n      score_threshold =\n          Math.min(match_bitapScore_(0, best_loc), score_threshold);\n    }\n  }\n\n  // Initialise the bit arrays.\n  var matchmask = 1 << (pattern.length - 1);\n  best_loc = -1;\n\n  var bin_min, bin_mid;\n  var bin_max = pattern.length + text.length;\n  var last_rd;\n  for (var d = 0; d < pattern.length; d++) {\n    // Scan for the best match; each iteration allows for one more error.\n    // Run a binary search to determine how far from 'loc' we can stray at this\n    // error level.\n    bin_min = 0;\n    bin_mid = bin_max;\n    while (bin_min < bin_mid) {\n      if (match_bitapScore_(d, loc + bin_mid) <= score_threshold) {\n        bin_min = bin_mid;\n      } else {\n        bin_max = bin_mid;\n      }\n      bin_mid = Math.floor((bin_max - bin_min) / 2 + bin_min);\n    }\n    // Use the result from this iteration as the maximum for the next.\n    bin_max = bin_mid;\n    var start = Math.max(1, loc - bin_mid + 1);\n    var finish = Math.min(loc + bin_mid, text.length) + pattern.length;\n\n    var rd = Array(finish + 2);\n    rd[finish + 1] = (1 << d) - 1;\n    for (var j = finish; j >= start; j--) {\n      // The alphabet (s) is a sparse hash, so the following line generates\n      // warnings.\n      var charMatch = s[text.charAt(j - 1)];\n      if (d === 0) {  // First pass: exact match.\n        rd[j] = ((rd[j + 1] << 1) | 1) & charMatch;\n      } else {  // Subsequent passes: fuzzy match.\n        rd[j] = (((rd[j + 1] << 1) | 1) & charMatch) |\n                (((last_rd[j + 1] | last_rd[j]) << 1) | 1) |\n                last_rd[j + 1];\n      }\n      if (rd[j] & matchmask) {\n        var score = match_bitapScore_(d, j - 1);\n        // This match will almost certainly be better than any existing match.\n        // But check anyway.\n        if (score <= score_threshold) {\n          // Told you so.\n          score_threshold = score;\n          best_loc = j - 1;\n          if (best_loc > loc) {\n            // When passing loc, don't exceed our current distance from loc.\n            start = Math.max(1, 2 * loc - best_loc);\n          } else {\n            // Already passed loc, downhill from here on in.\n            break;\n          }\n        }\n      }\n    }\n    // No hope for a (better) match at greater error levels.\n    if (match_bitapScore_(d + 1, loc) > score_threshold) {\n      break;\n    }\n    last_rd = rd;\n  }\n  return best_loc;\n};\n\n\n/**\n * Initialise the alphabet for the Bitap algorithm.\n * @param {string} pattern The text to encode.\n * @return {!Object} Hash of character locations.\n * @private\n */\ndiff_match_patch.prototype.match_alphabet_ = function(pattern) {\n  var s = {};\n  for (var i = 0; i < pattern.length; i++) {\n    s[pattern.charAt(i)] = 0;\n  }\n  for (var i = 0; i < pattern.length; i++) {\n    s[pattern.charAt(i)] |= 1 << (pattern.length - i - 1);\n  }\n  return s;\n};\n\n\n//  PATCH FUNCTIONS\n\n\n/**\n * Increase the context until it is unique,\n * but don't let the pattern expand beyond Match_MaxBits.\n * @param {!diff_match_patch.patch_obj} patch The patch to grow.\n * @param {string} text Source text.\n * @private\n */\ndiff_match_patch.prototype.patch_addContext_ = function(patch, text) {\n  if (text.length == 0) {\n    return;\n  }\n  if (patch.start2 === null) {\n    throw Error('patch not initialized');\n  }\n  var pattern = text.substring(patch.start2, patch.start2 + patch.length1);\n  var padding = 0;\n\n  // Look for the first and last matches of pattern in text.  If two different\n  // matches are found, increase the pattern length.\n  while (text.indexOf(pattern) != text.lastIndexOf(pattern) &&\n         pattern.length < this.Match_MaxBits - this.Patch_Margin -\n         this.Patch_Margin) {\n    padding += this.Patch_Margin;\n    pattern = text.substring(patch.start2 - padding,\n                             patch.start2 + patch.length1 + padding);\n  }\n  // Add one chunk for good luck.\n  padding += this.Patch_Margin;\n\n  // Add the prefix.\n  var prefix = text.substring(patch.start2 - padding, patch.start2);\n  if (prefix) {\n    patch.diffs.unshift(new diff_match_patch.Diff(DIFF_EQUAL, prefix));\n  }\n  // Add the suffix.\n  var suffix = text.substring(patch.start2 + patch.length1,\n                              patch.start2 + patch.length1 + padding);\n  if (suffix) {\n    patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, suffix));\n  }\n\n  // Roll back the start points.\n  patch.start1 -= prefix.length;\n  patch.start2 -= prefix.length;\n  // Extend the lengths.\n  patch.length1 += prefix.length + suffix.length;\n  patch.length2 += prefix.length + suffix.length;\n};\n\n\n/**\n * Compute a list of patches to turn text1 into text2.\n * Use diffs if provided, otherwise compute it ourselves.\n * There are four ways to call this function, depending on what data is\n * available to the caller:\n * Method 1:\n * a = text1, b = text2\n * Method 2:\n * a = diffs\n * Method 3 (optimal):\n * a = text1, b = diffs\n * Method 4 (deprecated, use method 3):\n * a = text1, b = text2, c = diffs\n *\n * @param {string|!Array.<!diff_match_patch.Diff>} a text1 (methods 1,3,4) or\n * Array of diff tuples for text1 to text2 (method 2).\n * @param {string|!Array.<!diff_match_patch.Diff>=} opt_b text2 (methods 1,4) or\n * Array of diff tuples for text1 to text2 (method 3) or undefined (method 2).\n * @param {string|!Array.<!diff_match_patch.Diff>=} opt_c Array of diff tuples\n * for text1 to text2 (method 4) or undefined (methods 1,2,3).\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n */\ndiff_match_patch.prototype.patch_make = function(a, opt_b, opt_c) {\n  var text1, diffs;\n  if (typeof a == 'string' && typeof opt_b == 'string' &&\n      typeof opt_c == 'undefined') {\n    // Method 1: text1, text2\n    // Compute diffs from text1 and text2.\n    text1 = /** @type {string} */(a);\n    diffs = this.diff_main(text1, /** @type {string} */(opt_b), true);\n    if (diffs.length > 2) {\n      this.diff_cleanupSemantic(diffs);\n      this.diff_cleanupEfficiency(diffs);\n    }\n  } else if (a && typeof a == 'object' && typeof opt_b == 'undefined' &&\n      typeof opt_c == 'undefined') {\n    // Method 2: diffs\n    // Compute text1 from diffs.\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(a);\n    text1 = this.diff_text1(diffs);\n  } else if (typeof a == 'string' && opt_b && typeof opt_b == 'object' &&\n      typeof opt_c == 'undefined') {\n    // Method 3: text1, diffs\n    text1 = /** @type {string} */(a);\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(opt_b);\n  } else if (typeof a == 'string' && typeof opt_b == 'string' &&\n      opt_c && typeof opt_c == 'object') {\n    // Method 4: text1, text2, diffs\n    // text2 is not used.\n    text1 = /** @type {string} */(a);\n    diffs = /** @type {!Array.<!diff_match_patch.Diff>} */(opt_c);\n  } else {\n    throw new Error('Unknown call format to patch_make.');\n  }\n\n  if (diffs.length === 0) {\n    return [];  // Get rid of the null case.\n  }\n  var patches = [];\n  var patch = new diff_match_patch.patch_obj();\n  var patchDiffLength = 0;  // Keeping our own length var is faster in JS.\n  var char_count1 = 0;  // Number of characters into the text1 string.\n  var char_count2 = 0;  // Number of characters into the text2 string.\n  // Start with text1 (prepatch_text) and apply the diffs until we arrive at\n  // text2 (postpatch_text).  We recreate the patches one by one to determine\n  // context info.\n  var prepatch_text = text1;\n  var postpatch_text = text1;\n  for (var x = 0; x < diffs.length; x++) {\n    var diff_type = diffs[x][0];\n    var diff_text = diffs[x][1];\n\n    if (!patchDiffLength && diff_type !== DIFF_EQUAL) {\n      // A new patch starts here.\n      patch.start1 = char_count1;\n      patch.start2 = char_count2;\n    }\n\n    switch (diff_type) {\n      case DIFF_INSERT:\n        patch.diffs[patchDiffLength++] = diffs[x];\n        patch.length2 += diff_text.length;\n        postpatch_text = postpatch_text.substring(0, char_count2) + diff_text +\n                         postpatch_text.substring(char_count2);\n        break;\n      case DIFF_DELETE:\n        patch.length1 += diff_text.length;\n        patch.diffs[patchDiffLength++] = diffs[x];\n        postpatch_text = postpatch_text.substring(0, char_count2) +\n                         postpatch_text.substring(char_count2 +\n                             diff_text.length);\n        break;\n      case DIFF_EQUAL:\n        if (diff_text.length <= 2 * this.Patch_Margin &&\n            patchDiffLength && diffs.length != x + 1) {\n          // Small equality inside a patch.\n          patch.diffs[patchDiffLength++] = diffs[x];\n          patch.length1 += diff_text.length;\n          patch.length2 += diff_text.length;\n        } else if (diff_text.length >= 2 * this.Patch_Margin) {\n          // Time for a new patch.\n          if (patchDiffLength) {\n            this.patch_addContext_(patch, prepatch_text);\n            patches.push(patch);\n            patch = new diff_match_patch.patch_obj();\n            patchDiffLength = 0;\n            // Unlike Unidiff, our patch lists have a rolling context.\n            // https://github.com/google/diff-match-patch/wiki/Unidiff\n            // Update prepatch text & pos to reflect the application of the\n            // just completed patch.\n            prepatch_text = postpatch_text;\n            char_count1 = char_count2;\n          }\n        }\n        break;\n    }\n\n    // Update the current character count.\n    if (diff_type !== DIFF_INSERT) {\n      char_count1 += diff_text.length;\n    }\n    if (diff_type !== DIFF_DELETE) {\n      char_count2 += diff_text.length;\n    }\n  }\n  // Pick up the leftover patch if not empty.\n  if (patchDiffLength) {\n    this.patch_addContext_(patch, prepatch_text);\n    patches.push(patch);\n  }\n\n  return patches;\n};\n\n\n/**\n * Given an array of patches, return another array that is identical.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n */\ndiff_match_patch.prototype.patch_deepCopy = function(patches) {\n  // Making deep copies is hard in JavaScript.\n  var patchesCopy = [];\n  for (var x = 0; x < patches.length; x++) {\n    var patch = patches[x];\n    var patchCopy = new diff_match_patch.patch_obj();\n    patchCopy.diffs = [];\n    for (var y = 0; y < patch.diffs.length; y++) {\n      patchCopy.diffs[y] =\n          new diff_match_patch.Diff(patch.diffs[y][0], patch.diffs[y][1]);\n    }\n    patchCopy.start1 = patch.start1;\n    patchCopy.start2 = patch.start2;\n    patchCopy.length1 = patch.length1;\n    patchCopy.length2 = patch.length2;\n    patchesCopy[x] = patchCopy;\n  }\n  return patchesCopy;\n};\n\n\n/**\n * Merge a set of patches onto the text.  Return a patched text, as well\n * as a list of true/false values indicating which patches were applied.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @param {string} text Old text.\n * @return {!Array.<string|!Array.<boolean>>} Two element Array, containing the\n *      new text and an array of boolean values.\n */\ndiff_match_patch.prototype.patch_apply = function(patches, text) {\n  if (patches.length == 0) {\n    return [text, []];\n  }\n\n  // Deep copy the patches so that no changes are made to originals.\n  patches = this.patch_deepCopy(patches);\n\n  var nullPadding = this.patch_addPadding(patches);\n  text = nullPadding + text + nullPadding;\n\n  this.patch_splitMax(patches);\n  // delta keeps track of the offset between the expected and actual location\n  // of the previous patch.  If there are patches expected at positions 10 and\n  // 20, but the first patch was found at 12, delta is 2 and the second patch\n  // has an effective expected position of 22.\n  var delta = 0;\n  var results = [];\n  for (var x = 0; x < patches.length; x++) {\n    var expected_loc = patches[x].start2 + delta;\n    var text1 = this.diff_text1(patches[x].diffs);\n    var start_loc;\n    var end_loc = -1;\n    if (text1.length > this.Match_MaxBits) {\n      // patch_splitMax will only provide an oversized pattern in the case of\n      // a monster delete.\n      start_loc = this.match_main(text, text1.substring(0, this.Match_MaxBits),\n                                  expected_loc);\n      if (start_loc != -1) {\n        end_loc = this.match_main(text,\n            text1.substring(text1.length - this.Match_MaxBits),\n            expected_loc + text1.length - this.Match_MaxBits);\n        if (end_loc == -1 || start_loc >= end_loc) {\n          // Can't find valid trailing context.  Drop this patch.\n          start_loc = -1;\n        }\n      }\n    } else {\n      start_loc = this.match_main(text, text1, expected_loc);\n    }\n    if (start_loc == -1) {\n      // No match found.  :(\n      results[x] = false;\n      // Subtract the delta for this failed patch from subsequent patches.\n      delta -= patches[x].length2 - patches[x].length1;\n    } else {\n      // Found a match.  :)\n      results[x] = true;\n      delta = start_loc - expected_loc;\n      var text2;\n      if (end_loc == -1) {\n        text2 = text.substring(start_loc, start_loc + text1.length);\n      } else {\n        text2 = text.substring(start_loc, end_loc + this.Match_MaxBits);\n      }\n      if (text1 == text2) {\n        // Perfect match, just shove the replacement text in.\n        text = text.substring(0, start_loc) +\n               this.diff_text2(patches[x].diffs) +\n               text.substring(start_loc + text1.length);\n      } else {\n        // Imperfect match.  Run a diff to get a framework of equivalent\n        // indices.\n        var diffs = this.diff_main(text1, text2, false);\n        if (text1.length > this.Match_MaxBits &&\n            this.diff_levenshtein(diffs) / text1.length >\n            this.Patch_DeleteThreshold) {\n          // The end points match, but the content is unacceptably bad.\n          results[x] = false;\n        } else {\n          this.diff_cleanupSemanticLossless(diffs);\n          var index1 = 0;\n          var index2;\n          for (var y = 0; y < patches[x].diffs.length; y++) {\n            var mod = patches[x].diffs[y];\n            if (mod[0] !== DIFF_EQUAL) {\n              index2 = this.diff_xIndex(diffs, index1);\n            }\n            if (mod[0] === DIFF_INSERT) {  // Insertion\n              text = text.substring(0, start_loc + index2) + mod[1] +\n                     text.substring(start_loc + index2);\n            } else if (mod[0] === DIFF_DELETE) {  // Deletion\n              text = text.substring(0, start_loc + index2) +\n                     text.substring(start_loc + this.diff_xIndex(diffs,\n                         index1 + mod[1].length));\n            }\n            if (mod[0] !== DIFF_DELETE) {\n              index1 += mod[1].length;\n            }\n          }\n        }\n      }\n    }\n  }\n  // Strip the padding off.\n  text = text.substring(nullPadding.length, text.length - nullPadding.length);\n  return [text, results];\n};\n\n\n/**\n * Add some padding on text start and end so that edges can match something.\n * Intended to be called only from within patch_apply.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @return {string} The padding string added to each side.\n */\ndiff_match_patch.prototype.patch_addPadding = function(patches) {\n  var paddingLength = this.Patch_Margin;\n  var nullPadding = '';\n  for (var x = 1; x <= paddingLength; x++) {\n    nullPadding += String.fromCharCode(x);\n  }\n\n  // Bump all the patches forward.\n  for (var x = 0; x < patches.length; x++) {\n    patches[x].start1 += paddingLength;\n    patches[x].start2 += paddingLength;\n  }\n\n  // Add some padding on start of first diff.\n  var patch = patches[0];\n  var diffs = patch.diffs;\n  if (diffs.length == 0 || diffs[0][0] != DIFF_EQUAL) {\n    // Add nullPadding equality.\n    diffs.unshift(new diff_match_patch.Diff(DIFF_EQUAL, nullPadding));\n    patch.start1 -= paddingLength;  // Should be 0.\n    patch.start2 -= paddingLength;  // Should be 0.\n    patch.length1 += paddingLength;\n    patch.length2 += paddingLength;\n  } else if (paddingLength > diffs[0][1].length) {\n    // Grow first equality.\n    var extraLength = paddingLength - diffs[0][1].length;\n    diffs[0][1] = nullPadding.substring(diffs[0][1].length) + diffs[0][1];\n    patch.start1 -= extraLength;\n    patch.start2 -= extraLength;\n    patch.length1 += extraLength;\n    patch.length2 += extraLength;\n  }\n\n  // Add some padding on end of last diff.\n  patch = patches[patches.length - 1];\n  diffs = patch.diffs;\n  if (diffs.length == 0 || diffs[diffs.length - 1][0] != DIFF_EQUAL) {\n    // Add nullPadding equality.\n    diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, nullPadding));\n    patch.length1 += paddingLength;\n    patch.length2 += paddingLength;\n  } else if (paddingLength > diffs[diffs.length - 1][1].length) {\n    // Grow last equality.\n    var extraLength = paddingLength - diffs[diffs.length - 1][1].length;\n    diffs[diffs.length - 1][1] += nullPadding.substring(0, extraLength);\n    patch.length1 += extraLength;\n    patch.length2 += extraLength;\n  }\n\n  return nullPadding;\n};\n\n\n/**\n * Look through the patches and break up any which are longer than the maximum\n * limit of the match algorithm.\n * Intended to be called only from within patch_apply.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n */\ndiff_match_patch.prototype.patch_splitMax = function(patches) {\n  var patch_size = this.Match_MaxBits;\n  for (var x = 0; x < patches.length; x++) {\n    if (patches[x].length1 <= patch_size) {\n      continue;\n    }\n    var bigpatch = patches[x];\n    // Remove the big old patch.\n    patches.splice(x--, 1);\n    var start1 = bigpatch.start1;\n    var start2 = bigpatch.start2;\n    var precontext = '';\n    while (bigpatch.diffs.length !== 0) {\n      // Create one of several smaller patches.\n      var patch = new diff_match_patch.patch_obj();\n      var empty = true;\n      patch.start1 = start1 - precontext.length;\n      patch.start2 = start2 - precontext.length;\n      if (precontext !== '') {\n        patch.length1 = patch.length2 = precontext.length;\n        patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, precontext));\n      }\n      while (bigpatch.diffs.length !== 0 &&\n             patch.length1 < patch_size - this.Patch_Margin) {\n        var diff_type = bigpatch.diffs[0][0];\n        var diff_text = bigpatch.diffs[0][1];\n        if (diff_type === DIFF_INSERT) {\n          // Insertions are harmless.\n          patch.length2 += diff_text.length;\n          start2 += diff_text.length;\n          patch.diffs.push(bigpatch.diffs.shift());\n          empty = false;\n        } else if (diff_type === DIFF_DELETE && patch.diffs.length == 1 &&\n                   patch.diffs[0][0] == DIFF_EQUAL &&\n                   diff_text.length > 2 * patch_size) {\n          // This is a large deletion.  Let it pass in one chunk.\n          patch.length1 += diff_text.length;\n          start1 += diff_text.length;\n          empty = false;\n          patch.diffs.push(new diff_match_patch.Diff(diff_type, diff_text));\n          bigpatch.diffs.shift();\n        } else {\n          // Deletion or equality.  Only take as much as we can stomach.\n          diff_text = diff_text.substring(0,\n              patch_size - patch.length1 - this.Patch_Margin);\n          patch.length1 += diff_text.length;\n          start1 += diff_text.length;\n          if (diff_type === DIFF_EQUAL) {\n            patch.length2 += diff_text.length;\n            start2 += diff_text.length;\n          } else {\n            empty = false;\n          }\n          patch.diffs.push(new diff_match_patch.Diff(diff_type, diff_text));\n          if (diff_text == bigpatch.diffs[0][1]) {\n            bigpatch.diffs.shift();\n          } else {\n            bigpatch.diffs[0][1] =\n                bigpatch.diffs[0][1].substring(diff_text.length);\n          }\n        }\n      }\n      // Compute the head context for the next patch.\n      precontext = this.diff_text2(patch.diffs);\n      precontext =\n          precontext.substring(precontext.length - this.Patch_Margin);\n      // Append the end context for this patch.\n      var postcontext = this.diff_text1(bigpatch.diffs)\n                            .substring(0, this.Patch_Margin);\n      if (postcontext !== '') {\n        patch.length1 += postcontext.length;\n        patch.length2 += postcontext.length;\n        if (patch.diffs.length !== 0 &&\n            patch.diffs[patch.diffs.length - 1][0] === DIFF_EQUAL) {\n          patch.diffs[patch.diffs.length - 1][1] += postcontext;\n        } else {\n          patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, postcontext));\n        }\n      }\n      if (!empty) {\n        patches.splice(++x, 0, patch);\n      }\n    }\n  }\n};\n\n\n/**\n * Take a list of patches and return a textual representation.\n * @param {!Array.<!diff_match_patch.patch_obj>} patches Array of Patch objects.\n * @return {string} Text representation of patches.\n */\ndiff_match_patch.prototype.patch_toText = function(patches) {\n  var text = [];\n  for (var x = 0; x < patches.length; x++) {\n    text[x] = patches[x];\n  }\n  return text.join('');\n};\n\n\n/**\n * Parse a textual representation of patches and return a list of Patch objects.\n * @param {string} textline Text representation of patches.\n * @return {!Array.<!diff_match_patch.patch_obj>} Array of Patch objects.\n * @throws {!Error} If invalid input.\n */\ndiff_match_patch.prototype.patch_fromText = function(textline) {\n  var patches = [];\n  if (!textline) {\n    return patches;\n  }\n  var text = textline.split('\\n');\n  var textPointer = 0;\n  var patchHeader = /^@@ -(\\d+),?(\\d*) \\+(\\d+),?(\\d*) @@$/;\n  while (textPointer < text.length) {\n    var m = text[textPointer].match(patchHeader);\n    if (!m) {\n      throw new Error('Invalid patch string: ' + text[textPointer]);\n    }\n    var patch = new diff_match_patch.patch_obj();\n    patches.push(patch);\n    patch.start1 = parseInt(m[1], 10);\n    if (m[2] === '') {\n      patch.start1--;\n      patch.length1 = 1;\n    } else if (m[2] == '0') {\n      patch.length1 = 0;\n    } else {\n      patch.start1--;\n      patch.length1 = parseInt(m[2], 10);\n    }\n\n    patch.start2 = parseInt(m[3], 10);\n    if (m[4] === '') {\n      patch.start2--;\n      patch.length2 = 1;\n    } else if (m[4] == '0') {\n      patch.length2 = 0;\n    } else {\n      patch.start2--;\n      patch.length2 = parseInt(m[4], 10);\n    }\n    textPointer++;\n\n    while (textPointer < text.length) {\n      var sign = text[textPointer].charAt(0);\n      try {\n        var line = decodeURI(text[textPointer].substring(1));\n      } catch (ex) {\n        // Malformed URI sequence.\n        throw new Error('Illegal escape in patch_fromText: ' + line);\n      }\n      if (sign == '-') {\n        // Deletion.\n        patch.diffs.push(new diff_match_patch.Diff(DIFF_DELETE, line));\n      } else if (sign == '+') {\n        // Insertion.\n        patch.diffs.push(new diff_match_patch.Diff(DIFF_INSERT, line));\n      } else if (sign == ' ') {\n        // Minor equality.\n        patch.diffs.push(new diff_match_patch.Diff(DIFF_EQUAL, line));\n      } else if (sign == '@') {\n        // Start of next patch.\n        break;\n      } else if (sign === '') {\n        // Blank line?  Whatever.\n      } else {\n        // WTF?\n        throw new Error('Invalid patch mode \"' + sign + '\" in: ' + line);\n      }\n      textPointer++;\n    }\n  }\n  return patches;\n};\n\n\n/**\n * Class representing one patch operation.\n * @constructor\n */\ndiff_match_patch.patch_obj = function() {\n  /** @type {!Array.<!diff_match_patch.Diff>} */\n  this.diffs = [];\n  /** @type {?number} */\n  this.start1 = null;\n  /** @type {?number} */\n  this.start2 = null;\n  /** @type {number} */\n  this.length1 = 0;\n  /** @type {number} */\n  this.length2 = 0;\n};\n\n\n/**\n * Emulate GNU diff's format.\n * Header: @@ -382,8 +481,9 @@\n * Indices are printed as 1-based, not 0-based.\n * @return {string} The GNU diff string.\n */\ndiff_match_patch.patch_obj.prototype.toString = function() {\n  var coords1, coords2;\n  if (this.length1 === 0) {\n    coords1 = this.start1 + ',0';\n  } else if (this.length1 == 1) {\n    coords1 = this.start1 + 1;\n  } else {\n    coords1 = (this.start1 + 1) + ',' + this.length1;\n  }\n  if (this.length2 === 0) {\n    coords2 = this.start2 + ',0';\n  } else if (this.length2 == 1) {\n    coords2 = this.start2 + 1;\n  } else {\n    coords2 = (this.start2 + 1) + ',' + this.length2;\n  }\n  var text = ['@@ -' + coords1 + ' +' + coords2 + ' @@\\n'];\n  var op;\n  // Escape the body of the patch with %xx notation.\n  for (var x = 0; x < this.diffs.length; x++) {\n    switch (this.diffs[x][0]) {\n      case DIFF_INSERT:\n        op = '+';\n        break;\n      case DIFF_DELETE:\n        op = '-';\n        break;\n      case DIFF_EQUAL:\n        op = ' ';\n        break;\n    }\n    text[x + 1] = op + encodeURI(this.diffs[x][1]) + '\\n';\n  }\n  return text.join('').replace(/%20/g, ' ');\n};\n\n\n// The following export code was added by @ForbesLindesay\nmodule.exports = diff_match_patch;\nmodule.exports['diff_match_patch'] = diff_match_patch;\nmodule.exports['DIFF_DELETE'] = DIFF_DELETE;\nmodule.exports['DIFF_INSERT'] = DIFF_INSERT;\nmodule.exports['DIFF_EQUAL'] = DIFF_EQUAL;", "'use strict'\r\n\r\nmodule.exports = {\r\n\t\"aliceblue\": [240, 248, 255],\r\n\t\"antiquewhite\": [250, 235, 215],\r\n\t\"aqua\": [0, 255, 255],\r\n\t\"aquamarine\": [127, 255, 212],\r\n\t\"azure\": [240, 255, 255],\r\n\t\"beige\": [245, 245, 220],\r\n\t\"bisque\": [255, 228, 196],\r\n\t\"black\": [0, 0, 0],\r\n\t\"blanchedalmond\": [255, 235, 205],\r\n\t\"blue\": [0, 0, 255],\r\n\t\"blueviolet\": [138, 43, 226],\r\n\t\"brown\": [165, 42, 42],\r\n\t\"burlywood\": [222, 184, 135],\r\n\t\"cadetblue\": [95, 158, 160],\r\n\t\"chartreuse\": [127, 255, 0],\r\n\t\"chocolate\": [210, 105, 30],\r\n\t\"coral\": [255, 127, 80],\r\n\t\"cornflowerblue\": [100, 149, 237],\r\n\t\"cornsilk\": [255, 248, 220],\r\n\t\"crimson\": [220, 20, 60],\r\n\t\"cyan\": [0, 255, 255],\r\n\t\"darkblue\": [0, 0, 139],\r\n\t\"darkcyan\": [0, 139, 139],\r\n\t\"darkgoldenrod\": [184, 134, 11],\r\n\t\"darkgray\": [169, 169, 169],\r\n\t\"darkgreen\": [0, 100, 0],\r\n\t\"darkgrey\": [169, 169, 169],\r\n\t\"darkkhaki\": [189, 183, 107],\r\n\t\"darkmagenta\": [139, 0, 139],\r\n\t\"darkolivegreen\": [85, 107, 47],\r\n\t\"darkorange\": [255, 140, 0],\r\n\t\"darkorchid\": [153, 50, 204],\r\n\t\"darkred\": [139, 0, 0],\r\n\t\"darksalmon\": [233, 150, 122],\r\n\t\"darkseagreen\": [143, 188, 143],\r\n\t\"darkslateblue\": [72, 61, 139],\r\n\t\"darkslategray\": [47, 79, 79],\r\n\t\"darkslategrey\": [47, 79, 79],\r\n\t\"darkturquoise\": [0, 206, 209],\r\n\t\"darkviolet\": [148, 0, 211],\r\n\t\"deeppink\": [255, 20, 147],\r\n\t\"deepskyblue\": [0, 191, 255],\r\n\t\"dimgray\": [105, 105, 105],\r\n\t\"dimgrey\": [105, 105, 105],\r\n\t\"dodgerblue\": [30, 144, 255],\r\n\t\"firebrick\": [178, 34, 34],\r\n\t\"floralwhite\": [255, 250, 240],\r\n\t\"forestgreen\": [34, 139, 34],\r\n\t\"fuchsia\": [255, 0, 255],\r\n\t\"gainsboro\": [220, 220, 220],\r\n\t\"ghostwhite\": [248, 248, 255],\r\n\t\"gold\": [255, 215, 0],\r\n\t\"goldenrod\": [218, 165, 32],\r\n\t\"gray\": [128, 128, 128],\r\n\t\"green\": [0, 128, 0],\r\n\t\"greenyellow\": [173, 255, 47],\r\n\t\"grey\": [128, 128, 128],\r\n\t\"honeydew\": [240, 255, 240],\r\n\t\"hotpink\": [255, 105, 180],\r\n\t\"indianred\": [205, 92, 92],\r\n\t\"indigo\": [75, 0, 130],\r\n\t\"ivory\": [255, 255, 240],\r\n\t\"khaki\": [240, 230, 140],\r\n\t\"lavender\": [230, 230, 250],\r\n\t\"lavenderblush\": [255, 240, 245],\r\n\t\"lawngreen\": [124, 252, 0],\r\n\t\"lemonchiffon\": [255, 250, 205],\r\n\t\"lightblue\": [173, 216, 230],\r\n\t\"lightcoral\": [240, 128, 128],\r\n\t\"lightcyan\": [224, 255, 255],\r\n\t\"lightgoldenrodyellow\": [250, 250, 210],\r\n\t\"lightgray\": [211, 211, 211],\r\n\t\"lightgreen\": [144, 238, 144],\r\n\t\"lightgrey\": [211, 211, 211],\r\n\t\"lightpink\": [255, 182, 193],\r\n\t\"lightsalmon\": [255, 160, 122],\r\n\t\"lightseagreen\": [32, 178, 170],\r\n\t\"lightskyblue\": [135, 206, 250],\r\n\t\"lightslategray\": [119, 136, 153],\r\n\t\"lightslategrey\": [119, 136, 153],\r\n\t\"lightsteelblue\": [176, 196, 222],\r\n\t\"lightyellow\": [255, 255, 224],\r\n\t\"lime\": [0, 255, 0],\r\n\t\"limegreen\": [50, 205, 50],\r\n\t\"linen\": [250, 240, 230],\r\n\t\"magenta\": [255, 0, 255],\r\n\t\"maroon\": [128, 0, 0],\r\n\t\"mediumaquamarine\": [102, 205, 170],\r\n\t\"mediumblue\": [0, 0, 205],\r\n\t\"mediumorchid\": [186, 85, 211],\r\n\t\"mediumpurple\": [147, 112, 219],\r\n\t\"mediumseagreen\": [60, 179, 113],\r\n\t\"mediumslateblue\": [123, 104, 238],\r\n\t\"mediumspringgreen\": [0, 250, 154],\r\n\t\"mediumturquoise\": [72, 209, 204],\r\n\t\"mediumvioletred\": [199, 21, 133],\r\n\t\"midnightblue\": [25, 25, 112],\r\n\t\"mintcream\": [245, 255, 250],\r\n\t\"mistyrose\": [255, 228, 225],\r\n\t\"moccasin\": [255, 228, 181],\r\n\t\"navajowhite\": [255, 222, 173],\r\n\t\"navy\": [0, 0, 128],\r\n\t\"oldlace\": [253, 245, 230],\r\n\t\"olive\": [128, 128, 0],\r\n\t\"olivedrab\": [107, 142, 35],\r\n\t\"orange\": [255, 165, 0],\r\n\t\"orangered\": [255, 69, 0],\r\n\t\"orchid\": [218, 112, 214],\r\n\t\"palegoldenrod\": [238, 232, 170],\r\n\t\"palegreen\": [152, 251, 152],\r\n\t\"paleturquoise\": [175, 238, 238],\r\n\t\"palevioletred\": [219, 112, 147],\r\n\t\"papayawhip\": [255, 239, 213],\r\n\t\"peachpuff\": [255, 218, 185],\r\n\t\"peru\": [205, 133, 63],\r\n\t\"pink\": [255, 192, 203],\r\n\t\"plum\": [221, 160, 221],\r\n\t\"powderblue\": [176, 224, 230],\r\n\t\"purple\": [128, 0, 128],\r\n\t\"rebeccapurple\": [102, 51, 153],\r\n\t\"red\": [255, 0, 0],\r\n\t\"rosybrown\": [188, 143, 143],\r\n\t\"royalblue\": [65, 105, 225],\r\n\t\"saddlebrown\": [139, 69, 19],\r\n\t\"salmon\": [250, 128, 114],\r\n\t\"sandybrown\": [244, 164, 96],\r\n\t\"seagreen\": [46, 139, 87],\r\n\t\"seashell\": [255, 245, 238],\r\n\t\"sienna\": [160, 82, 45],\r\n\t\"silver\": [192, 192, 192],\r\n\t\"skyblue\": [135, 206, 235],\r\n\t\"slateblue\": [106, 90, 205],\r\n\t\"slategray\": [112, 128, 144],\r\n\t\"slategrey\": [112, 128, 144],\r\n\t\"snow\": [255, 250, 250],\r\n\t\"springgreen\": [0, 255, 127],\r\n\t\"steelblue\": [70, 130, 180],\r\n\t\"tan\": [210, 180, 140],\r\n\t\"teal\": [0, 128, 128],\r\n\t\"thistle\": [216, 191, 216],\r\n\t\"tomato\": [255, 99, 71],\r\n\t\"turquoise\": [64, 224, 208],\r\n\t\"violet\": [238, 130, 238],\r\n\t\"wheat\": [245, 222, 179],\r\n\t\"white\": [255, 255, 255],\r\n\t\"whitesmoke\": [245, 245, 245],\r\n\t\"yellow\": [255, 255, 0],\r\n\t\"yellowgreen\": [154, 205, 50]\r\n};\r\n", "/* MIT license */\n/* eslint-disable no-mixed-operators */\nconst cssKeywords = require('color-name');\n\n// NOTE: conversions should only return primitive values (i.e. arrays, or\n//       values that give correct `typeof` results).\n//       do not use box values types (i.e. Number(), String(), etc.)\n\nconst reverseKeywords = {};\nfor (const key of Object.keys(cssKeywords)) {\n\treverseKeywords[cssKeywords[key]] = key;\n}\n\nconst convert = {\n\trgb: {channels: 3, labels: 'rgb'},\n\thsl: {channels: 3, labels: 'hsl'},\n\thsv: {channels: 3, labels: 'hsv'},\n\thwb: {channels: 3, labels: 'hwb'},\n\tcmyk: {channels: 4, labels: 'cmyk'},\n\txyz: {channels: 3, labels: 'xyz'},\n\tlab: {channels: 3, labels: 'lab'},\n\tlch: {channels: 3, labels: 'lch'},\n\thex: {channels: 1, labels: ['hex']},\n\tkeyword: {channels: 1, labels: ['keyword']},\n\tansi16: {channels: 1, labels: ['ansi16']},\n\tansi256: {channels: 1, labels: ['ansi256']},\n\thcg: {channels: 3, labels: ['h', 'c', 'g']},\n\tapple: {channels: 3, labels: ['r16', 'g16', 'b16']},\n\tgray: {channels: 1, labels: ['gray']}\n};\n\nmodule.exports = convert;\n\n// Hide .channels and .labels properties\nfor (const model of Object.keys(convert)) {\n\tif (!('channels' in convert[model])) {\n\t\tthrow new Error('missing channels property: ' + model);\n\t}\n\n\tif (!('labels' in convert[model])) {\n\t\tthrow new Error('missing channel labels property: ' + model);\n\t}\n\n\tif (convert[model].labels.length !== convert[model].channels) {\n\t\tthrow new Error('channel and label counts mismatch: ' + model);\n\t}\n\n\tconst {channels, labels} = convert[model];\n\tdelete convert[model].channels;\n\tdelete convert[model].labels;\n\tObject.defineProperty(convert[model], 'channels', {value: channels});\n\tObject.defineProperty(convert[model], 'labels', {value: labels});\n}\n\nconvert.rgb.hsl = function (rgb) {\n\tconst r = rgb[0] / 255;\n\tconst g = rgb[1] / 255;\n\tconst b = rgb[2] / 255;\n\tconst min = Math.min(r, g, b);\n\tconst max = Math.max(r, g, b);\n\tconst delta = max - min;\n\tlet h;\n\tlet s;\n\n\tif (max === min) {\n\t\th = 0;\n\t} else if (r === max) {\n\t\th = (g - b) / delta;\n\t} else if (g === max) {\n\t\th = 2 + (b - r) / delta;\n\t} else if (b === max) {\n\t\th = 4 + (r - g) / delta;\n\t}\n\n\th = Math.min(h * 60, 360);\n\n\tif (h < 0) {\n\t\th += 360;\n\t}\n\n\tconst l = (min + max) / 2;\n\n\tif (max === min) {\n\t\ts = 0;\n\t} else if (l <= 0.5) {\n\t\ts = delta / (max + min);\n\t} else {\n\t\ts = delta / (2 - max - min);\n\t}\n\n\treturn [h, s * 100, l * 100];\n};\n\nconvert.rgb.hsv = function (rgb) {\n\tlet rdif;\n\tlet gdif;\n\tlet bdif;\n\tlet h;\n\tlet s;\n\n\tconst r = rgb[0] / 255;\n\tconst g = rgb[1] / 255;\n\tconst b = rgb[2] / 255;\n\tconst v = Math.max(r, g, b);\n\tconst diff = v - Math.min(r, g, b);\n\tconst diffc = function (c) {\n\t\treturn (v - c) / 6 / diff + 1 / 2;\n\t};\n\n\tif (diff === 0) {\n\t\th = 0;\n\t\ts = 0;\n\t} else {\n\t\ts = diff / v;\n\t\trdif = diffc(r);\n\t\tgdif = diffc(g);\n\t\tbdif = diffc(b);\n\n\t\tif (r === v) {\n\t\t\th = bdif - gdif;\n\t\t} else if (g === v) {\n\t\t\th = (1 / 3) + rdif - bdif;\n\t\t} else if (b === v) {\n\t\t\th = (2 / 3) + gdif - rdif;\n\t\t}\n\n\t\tif (h < 0) {\n\t\t\th += 1;\n\t\t} else if (h > 1) {\n\t\t\th -= 1;\n\t\t}\n\t}\n\n\treturn [\n\t\th * 360,\n\t\ts * 100,\n\t\tv * 100\n\t];\n};\n\nconvert.rgb.hwb = function (rgb) {\n\tconst r = rgb[0];\n\tconst g = rgb[1];\n\tlet b = rgb[2];\n\tconst h = convert.rgb.hsl(rgb)[0];\n\tconst w = 1 / 255 * Math.min(r, Math.min(g, b));\n\n\tb = 1 - 1 / 255 * Math.max(r, Math.max(g, b));\n\n\treturn [h, w * 100, b * 100];\n};\n\nconvert.rgb.cmyk = function (rgb) {\n\tconst r = rgb[0] / 255;\n\tconst g = rgb[1] / 255;\n\tconst b = rgb[2] / 255;\n\n\tconst k = Math.min(1 - r, 1 - g, 1 - b);\n\tconst c = (1 - r - k) / (1 - k) || 0;\n\tconst m = (1 - g - k) / (1 - k) || 0;\n\tconst y = (1 - b - k) / (1 - k) || 0;\n\n\treturn [c * 100, m * 100, y * 100, k * 100];\n};\n\nfunction comparativeDistance(x, y) {\n\t/*\n\t\tSee https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance\n\t*/\n\treturn (\n\t\t((x[0] - y[0]) ** 2) +\n\t\t((x[1] - y[1]) ** 2) +\n\t\t((x[2] - y[2]) ** 2)\n\t);\n}\n\nconvert.rgb.keyword = function (rgb) {\n\tconst reversed = reverseKeywords[rgb];\n\tif (reversed) {\n\t\treturn reversed;\n\t}\n\n\tlet currentClosestDistance = Infinity;\n\tlet currentClosestKeyword;\n\n\tfor (const keyword of Object.keys(cssKeywords)) {\n\t\tconst value = cssKeywords[keyword];\n\n\t\t// Compute comparative distance\n\t\tconst distance = comparativeDistance(rgb, value);\n\n\t\t// Check if its less, if so set as closest\n\t\tif (distance < currentClosestDistance) {\n\t\t\tcurrentClosestDistance = distance;\n\t\t\tcurrentClosestKeyword = keyword;\n\t\t}\n\t}\n\n\treturn currentClosestKeyword;\n};\n\nconvert.keyword.rgb = function (keyword) {\n\treturn cssKeywords[keyword];\n};\n\nconvert.rgb.xyz = function (rgb) {\n\tlet r = rgb[0] / 255;\n\tlet g = rgb[1] / 255;\n\tlet b = rgb[2] / 255;\n\n\t// Assume sRGB\n\tr = r > 0.04045 ? (((r + 0.055) / 1.055) ** 2.4) : (r / 12.92);\n\tg = g > 0.04045 ? (((g + 0.055) / 1.055) ** 2.4) : (g / 12.92);\n\tb = b > 0.04045 ? (((b + 0.055) / 1.055) ** 2.4) : (b / 12.92);\n\n\tconst x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);\n\tconst y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);\n\tconst z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);\n\n\treturn [x * 100, y * 100, z * 100];\n};\n\nconvert.rgb.lab = function (rgb) {\n\tconst xyz = convert.rgb.xyz(rgb);\n\tlet x = xyz[0];\n\tlet y = xyz[1];\n\tlet z = xyz[2];\n\n\tx /= 95.047;\n\ty /= 100;\n\tz /= 108.883;\n\n\tx = x > 0.008856 ? (x ** (1 / 3)) : (7.787 * x) + (16 / 116);\n\ty = y > 0.008856 ? (y ** (1 / 3)) : (7.787 * y) + (16 / 116);\n\tz = z > 0.008856 ? (z ** (1 / 3)) : (7.787 * z) + (16 / 116);\n\n\tconst l = (116 * y) - 16;\n\tconst a = 500 * (x - y);\n\tconst b = 200 * (y - z);\n\n\treturn [l, a, b];\n};\n\nconvert.hsl.rgb = function (hsl) {\n\tconst h = hsl[0] / 360;\n\tconst s = hsl[1] / 100;\n\tconst l = hsl[2] / 100;\n\tlet t2;\n\tlet t3;\n\tlet val;\n\n\tif (s === 0) {\n\t\tval = l * 255;\n\t\treturn [val, val, val];\n\t}\n\n\tif (l < 0.5) {\n\t\tt2 = l * (1 + s);\n\t} else {\n\t\tt2 = l + s - l * s;\n\t}\n\n\tconst t1 = 2 * l - t2;\n\n\tconst rgb = [0, 0, 0];\n\tfor (let i = 0; i < 3; i++) {\n\t\tt3 = h + 1 / 3 * -(i - 1);\n\t\tif (t3 < 0) {\n\t\t\tt3++;\n\t\t}\n\n\t\tif (t3 > 1) {\n\t\t\tt3--;\n\t\t}\n\n\t\tif (6 * t3 < 1) {\n\t\t\tval = t1 + (t2 - t1) * 6 * t3;\n\t\t} else if (2 * t3 < 1) {\n\t\t\tval = t2;\n\t\t} else if (3 * t3 < 2) {\n\t\t\tval = t1 + (t2 - t1) * (2 / 3 - t3) * 6;\n\t\t} else {\n\t\t\tval = t1;\n\t\t}\n\n\t\trgb[i] = val * 255;\n\t}\n\n\treturn rgb;\n};\n\nconvert.hsl.hsv = function (hsl) {\n\tconst h = hsl[0];\n\tlet s = hsl[1] / 100;\n\tlet l = hsl[2] / 100;\n\tlet smin = s;\n\tconst lmin = Math.max(l, 0.01);\n\n\tl *= 2;\n\ts *= (l <= 1) ? l : 2 - l;\n\tsmin *= lmin <= 1 ? lmin : 2 - lmin;\n\tconst v = (l + s) / 2;\n\tconst sv = l === 0 ? (2 * smin) / (lmin + smin) : (2 * s) / (l + s);\n\n\treturn [h, sv * 100, v * 100];\n};\n\nconvert.hsv.rgb = function (hsv) {\n\tconst h = hsv[0] / 60;\n\tconst s = hsv[1] / 100;\n\tlet v = hsv[2] / 100;\n\tconst hi = Math.floor(h) % 6;\n\n\tconst f = h - Math.floor(h);\n\tconst p = 255 * v * (1 - s);\n\tconst q = 255 * v * (1 - (s * f));\n\tconst t = 255 * v * (1 - (s * (1 - f)));\n\tv *= 255;\n\n\tswitch (hi) {\n\t\tcase 0:\n\t\t\treturn [v, t, p];\n\t\tcase 1:\n\t\t\treturn [q, v, p];\n\t\tcase 2:\n\t\t\treturn [p, v, t];\n\t\tcase 3:\n\t\t\treturn [p, q, v];\n\t\tcase 4:\n\t\t\treturn [t, p, v];\n\t\tcase 5:\n\t\t\treturn [v, p, q];\n\t}\n};\n\nconvert.hsv.hsl = function (hsv) {\n\tconst h = hsv[0];\n\tconst s = hsv[1] / 100;\n\tconst v = hsv[2] / 100;\n\tconst vmin = Math.max(v, 0.01);\n\tlet sl;\n\tlet l;\n\n\tl = (2 - s) * v;\n\tconst lmin = (2 - s) * vmin;\n\tsl = s * vmin;\n\tsl /= (lmin <= 1) ? lmin : 2 - lmin;\n\tsl = sl || 0;\n\tl /= 2;\n\n\treturn [h, sl * 100, l * 100];\n};\n\n// http://dev.w3.org/csswg/css-color/#hwb-to-rgb\nconvert.hwb.rgb = function (hwb) {\n\tconst h = hwb[0] / 360;\n\tlet wh = hwb[1] / 100;\n\tlet bl = hwb[2] / 100;\n\tconst ratio = wh + bl;\n\tlet f;\n\n\t// Wh + bl cant be > 1\n\tif (ratio > 1) {\n\t\twh /= ratio;\n\t\tbl /= ratio;\n\t}\n\n\tconst i = Math.floor(6 * h);\n\tconst v = 1 - bl;\n\tf = 6 * h - i;\n\n\tif ((i & 0x01) !== 0) {\n\t\tf = 1 - f;\n\t}\n\n\tconst n = wh + f * (v - wh); // Linear interpolation\n\n\tlet r;\n\tlet g;\n\tlet b;\n\t/* eslint-disable max-statements-per-line,no-multi-spaces */\n\tswitch (i) {\n\t\tdefault:\n\t\tcase 6:\n\t\tcase 0: r = v;  g = n;  b = wh; break;\n\t\tcase 1: r = n;  g = v;  b = wh; break;\n\t\tcase 2: r = wh; g = v;  b = n; break;\n\t\tcase 3: r = wh; g = n;  b = v; break;\n\t\tcase 4: r = n;  g = wh; b = v; break;\n\t\tcase 5: r = v;  g = wh; b = n; break;\n\t}\n\t/* eslint-enable max-statements-per-line,no-multi-spaces */\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.cmyk.rgb = function (cmyk) {\n\tconst c = cmyk[0] / 100;\n\tconst m = cmyk[1] / 100;\n\tconst y = cmyk[2] / 100;\n\tconst k = cmyk[3] / 100;\n\n\tconst r = 1 - Math.min(1, c * (1 - k) + k);\n\tconst g = 1 - Math.min(1, m * (1 - k) + k);\n\tconst b = 1 - Math.min(1, y * (1 - k) + k);\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.xyz.rgb = function (xyz) {\n\tconst x = xyz[0] / 100;\n\tconst y = xyz[1] / 100;\n\tconst z = xyz[2] / 100;\n\tlet r;\n\tlet g;\n\tlet b;\n\n\tr = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);\n\tg = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);\n\tb = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);\n\n\t// Assume sRGB\n\tr = r > 0.0031308\n\t\t? ((1.055 * (r ** (1.0 / 2.4))) - 0.055)\n\t\t: r * 12.92;\n\n\tg = g > 0.0031308\n\t\t? ((1.055 * (g ** (1.0 / 2.4))) - 0.055)\n\t\t: g * 12.92;\n\n\tb = b > 0.0031308\n\t\t? ((1.055 * (b ** (1.0 / 2.4))) - 0.055)\n\t\t: b * 12.92;\n\n\tr = Math.min(Math.max(0, r), 1);\n\tg = Math.min(Math.max(0, g), 1);\n\tb = Math.min(Math.max(0, b), 1);\n\n\treturn [r * 255, g * 255, b * 255];\n};\n\nconvert.xyz.lab = function (xyz) {\n\tlet x = xyz[0];\n\tlet y = xyz[1];\n\tlet z = xyz[2];\n\n\tx /= 95.047;\n\ty /= 100;\n\tz /= 108.883;\n\n\tx = x > 0.008856 ? (x ** (1 / 3)) : (7.787 * x) + (16 / 116);\n\ty = y > 0.008856 ? (y ** (1 / 3)) : (7.787 * y) + (16 / 116);\n\tz = z > 0.008856 ? (z ** (1 / 3)) : (7.787 * z) + (16 / 116);\n\n\tconst l = (116 * y) - 16;\n\tconst a = 500 * (x - y);\n\tconst b = 200 * (y - z);\n\n\treturn [l, a, b];\n};\n\nconvert.lab.xyz = function (lab) {\n\tconst l = lab[0];\n\tconst a = lab[1];\n\tconst b = lab[2];\n\tlet x;\n\tlet y;\n\tlet z;\n\n\ty = (l + 16) / 116;\n\tx = a / 500 + y;\n\tz = y - b / 200;\n\n\tconst y2 = y ** 3;\n\tconst x2 = x ** 3;\n\tconst z2 = z ** 3;\n\ty = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;\n\tx = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;\n\tz = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;\n\n\tx *= 95.047;\n\ty *= 100;\n\tz *= 108.883;\n\n\treturn [x, y, z];\n};\n\nconvert.lab.lch = function (lab) {\n\tconst l = lab[0];\n\tconst a = lab[1];\n\tconst b = lab[2];\n\tlet h;\n\n\tconst hr = Math.atan2(b, a);\n\th = hr * 360 / 2 / Math.PI;\n\n\tif (h < 0) {\n\t\th += 360;\n\t}\n\n\tconst c = Math.sqrt(a * a + b * b);\n\n\treturn [l, c, h];\n};\n\nconvert.lch.lab = function (lch) {\n\tconst l = lch[0];\n\tconst c = lch[1];\n\tconst h = lch[2];\n\n\tconst hr = h / 360 * 2 * Math.PI;\n\tconst a = c * Math.cos(hr);\n\tconst b = c * Math.sin(hr);\n\n\treturn [l, a, b];\n};\n\nconvert.rgb.ansi16 = function (args, saturation = null) {\n\tconst [r, g, b] = args;\n\tlet value = saturation === null ? convert.rgb.hsv(args)[2] : saturation; // Hsv -> ansi16 optimization\n\n\tvalue = Math.round(value / 50);\n\n\tif (value === 0) {\n\t\treturn 30;\n\t}\n\n\tlet ansi = 30\n\t\t+ ((Math.round(b / 255) << 2)\n\t\t| (Math.round(g / 255) << 1)\n\t\t| Math.round(r / 255));\n\n\tif (value === 2) {\n\t\tansi += 60;\n\t}\n\n\treturn ansi;\n};\n\nconvert.hsv.ansi16 = function (args) {\n\t// Optimization here; we already know the value and don't need to get\n\t// it converted for us.\n\treturn convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);\n};\n\nconvert.rgb.ansi256 = function (args) {\n\tconst r = args[0];\n\tconst g = args[1];\n\tconst b = args[2];\n\n\t// We use the extended greyscale palette here, with the exception of\n\t// black and white. normal palette only has 4 greyscale shades.\n\tif (r === g && g === b) {\n\t\tif (r < 8) {\n\t\t\treturn 16;\n\t\t}\n\n\t\tif (r > 248) {\n\t\t\treturn 231;\n\t\t}\n\n\t\treturn Math.round(((r - 8) / 247) * 24) + 232;\n\t}\n\n\tconst ansi = 16\n\t\t+ (36 * Math.round(r / 255 * 5))\n\t\t+ (6 * Math.round(g / 255 * 5))\n\t\t+ Math.round(b / 255 * 5);\n\n\treturn ansi;\n};\n\nconvert.ansi16.rgb = function (args) {\n\tlet color = args % 10;\n\n\t// Handle greyscale\n\tif (color === 0 || color === 7) {\n\t\tif (args > 50) {\n\t\t\tcolor += 3.5;\n\t\t}\n\n\t\tcolor = color / 10.5 * 255;\n\n\t\treturn [color, color, color];\n\t}\n\n\tconst mult = (~~(args > 50) + 1) * 0.5;\n\tconst r = ((color & 1) * mult) * 255;\n\tconst g = (((color >> 1) & 1) * mult) * 255;\n\tconst b = (((color >> 2) & 1) * mult) * 255;\n\n\treturn [r, g, b];\n};\n\nconvert.ansi256.rgb = function (args) {\n\t// Handle greyscale\n\tif (args >= 232) {\n\t\tconst c = (args - 232) * 10 + 8;\n\t\treturn [c, c, c];\n\t}\n\n\targs -= 16;\n\n\tlet rem;\n\tconst r = Math.floor(args / 36) / 5 * 255;\n\tconst g = Math.floor((rem = args % 36) / 6) / 5 * 255;\n\tconst b = (rem % 6) / 5 * 255;\n\n\treturn [r, g, b];\n};\n\nconvert.rgb.hex = function (args) {\n\tconst integer = ((Math.round(args[0]) & 0xFF) << 16)\n\t\t+ ((Math.round(args[1]) & 0xFF) << 8)\n\t\t+ (Math.round(args[2]) & 0xFF);\n\n\tconst string = integer.toString(16).toUpperCase();\n\treturn '000000'.substring(string.length) + string;\n};\n\nconvert.hex.rgb = function (args) {\n\tconst match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);\n\tif (!match) {\n\t\treturn [0, 0, 0];\n\t}\n\n\tlet colorString = match[0];\n\n\tif (match[0].length === 3) {\n\t\tcolorString = colorString.split('').map(char => {\n\t\t\treturn char + char;\n\t\t}).join('');\n\t}\n\n\tconst integer = parseInt(colorString, 16);\n\tconst r = (integer >> 16) & 0xFF;\n\tconst g = (integer >> 8) & 0xFF;\n\tconst b = integer & 0xFF;\n\n\treturn [r, g, b];\n};\n\nconvert.rgb.hcg = function (rgb) {\n\tconst r = rgb[0] / 255;\n\tconst g = rgb[1] / 255;\n\tconst b = rgb[2] / 255;\n\tconst max = Math.max(Math.max(r, g), b);\n\tconst min = Math.min(Math.min(r, g), b);\n\tconst chroma = (max - min);\n\tlet grayscale;\n\tlet hue;\n\n\tif (chroma < 1) {\n\t\tgrayscale = min / (1 - chroma);\n\t} else {\n\t\tgrayscale = 0;\n\t}\n\n\tif (chroma <= 0) {\n\t\thue = 0;\n\t} else\n\tif (max === r) {\n\t\thue = ((g - b) / chroma) % 6;\n\t} else\n\tif (max === g) {\n\t\thue = 2 + (b - r) / chroma;\n\t} else {\n\t\thue = 4 + (r - g) / chroma;\n\t}\n\n\thue /= 6;\n\thue %= 1;\n\n\treturn [hue * 360, chroma * 100, grayscale * 100];\n};\n\nconvert.hsl.hcg = function (hsl) {\n\tconst s = hsl[1] / 100;\n\tconst l = hsl[2] / 100;\n\n\tconst c = l < 0.5 ? (2.0 * s * l) : (2.0 * s * (1.0 - l));\n\n\tlet f = 0;\n\tif (c < 1.0) {\n\t\tf = (l - 0.5 * c) / (1.0 - c);\n\t}\n\n\treturn [hsl[0], c * 100, f * 100];\n};\n\nconvert.hsv.hcg = function (hsv) {\n\tconst s = hsv[1] / 100;\n\tconst v = hsv[2] / 100;\n\n\tconst c = s * v;\n\tlet f = 0;\n\n\tif (c < 1.0) {\n\t\tf = (v - c) / (1 - c);\n\t}\n\n\treturn [hsv[0], c * 100, f * 100];\n};\n\nconvert.hcg.rgb = function (hcg) {\n\tconst h = hcg[0] / 360;\n\tconst c = hcg[1] / 100;\n\tconst g = hcg[2] / 100;\n\n\tif (c === 0.0) {\n\t\treturn [g * 255, g * 255, g * 255];\n\t}\n\n\tconst pure = [0, 0, 0];\n\tconst hi = (h % 1) * 6;\n\tconst v = hi % 1;\n\tconst w = 1 - v;\n\tlet mg = 0;\n\n\t/* eslint-disable max-statements-per-line */\n\tswitch (Math.floor(hi)) {\n\t\tcase 0:\n\t\t\tpure[0] = 1; pure[1] = v; pure[2] = 0; break;\n\t\tcase 1:\n\t\t\tpure[0] = w; pure[1] = 1; pure[2] = 0; break;\n\t\tcase 2:\n\t\t\tpure[0] = 0; pure[1] = 1; pure[2] = v; break;\n\t\tcase 3:\n\t\t\tpure[0] = 0; pure[1] = w; pure[2] = 1; break;\n\t\tcase 4:\n\t\t\tpure[0] = v; pure[1] = 0; pure[2] = 1; break;\n\t\tdefault:\n\t\t\tpure[0] = 1; pure[1] = 0; pure[2] = w;\n\t}\n\t/* eslint-enable max-statements-per-line */\n\n\tmg = (1.0 - c) * g;\n\n\treturn [\n\t\t(c * pure[0] + mg) * 255,\n\t\t(c * pure[1] + mg) * 255,\n\t\t(c * pure[2] + mg) * 255\n\t];\n};\n\nconvert.hcg.hsv = function (hcg) {\n\tconst c = hcg[1] / 100;\n\tconst g = hcg[2] / 100;\n\n\tconst v = c + g * (1.0 - c);\n\tlet f = 0;\n\n\tif (v > 0.0) {\n\t\tf = c / v;\n\t}\n\n\treturn [hcg[0], f * 100, v * 100];\n};\n\nconvert.hcg.hsl = function (hcg) {\n\tconst c = hcg[1] / 100;\n\tconst g = hcg[2] / 100;\n\n\tconst l = g * (1.0 - c) + 0.5 * c;\n\tlet s = 0;\n\n\tif (l > 0.0 && l < 0.5) {\n\t\ts = c / (2 * l);\n\t} else\n\tif (l >= 0.5 && l < 1.0) {\n\t\ts = c / (2 * (1 - l));\n\t}\n\n\treturn [hcg[0], s * 100, l * 100];\n};\n\nconvert.hcg.hwb = function (hcg) {\n\tconst c = hcg[1] / 100;\n\tconst g = hcg[2] / 100;\n\tconst v = c + g * (1.0 - c);\n\treturn [hcg[0], (v - c) * 100, (1 - v) * 100];\n};\n\nconvert.hwb.hcg = function (hwb) {\n\tconst w = hwb[1] / 100;\n\tconst b = hwb[2] / 100;\n\tconst v = 1 - b;\n\tconst c = v - w;\n\tlet g = 0;\n\n\tif (c < 1) {\n\t\tg = (v - c) / (1 - c);\n\t}\n\n\treturn [hwb[0], c * 100, g * 100];\n};\n\nconvert.apple.rgb = function (apple) {\n\treturn [(apple[0] / 65535) * 255, (apple[1] / 65535) * 255, (apple[2] / 65535) * 255];\n};\n\nconvert.rgb.apple = function (rgb) {\n\treturn [(rgb[0] / 255) * 65535, (rgb[1] / 255) * 65535, (rgb[2] / 255) * 65535];\n};\n\nconvert.gray.rgb = function (args) {\n\treturn [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];\n};\n\nconvert.gray.hsl = function (args) {\n\treturn [0, 0, args[0]];\n};\n\nconvert.gray.hsv = convert.gray.hsl;\n\nconvert.gray.hwb = function (gray) {\n\treturn [0, 100, gray[0]];\n};\n\nconvert.gray.cmyk = function (gray) {\n\treturn [0, 0, 0, gray[0]];\n};\n\nconvert.gray.lab = function (gray) {\n\treturn [gray[0], 0, 0];\n};\n\nconvert.gray.hex = function (gray) {\n\tconst val = Math.round(gray[0] / 100 * 255) & 0xFF;\n\tconst integer = (val << 16) + (val << 8) + val;\n\n\tconst string = integer.toString(16).toUpperCase();\n\treturn '000000'.substring(string.length) + string;\n};\n\nconvert.rgb.gray = function (rgb) {\n\tconst val = (rgb[0] + rgb[1] + rgb[2]) / 3;\n\treturn [val / 255 * 100];\n};\n", "const conversions = require('./conversions');\n\n/*\n\tThis function routes a model to all other models.\n\n\tall functions that are routed have a property `.conversion` attached\n\tto the returned synthetic function. This property is an array\n\tof strings, each with the steps in between the 'from' and 'to'\n\tcolor models (inclusive).\n\n\tconversions that are not possible simply are not included.\n*/\n\nfunction buildGraph() {\n\tconst graph = {};\n\t// https://jsperf.com/object-keys-vs-for-in-with-closure/3\n\tconst models = Object.keys(conversions);\n\n\tfor (let len = models.length, i = 0; i < len; i++) {\n\t\tgraph[models[i]] = {\n\t\t\t// http://jsperf.com/1-vs-infinity\n\t\t\t// micro-opt, but this is simple.\n\t\t\tdistance: -1,\n\t\t\tparent: null\n\t\t};\n\t}\n\n\treturn graph;\n}\n\n// https://en.wikipedia.org/wiki/Breadth-first_search\nfunction deriveBFS(fromModel) {\n\tconst graph = buildGraph();\n\tconst queue = [fromModel]; // Unshift -> queue -> pop\n\n\tgraph[fromModel].distance = 0;\n\n\twhile (queue.length) {\n\t\tconst current = queue.pop();\n\t\tconst adjacents = Object.keys(conversions[current]);\n\n\t\tfor (let len = adjacents.length, i = 0; i < len; i++) {\n\t\t\tconst adjacent = adjacents[i];\n\t\t\tconst node = graph[adjacent];\n\n\t\t\tif (node.distance === -1) {\n\t\t\t\tnode.distance = graph[current].distance + 1;\n\t\t\t\tnode.parent = current;\n\t\t\t\tqueue.unshift(adjacent);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn graph;\n}\n\nfunction link(from, to) {\n\treturn function (args) {\n\t\treturn to(from(args));\n\t};\n}\n\nfunction wrapConversion(toModel, graph) {\n\tconst path = [graph[toModel].parent, toModel];\n\tlet fn = conversions[graph[toModel].parent][toModel];\n\n\tlet cur = graph[toModel].parent;\n\twhile (graph[cur].parent) {\n\t\tpath.unshift(graph[cur].parent);\n\t\tfn = link(conversions[graph[cur].parent][cur], fn);\n\t\tcur = graph[cur].parent;\n\t}\n\n\tfn.conversion = path;\n\treturn fn;\n}\n\nmodule.exports = function (fromModel) {\n\tconst graph = deriveBFS(fromModel);\n\tconst conversion = {};\n\n\tconst models = Object.keys(graph);\n\tfor (let len = models.length, i = 0; i < len; i++) {\n\t\tconst toModel = models[i];\n\t\tconst node = graph[toModel];\n\n\t\tif (node.parent === null) {\n\t\t\t// No possible conversion, or this node is the source model.\n\t\t\tcontinue;\n\t\t}\n\n\t\tconversion[toModel] = wrapConversion(toModel, graph);\n\t}\n\n\treturn conversion;\n};\n\n", "const conversions = require('./conversions');\nconst route = require('./route');\n\nconst convert = {};\n\nconst models = Object.keys(conversions);\n\nfunction wrapRaw(fn) {\n\tconst wrappedFn = function (...args) {\n\t\tconst arg0 = args[0];\n\t\tif (arg0 === undefined || arg0 === null) {\n\t\t\treturn arg0;\n\t\t}\n\n\t\tif (arg0.length > 1) {\n\t\t\targs = arg0;\n\t\t}\n\n\t\treturn fn(args);\n\t};\n\n\t// Preserve .conversion property if there is one\n\tif ('conversion' in fn) {\n\t\twrappedFn.conversion = fn.conversion;\n\t}\n\n\treturn wrappedFn;\n}\n\nfunction wrapRounded(fn) {\n\tconst wrappedFn = function (...args) {\n\t\tconst arg0 = args[0];\n\n\t\tif (arg0 === undefined || arg0 === null) {\n\t\t\treturn arg0;\n\t\t}\n\n\t\tif (arg0.length > 1) {\n\t\t\targs = arg0;\n\t\t}\n\n\t\tconst result = fn(args);\n\n\t\t// We're assuming the result is an array here.\n\t\t// see notice in conversions.js; don't use box types\n\t\t// in conversion functions.\n\t\tif (typeof result === 'object') {\n\t\t\tfor (let len = result.length, i = 0; i < len; i++) {\n\t\t\t\tresult[i] = Math.round(result[i]);\n\t\t\t}\n\t\t}\n\n\t\treturn result;\n\t};\n\n\t// Preserve .conversion property if there is one\n\tif ('conversion' in fn) {\n\t\twrappedFn.conversion = fn.conversion;\n\t}\n\n\treturn wrappedFn;\n}\n\nmodels.forEach(fromModel => {\n\tconvert[fromModel] = {};\n\n\tObject.defineProperty(convert[fromModel], 'channels', {value: conversions[fromModel].channels});\n\tObject.defineProperty(convert[fromModel], 'labels', {value: conversions[fromModel].labels});\n\n\tconst routes = route(fromModel);\n\tconst routeModels = Object.keys(routes);\n\n\trouteModels.forEach(toModel => {\n\t\tconst fn = routes[toModel];\n\n\t\tconvert[fromModel][toModel] = wrapRounded(fn);\n\t\tconvert[fromModel][toModel].raw = wrapRaw(fn);\n\t});\n});\n\nmodule.exports = convert;\n", "'use strict';\n\nconst wrapAnsi16 = (fn, offset) => (...args) => {\n\tconst code = fn(...args);\n\treturn `\\u001B[${code + offset}m`;\n};\n\nconst wrapAnsi256 = (fn, offset) => (...args) => {\n\tconst code = fn(...args);\n\treturn `\\u001B[${38 + offset};5;${code}m`;\n};\n\nconst wrapAnsi16m = (fn, offset) => (...args) => {\n\tconst rgb = fn(...args);\n\treturn `\\u001B[${38 + offset};2;${rgb[0]};${rgb[1]};${rgb[2]}m`;\n};\n\nconst ansi2ansi = n => n;\nconst rgb2rgb = (r, g, b) => [r, g, b];\n\nconst setLazyProperty = (object, property, get) => {\n\tObject.defineProperty(object, property, {\n\t\tget: () => {\n\t\t\tconst value = get();\n\n\t\t\tObject.defineProperty(object, property, {\n\t\t\t\tvalue,\n\t\t\t\tenumerable: true,\n\t\t\t\tconfigurable: true\n\t\t\t});\n\n\t\t\treturn value;\n\t\t},\n\t\tenumerable: true,\n\t\tconfigurable: true\n\t});\n};\n\n/** @type {typeof import('color-convert')} */\nlet colorConvert;\nconst makeDynamicStyles = (wrap, targetSpace, identity, isBackground) => {\n\tif (colorConvert === undefined) {\n\t\tcolorConvert = require('color-convert');\n\t}\n\n\tconst offset = isBackground ? 10 : 0;\n\tconst styles = {};\n\n\tfor (const [sourceSpace, suite] of Object.entries(colorConvert)) {\n\t\tconst name = sourceSpace === 'ansi16' ? 'ansi' : sourceSpace;\n\t\tif (sourceSpace === targetSpace) {\n\t\t\tstyles[name] = wrap(identity, offset);\n\t\t} else if (typeof suite === 'object') {\n\t\t\tstyles[name] = wrap(suite[targetSpace], offset);\n\t\t}\n\t}\n\n\treturn styles;\n};\n\nfunction assembleStyles() {\n\tconst codes = new Map();\n\tconst styles = {\n\t\tmodifier: {\n\t\t\treset: [0, 0],\n\t\t\t// 21 isn't widely supported and 22 does the same thing\n\t\t\tbold: [1, 22],\n\t\t\tdim: [2, 22],\n\t\t\titalic: [3, 23],\n\t\t\tunderline: [4, 24],\n\t\t\tinverse: [7, 27],\n\t\t\thidden: [8, 28],\n\t\t\tstrikethrough: [9, 29]\n\t\t},\n\t\tcolor: {\n\t\t\tblack: [30, 39],\n\t\t\tred: [31, 39],\n\t\t\tgreen: [32, 39],\n\t\t\tyellow: [33, 39],\n\t\t\tblue: [34, 39],\n\t\t\tmagenta: [35, 39],\n\t\t\tcyan: [36, 39],\n\t\t\twhite: [37, 39],\n\n\t\t\t// Bright color\n\t\t\tblackBright: [90, 39],\n\t\t\tredBright: [91, 39],\n\t\t\tgreenBright: [92, 39],\n\t\t\tyellowBright: [93, 39],\n\t\t\tblueBright: [94, 39],\n\t\t\tmagentaBright: [95, 39],\n\t\t\tcyanBright: [96, 39],\n\t\t\twhiteBright: [97, 39]\n\t\t},\n\t\tbgColor: {\n\t\t\tbgBlack: [40, 49],\n\t\t\tbgRed: [41, 49],\n\t\t\tbgGreen: [42, 49],\n\t\t\tbgYellow: [43, 49],\n\t\t\tbgBlue: [44, 49],\n\t\t\tbgMagenta: [45, 49],\n\t\t\tbgCyan: [46, 49],\n\t\t\tbgWhite: [47, 49],\n\n\t\t\t// Bright color\n\t\t\tbgBlackBright: [100, 49],\n\t\t\tbgRedBright: [101, 49],\n\t\t\tbgGreenBright: [102, 49],\n\t\t\tbgYellowBright: [103, 49],\n\t\t\tbgBlueBright: [104, 49],\n\t\t\tbgMagentaBright: [105, 49],\n\t\t\tbgCyanBright: [106, 49],\n\t\t\tbgWhiteBright: [107, 49]\n\t\t}\n\t};\n\n\t// Alias bright black as gray (and grey)\n\tstyles.color.gray = styles.color.blackBright;\n\tstyles.bgColor.bgGray = styles.bgColor.bgBlackBright;\n\tstyles.color.grey = styles.color.blackBright;\n\tstyles.bgColor.bgGrey = styles.bgColor.bgBlackBright;\n\n\tfor (const [groupName, group] of Object.entries(styles)) {\n\t\tfor (const [styleName, style] of Object.entries(group)) {\n\t\t\tstyles[styleName] = {\n\t\t\t\topen: `\\u001B[${style[0]}m`,\n\t\t\t\tclose: `\\u001B[${style[1]}m`\n\t\t\t};\n\n\t\t\tgroup[styleName] = styles[styleName];\n\n\t\t\tcodes.set(style[0], style[1]);\n\t\t}\n\n\t\tObject.defineProperty(styles, groupName, {\n\t\t\tvalue: group,\n\t\t\tenumerable: false\n\t\t});\n\t}\n\n\tObject.defineProperty(styles, 'codes', {\n\t\tvalue: codes,\n\t\tenumerable: false\n\t});\n\n\tstyles.color.close = '\\u001B[39m';\n\tstyles.bgColor.close = '\\u001B[49m';\n\n\tsetLazyProperty(styles.color, 'ansi', () => makeDynamicStyles(wrapAnsi16, 'ansi16', ansi2ansi, false));\n\tsetLazyProperty(styles.color, 'ansi256', () => makeDynamicStyles(wrapAnsi256, 'ansi256', ansi2ansi, false));\n\tsetLazyProperty(styles.color, 'ansi16m', () => makeDynamicStyles(wrapAnsi16m, 'rgb', rgb2rgb, false));\n\tsetLazyProperty(styles.bgColor, 'ansi', () => makeDynamicStyles(wrapAnsi16, 'ansi16', ansi2ansi, true));\n\tsetLazyProperty(styles.bgColor, 'ansi256', () => makeDynamicStyles(wrapAnsi256, 'ansi256', ansi2ansi, true));\n\tsetLazyProperty(styles.bgColor, 'ansi16m', () => makeDynamicStyles(wrapAnsi16m, 'rgb', rgb2rgb, true));\n\n\treturn styles;\n}\n\n// Make the export immutable\nObject.defineProperty(module, 'exports', {\n\tenumerable: true,\n\tget: assembleStyles\n});\n", "'use strict';\nmodule.exports = {\n\tstdout: false,\n\tstderr: false\n};\n", "'use strict';\n\nconst stringReplaceAll = (string, substring, replacer) => {\n\tlet index = string.indexOf(substring);\n\tif (index === -1) {\n\t\treturn string;\n\t}\n\n\tconst substringLength = substring.length;\n\tlet endIndex = 0;\n\tlet returnValue = '';\n\tdo {\n\t\treturnValue += string.substr(endIndex, index - endIndex) + substring + replacer;\n\t\tendIndex = index + substringLength;\n\t\tindex = string.indexOf(substring, endIndex);\n\t} while (index !== -1);\n\n\treturnValue += string.substr(endIndex);\n\treturn returnValue;\n};\n\nconst stringEncaseCRLFWithFirstIndex = (string, prefix, postfix, index) => {\n\tlet endIndex = 0;\n\tlet returnValue = '';\n\tdo {\n\t\tconst gotCR = string[index - 1] === '\\r';\n\t\treturnValue += string.substr(endIndex, (gotCR ? index - 1 : index) - endIndex) + prefix + (gotCR ? '\\r\\n' : '\\n') + postfix;\n\t\tendIndex = index + 1;\n\t\tindex = string.indexOf('\\n', endIndex);\n\t} while (index !== -1);\n\n\treturnValue += string.substr(endIndex);\n\treturn returnValue;\n};\n\nmodule.exports = {\n\tstringReplaceAll,\n\tstringEncaseCRLFWithFirstIndex\n};\n", "'use strict';\nconst TEMPLATE_REGEX = /(?:\\\\(u(?:[a-f\\d]{4}|\\{[a-f\\d]{1,6}\\})|x[a-f\\d]{2}|.))|(?:\\{(~)?(\\w+(?:\\([^)]*\\))?(?:\\.\\w+(?:\\([^)]*\\))?)*)(?:[ \\t]|(?=\\r?\\n)))|(\\})|((?:.|[\\r\\n\\f])+?)/gi;\nconst STYLE_REGEX = /(?:^|\\.)(\\w+)(?:\\(([^)]*)\\))?/g;\nconst STRING_REGEX = /^(['\"])((?:\\\\.|(?!\\1)[^\\\\])*)\\1$/;\nconst ESCAPE_REGEX = /\\\\(u(?:[a-f\\d]{4}|\\{[a-f\\d]{1,6}\\})|x[a-f\\d]{2}|.)|([^\\\\])/gi;\n\nconst ESCAPES = new Map([\n\t['n', '\\n'],\n\t['r', '\\r'],\n\t['t', '\\t'],\n\t['b', '\\b'],\n\t['f', '\\f'],\n\t['v', '\\v'],\n\t['0', '\\0'],\n\t['\\\\', '\\\\'],\n\t['e', '\\u001B'],\n\t['a', '\\u0007']\n]);\n\nfunction unescape(c) {\n\tconst u = c[0] === 'u';\n\tconst bracket = c[1] === '{';\n\n\tif ((u && !bracket && c.length === 5) || (c[0] === 'x' && c.length === 3)) {\n\t\treturn String.fromCharCode(parseInt(c.slice(1), 16));\n\t}\n\n\tif (u && bracket) {\n\t\treturn String.fromCodePoint(parseInt(c.slice(2, -1), 16));\n\t}\n\n\treturn ESCAPES.get(c) || c;\n}\n\nfunction parseArguments(name, arguments_) {\n\tconst results = [];\n\tconst chunks = arguments_.trim().split(/\\s*,\\s*/g);\n\tlet matches;\n\n\tfor (const chunk of chunks) {\n\t\tconst number = Number(chunk);\n\t\tif (!Number.isNaN(number)) {\n\t\t\tresults.push(number);\n\t\t} else if ((matches = chunk.match(STRING_REGEX))) {\n\t\t\tresults.push(matches[2].replace(ESCAPE_REGEX, (m, escape, character) => escape ? unescape(escape) : character));\n\t\t} else {\n\t\t\tthrow new Error(`Invalid Chalk template style argument: ${chunk} (in style '${name}')`);\n\t\t}\n\t}\n\n\treturn results;\n}\n\nfunction parseStyle(style) {\n\tSTYLE_REGEX.lastIndex = 0;\n\n\tconst results = [];\n\tlet matches;\n\n\twhile ((matches = STYLE_REGEX.exec(style)) !== null) {\n\t\tconst name = matches[1];\n\n\t\tif (matches[2]) {\n\t\t\tconst args = parseArguments(name, matches[2]);\n\t\t\tresults.push([name].concat(args));\n\t\t} else {\n\t\t\tresults.push([name]);\n\t\t}\n\t}\n\n\treturn results;\n}\n\nfunction buildStyle(chalk, styles) {\n\tconst enabled = {};\n\n\tfor (const layer of styles) {\n\t\tfor (const style of layer.styles) {\n\t\t\tenabled[style[0]] = layer.inverse ? null : style.slice(1);\n\t\t}\n\t}\n\n\tlet current = chalk;\n\tfor (const [styleName, styles] of Object.entries(enabled)) {\n\t\tif (!Array.isArray(styles)) {\n\t\t\tcontinue;\n\t\t}\n\n\t\tif (!(styleName in current)) {\n\t\t\tthrow new Error(`Unknown Chalk style: ${styleName}`);\n\t\t}\n\n\t\tcurrent = styles.length > 0 ? current[styleName](...styles) : current[styleName];\n\t}\n\n\treturn current;\n}\n\nmodule.exports = (chalk, temporary) => {\n\tconst styles = [];\n\tconst chunks = [];\n\tlet chunk = [];\n\n\t// eslint-disable-next-line max-params\n\ttemporary.replace(TEMPLATE_REGEX, (m, escapeCharacter, inverse, style, close, character) => {\n\t\tif (escapeCharacter) {\n\t\t\tchunk.push(unescape(escapeCharacter));\n\t\t} else if (style) {\n\t\t\tconst string = chunk.join('');\n\t\t\tchunk = [];\n\t\t\tchunks.push(styles.length === 0 ? string : buildStyle(chalk, styles)(string));\n\t\t\tstyles.push({inverse, styles: parseStyle(style)});\n\t\t} else if (close) {\n\t\t\tif (styles.length === 0) {\n\t\t\t\tthrow new Error('Found extraneous } in Chalk template literal');\n\t\t\t}\n\n\t\t\tchunks.push(buildStyle(chalk, styles)(chunk.join('')));\n\t\t\tchunk = [];\n\t\t\tstyles.pop();\n\t\t} else {\n\t\t\tchunk.push(character);\n\t\t}\n\t});\n\n\tchunks.push(chunk.join(''));\n\n\tif (styles.length > 0) {\n\t\tconst errMsg = `Chalk template literal is missing ${styles.length} closing bracket${styles.length === 1 ? '' : 's'} (\\`}\\`)`;\n\t\tthrow new Error(errMsg);\n\t}\n\n\treturn chunks.join('');\n};\n", "'use strict';\nconst ansiStyles = require('ansi-styles');\nconst {stdout: stdoutColor, stderr: stderrColor} = require('supports-color');\nconst {\n\tstringReplaceAll,\n\tstringEncaseCRLFWithFirstIndex\n} = require('./util');\n\n// `supportsColor.level` → `ansiStyles.color[name]` mapping\nconst levelMapping = [\n\t'ansi',\n\t'ansi',\n\t'ansi256',\n\t'ansi16m'\n];\n\nconst styles = Object.create(null);\n\nconst applyOptions = (object, options = {}) => {\n\tif (options.level > 3 || options.level < 0) {\n\t\tthrow new Error('The `level` option should be an integer from 0 to 3');\n\t}\n\n\t// Detect level if not set manually\n\tconst colorLevel = stdoutColor ? stdoutColor.level : 0;\n\tobject.level = options.level === undefined ? colorLevel : options.level;\n};\n\nclass ChalkClass {\n\tconstructor(options) {\n\t\treturn chalkFactory(options);\n\t}\n}\n\nconst chalkFactory = options => {\n\tconst chalk = {};\n\tapplyOptions(chalk, options);\n\n\tchalk.template = (...arguments_) => chalkTag(chalk.template, ...arguments_);\n\n\tObject.setPrototypeOf(chalk, Chalk.prototype);\n\tObject.setPrototypeOf(chalk.template, chalk);\n\n\tchalk.template.constructor = () => {\n\t\tthrow new Error('`chalk.constructor()` is deprecated. Use `new chalk.Instance()` instead.');\n\t};\n\n\tchalk.template.Instance = ChalkClass;\n\n\treturn chalk.template;\n};\n\nfunction Chalk(options) {\n\treturn chalkFactory(options);\n}\n\nfor (const [styleName, style] of Object.entries(ansiStyles)) {\n\tstyles[styleName] = {\n\t\tget() {\n\t\t\tconst builder = createBuilder(this, createStyler(style.open, style.close, this._styler), this._isEmpty);\n\t\t\tObject.defineProperty(this, styleName, {value: builder});\n\t\t\treturn builder;\n\t\t}\n\t};\n}\n\nstyles.visible = {\n\tget() {\n\t\tconst builder = createBuilder(this, this._styler, true);\n\t\tObject.defineProperty(this, 'visible', {value: builder});\n\t\treturn builder;\n\t}\n};\n\nconst usedModels = ['rgb', 'hex', 'keyword', 'hsl', 'hsv', 'hwb', 'ansi', 'ansi256'];\n\nfor (const model of usedModels) {\n\tstyles[model] = {\n\t\tget() {\n\t\t\tconst {level} = this;\n\t\t\treturn function (...arguments_) {\n\t\t\t\tconst styler = createStyler(ansiStyles.color[levelMapping[level]][model](...arguments_), ansiStyles.color.close, this._styler);\n\t\t\t\treturn createBuilder(this, styler, this._isEmpty);\n\t\t\t};\n\t\t}\n\t};\n}\n\nfor (const model of usedModels) {\n\tconst bgModel = 'bg' + model[0].toUpperCase() + model.slice(1);\n\tstyles[bgModel] = {\n\t\tget() {\n\t\t\tconst {level} = this;\n\t\t\treturn function (...arguments_) {\n\t\t\t\tconst styler = createStyler(ansiStyles.bgColor[levelMapping[level]][model](...arguments_), ansiStyles.bgColor.close, this._styler);\n\t\t\t\treturn createBuilder(this, styler, this._isEmpty);\n\t\t\t};\n\t\t}\n\t};\n}\n\nconst proto = Object.defineProperties(() => {}, {\n\t...styles,\n\tlevel: {\n\t\tenumerable: true,\n\t\tget() {\n\t\t\treturn this._generator.level;\n\t\t},\n\t\tset(level) {\n\t\t\tthis._generator.level = level;\n\t\t}\n\t}\n});\n\nconst createStyler = (open, close, parent) => {\n\tlet openAll;\n\tlet closeAll;\n\tif (parent === undefined) {\n\t\topenAll = open;\n\t\tcloseAll = close;\n\t} else {\n\t\topenAll = parent.openAll + open;\n\t\tcloseAll = close + parent.closeAll;\n\t}\n\n\treturn {\n\t\topen,\n\t\tclose,\n\t\topenAll,\n\t\tcloseAll,\n\t\tparent\n\t};\n};\n\nconst createBuilder = (self, _styler, _isEmpty) => {\n\tconst builder = (...arguments_) => {\n\t\t// Single argument is hot path, implicit coercion is faster than anything\n\t\t// eslint-disable-next-line no-implicit-coercion\n\t\treturn applyStyle(builder, (arguments_.length === 1) ? ('' + arguments_[0]) : arguments_.join(' '));\n\t};\n\n\t// `__proto__` is used because we must return a function, but there is\n\t// no way to create a function with a different prototype\n\tbuilder.__proto__ = proto; // eslint-disable-line no-proto\n\n\tbuilder._generator = self;\n\tbuilder._styler = _styler;\n\tbuilder._isEmpty = _isEmpty;\n\n\treturn builder;\n};\n\nconst applyStyle = (self, string) => {\n\tif (self.level <= 0 || !string) {\n\t\treturn self._isEmpty ? '' : string;\n\t}\n\n\tlet styler = self._styler;\n\n\tif (styler === undefined) {\n\t\treturn string;\n\t}\n\n\tconst {openAll, closeAll} = styler;\n\tif (string.indexOf('\\u001B') !== -1) {\n\t\twhile (styler !== undefined) {\n\t\t\t// Replace any instances already present with a re-opening code\n\t\t\t// otherwise only the part of the string until said closing code\n\t\t\t// will be colored, and the rest will simply be 'plain'.\n\t\t\tstring = stringReplaceAll(string, styler.close, styler.open);\n\n\t\t\tstyler = styler.parent;\n\t\t}\n\t}\n\n\t// We can move both next actions out of loop, because remaining actions in loop won't have\n\t// any/visible effect on parts we add here. Close the styling before a linebreak and reopen\n\t// after next line to fix a bleed issue on macOS: https://github.com/chalk/chalk/pull/92\n\tconst lfIndex = string.indexOf('\\n');\n\tif (lfIndex !== -1) {\n\t\tstring = stringEncaseCRLFWithFirstIndex(string, closeAll, openAll, lfIndex);\n\t}\n\n\treturn openAll + string + closeAll;\n};\n\nlet template;\nconst chalkTag = (chalk, ...strings) => {\n\tconst [firstString] = strings;\n\n\tif (!Array.isArray(firstString)) {\n\t\t// If chalk() was called by itself or with a string,\n\t\t// return the string itself as a string.\n\t\treturn strings.join(' ');\n\t}\n\n\tconst arguments_ = strings.slice(1);\n\tconst parts = [firstString.raw[0]];\n\n\tfor (let i = 1; i < firstString.length; i++) {\n\t\tparts.push(\n\t\t\tString(arguments_[i - 1]).replace(/[{}\\\\]/g, '\\\\$&'),\n\t\t\tString(firstString.raw[i])\n\t\t);\n\t}\n\n\tif (template === undefined) {\n\t\ttemplate = require('./templates');\n\t}\n\n\treturn template(chalk, parts.join(''));\n};\n\nObject.defineProperties(Chalk.prototype, styles);\n\nconst chalk = Chalk(); // eslint-disable-line new-cap\nchalk.supportsColor = stdoutColor;\nchalk.stderr = Chalk({level: stderrColor ? stderrColor.level : 0}); // eslint-disable-line new-cap\nchalk.stderr.supportsColor = stderrColor;\n\n// For TypeScript\nchalk.Level = {\n\tNone: 0,\n\tBasic: 1,\n\tAnsi256: 2,\n\tTrueColor: 3,\n\t0: 'None',\n\t1: 'Basic',\n\t2: 'Ansi256',\n\t3: 'TrueColor'\n};\n\nmodule.exports = chalk;\n", "class Processor {\n  constructor(options) {\n    this.selfOptions = options || {};\n    this.pipes = {};\n  }\n\n  options(options) {\n    if (options) {\n      this.selfOptions = options;\n    }\n    return this.selfOptions;\n  }\n\n  pipe(name, pipeArg) {\n    let pipe = pipeArg;\n    if (typeof name === 'string') {\n      if (typeof pipe === 'undefined') {\n        return this.pipes[name];\n      } else {\n        this.pipes[name] = pipe;\n      }\n    }\n    if (name && name.name) {\n      pipe = name;\n      if (pipe.processor === this) {\n        return pipe;\n      }\n      this.pipes[pipe.name] = pipe;\n    }\n    pipe.processor = this;\n    return pipe;\n  }\n\n  process(input, pipe) {\n    let context = input;\n    context.options = this.options();\n    let nextPipe = pipe || input.pipe || 'default';\n    let lastPipe;\n    let lastContext;\n    while (nextPipe) {\n      if (typeof context.nextAfterChildren !== 'undefined') {\n        // children processed and coming back to parent\n        context.next = context.nextAfterChildren;\n        context.nextAfterChildren = null;\n      }\n\n      if (typeof nextPipe === 'string') {\n        nextPipe = this.pipe(nextPipe);\n      }\n      nextPipe.process(context);\n      lastContext = context;\n      lastPipe = nextPipe;\n      nextPipe = null;\n      if (context) {\n        if (context.next) {\n          context = context.next;\n          nextPipe = lastContext.nextPipe || context.pipe || lastPipe;\n        }\n      }\n    }\n    return context.hasResult ? context.result : undefined;\n  }\n}\n\nexport default Processor;\n", "class Pipe {\n  constructor(name) {\n    this.name = name;\n    this.filters = [];\n  }\n\n  process(input) {\n    if (!this.processor) {\n      throw new Error('add this pipe to a processor before using it');\n    }\n    const debug = this.debug;\n    const length = this.filters.length;\n    const context = input;\n    for (let index = 0; index < length; index++) {\n      const filter = this.filters[index];\n      if (debug) {\n        this.log(`filter: ${filter.filterName}`);\n      }\n      filter(context);\n      if (typeof context === 'object' && context.exiting) {\n        context.exiting = false;\n        break;\n      }\n    }\n    if (!context.next && this.resultCheck) {\n      this.resultCheck(context);\n    }\n  }\n\n  log(msg) {\n    console.log(`[jsondiffpatch] ${this.name} pipe, ${msg}`);\n  }\n\n  append(...args) {\n    this.filters.push(...args);\n    return this;\n  }\n\n  prepend(...args) {\n    this.filters.unshift(...args);\n    return this;\n  }\n\n  indexOf(filterName) {\n    if (!filterName) {\n      throw new Error('a filter name is required');\n    }\n    for (let index = 0; index < this.filters.length; index++) {\n      const filter = this.filters[index];\n      if (filter.filterName === filterName) {\n        return index;\n      }\n    }\n    throw new Error(`filter not found: ${filterName}`);\n  }\n\n  list() {\n    return this.filters.map(f => f.filterName);\n  }\n\n  after(filterName) {\n    const index = this.indexOf(filterName);\n    const params = Array.prototype.slice.call(arguments, 1);\n    if (!params.length) {\n      throw new Error('a filter is required');\n    }\n    params.unshift(index + 1, 0);\n    Array.prototype.splice.apply(this.filters, params);\n    return this;\n  }\n\n  before(filterName) {\n    const index = this.indexOf(filterName);\n    const params = Array.prototype.slice.call(arguments, 1);\n    if (!params.length) {\n      throw new Error('a filter is required');\n    }\n    params.unshift(index, 0);\n    Array.prototype.splice.apply(this.filters, params);\n    return this;\n  }\n\n  replace(filterName) {\n    const index = this.indexOf(filterName);\n    const params = Array.prototype.slice.call(arguments, 1);\n    if (!params.length) {\n      throw new Error('a filter is required');\n    }\n    params.unshift(index, 1);\n    Array.prototype.splice.apply(this.filters, params);\n    return this;\n  }\n\n  remove(filterName) {\n    const index = this.indexOf(filterName);\n    this.filters.splice(index, 1);\n    return this;\n  }\n\n  clear() {\n    this.filters.length = 0;\n    return this;\n  }\n\n  shouldHaveResult(should) {\n    if (should === false) {\n      this.resultCheck = null;\n      return;\n    }\n    if (this.resultCheck) {\n      return;\n    }\n    const pipe = this;\n    this.resultCheck = context => {\n      if (!context.hasResult) {\n        console.log(context);\n        const error = new Error(`${pipe.name} failed`);\n        error.noResult = true;\n        throw error;\n      }\n    };\n    return this;\n  }\n}\n\nexport default Pipe;\n", "import Pipe from '../pipe';\n\nexport default class Context {\n  setResult(result) {\n    this.result = result;\n    this.hasResult = true;\n    return this;\n  }\n\n  exit() {\n    this.exiting = true;\n    return this;\n  }\n\n  switchTo(next, pipe) {\n    if (typeof next === 'string' || next instanceof Pipe) {\n      this.nextPipe = next;\n    } else {\n      this.next = next;\n      if (pipe) {\n        this.nextPipe = pipe;\n      }\n    }\n    return this;\n  }\n\n  push(child, name) {\n    child.parent = this;\n    if (typeof name !== 'undefined') {\n      child.childName = name;\n    }\n    child.root = this.root || this;\n    child.options = child.options || this.options;\n    if (!this.children) {\n      this.children = [child];\n      this.nextAfterChildren = this.next || null;\n      this.next = child;\n    } else {\n      this.children[this.children.length - 1].next = child;\n      this.children.push(child);\n    }\n    child.next = this;\n    return this;\n  }\n}\n", "const isArray =\n  typeof Array.isArray === 'function' ? Array.isArray : a => a instanceof Array;\n\nfunction cloneRegExp(re) {\n  const regexMatch = /^\\/(.*)\\/([gimyu]*)$/.exec(re.toString());\n  return new RegExp(regexMatch[1], regexMatch[2]);\n}\n\nexport default function clone(arg) {\n  if (typeof arg !== 'object') {\n    return arg;\n  }\n  if (arg === null) {\n    return null;\n  }\n  if (isArray(arg)) {\n    return arg.map(clone);\n  }\n  if (arg instanceof Date) {\n    return new Date(arg.getTime());\n  }\n  if (arg instanceof RegExp) {\n    return cloneRegExp(arg);\n  }\n  const cloned = {};\n  for (const name in arg) {\n    if (Object.prototype.hasOwnProperty.call(arg, name)) {\n      cloned[name] = clone(arg[name]);\n    }\n  }\n  return cloned;\n}\n", "import Context from './context';\nimport defaultClone from '../clone';\n\nclass DiffContext extends Context {\n  constructor(left, right) {\n    super();\n    this.left = left;\n    this.right = right;\n    this.pipe = 'diff';\n  }\n\n  setResult(result) {\n    if (this.options.cloneDiffValues && typeof result === 'object') {\n      const clone =\n        typeof this.options.cloneDiffValues === 'function'\n          ? this.options.cloneDiffValues\n          : defaultClone;\n      if (typeof result[0] === 'object') {\n        result[0] = clone(result[0]);\n      }\n      if (typeof result[1] === 'object') {\n        result[1] = clone(result[1]);\n      }\n    }\n    return Context.prototype.setResult.apply(this, arguments);\n  }\n}\n\nexport default DiffContext;\n", "import Context from './context';\n\nclass PatchContext extends Context {\n  constructor(left, delta) {\n    super();\n    this.left = left;\n    this.delta = delta;\n    this.pipe = 'patch';\n  }\n}\n\nexport default PatchContext;\n", "import Context from './context';\n\nclass ReverseContext extends Context {\n  constructor(delta) {\n    super();\n    this.delta = delta;\n    this.pipe = 'reverse';\n  }\n}\n\nexport default ReverseContext;\n", "const isArray =\n  typeof Array.isArray === 'function'\n    ? Array.isArray\n    : function(a) {\n      return a instanceof Array;\n    };\n\nexport const diffFilter = function trivialMatchesDiffFilter(context) {\n  if (context.left === context.right) {\n    context.setResult(undefined).exit();\n    return;\n  }\n  if (typeof context.left === 'undefined') {\n    if (typeof context.right === 'function') {\n      throw new Error('functions are not supported');\n    }\n    context.setResult([context.right]).exit();\n    return;\n  }\n  if (typeof context.right === 'undefined') {\n    context.setResult([context.left, 0, 0]).exit();\n    return;\n  }\n  if (\n    typeof context.left === 'function' ||\n    typeof context.right === 'function'\n  ) {\n    throw new Error('functions are not supported');\n  }\n  context.leftType = context.left === null ? 'null' : typeof context.left;\n  context.rightType = context.right === null ? 'null' : typeof context.right;\n  if (context.leftType !== context.rightType) {\n    context.setResult([context.left, context.right]).exit();\n    return;\n  }\n  if (context.leftType === 'boolean' || context.leftType === 'number') {\n    context.setResult([context.left, context.right]).exit();\n    return;\n  }\n  if (context.leftType === 'object') {\n    context.leftIsArray = isArray(context.left);\n  }\n  if (context.rightType === 'object') {\n    context.rightIsArray = isArray(context.right);\n  }\n  if (context.leftIsArray !== context.rightIsArray) {\n    context.setResult([context.left, context.right]).exit();\n    return;\n  }\n\n  if (context.left instanceof RegExp) {\n    if (context.right instanceof RegExp) {\n      context\n        .setResult([context.left.toString(), context.right.toString()])\n        .exit();\n    } else {\n      context.setResult([context.left, context.right]).exit();\n    }\n  }\n};\ndiffFilter.filterName = 'trivial';\n\nexport const patchFilter = function trivialMatchesPatchFilter(context) {\n  if (typeof context.delta === 'undefined') {\n    context.setResult(context.left).exit();\n    return;\n  }\n  context.nested = !isArray(context.delta);\n  if (context.nested) {\n    return;\n  }\n  if (context.delta.length === 1) {\n    context.setResult(context.delta[0]).exit();\n    return;\n  }\n  if (context.delta.length === 2) {\n    if (context.left instanceof RegExp) {\n      const regexArgs = /^\\/(.*)\\/([gimyu]+)$/.exec(context.delta[1]);\n      if (regexArgs) {\n        context.setResult(new RegExp(regexArgs[1], regexArgs[2])).exit();\n        return;\n      }\n    }\n    context.setResult(context.delta[1]).exit();\n    return;\n  }\n  if (context.delta.length === 3 && context.delta[2] === 0) {\n    context.setResult(undefined).exit();\n  }\n};\npatchFilter.filterName = 'trivial';\n\nexport const reverseFilter = function trivialReferseFilter(context) {\n  if (typeof context.delta === 'undefined') {\n    context.setResult(context.delta).exit();\n    return;\n  }\n  context.nested = !isArray(context.delta);\n  if (context.nested) {\n    return;\n  }\n  if (context.delta.length === 1) {\n    context.setResult([context.delta[0], 0, 0]).exit();\n    return;\n  }\n  if (context.delta.length === 2) {\n    context.setResult([context.delta[1], context.delta[0]]).exit();\n    return;\n  }\n  if (context.delta.length === 3 && context.delta[2] === 0) {\n    context.setResult([context.delta[0]]).exit();\n  }\n};\nreverseFilter.filterName = 'trivial';\n", "import DiffContext from '../contexts/diff';\nimport PatchContext from '../contexts/patch';\nimport ReverseContext from '../contexts/reverse';\n\nexport function collectChildrenDiffFilter(context) {\n  if (!context || !context.children) {\n    return;\n  }\n  const length = context.children.length;\n  let child;\n  let result = context.result;\n  for (let index = 0; index < length; index++) {\n    child = context.children[index];\n    if (typeof child.result === 'undefined') {\n      continue;\n    }\n    result = result || {};\n    result[child.childName] = child.result;\n  }\n  if (result && context.leftIsArray) {\n    result._t = 'a';\n  }\n  context.setResult(result).exit();\n}\ncollectChildrenDiffFilter.filterName = 'collectChildren';\n\nexport function objectsDiffFilter(context) {\n  if (context.leftIsArray || context.leftType !== 'object') {\n    return;\n  }\n\n  let name;\n  let child;\n  const propertyFilter = context.options.propertyFilter;\n  for (name in context.left) {\n    if (!Object.prototype.hasOwnProperty.call(context.left, name)) {\n      continue;\n    }\n    if (propertyFilter && !propertyFilter(name, context)) {\n      continue;\n    }\n    child = new DiffContext(context.left[name], context.right[name]);\n    context.push(child, name);\n  }\n  for (name in context.right) {\n    if (!Object.prototype.hasOwnProperty.call(context.right, name)) {\n      continue;\n    }\n    if (propertyFilter && !propertyFilter(name, context)) {\n      continue;\n    }\n    if (typeof context.left[name] === 'undefined') {\n      child = new DiffContext(undefined, context.right[name]);\n      context.push(child, name);\n    }\n  }\n\n  if (!context.children || context.children.length === 0) {\n    context.setResult(undefined).exit();\n    return;\n  }\n  context.exit();\n}\nobjectsDiffFilter.filterName = 'objects';\n\nexport const patchFilter = function nestedPatchFilter(context) {\n  if (!context.nested) {\n    return;\n  }\n  if (context.delta._t) {\n    return;\n  }\n  let name;\n  let child;\n  for (name in context.delta) {\n    child = new PatchContext(context.left[name], context.delta[name]);\n    context.push(child, name);\n  }\n  context.exit();\n};\npatchFilter.filterName = 'objects';\n\nexport const collectChildrenPatchFilter = function collectChildrenPatchFilter(\n  context,\n) {\n  if (!context || !context.children) {\n    return;\n  }\n  if (context.delta._t) {\n    return;\n  }\n  const length = context.children.length;\n  let child;\n  for (let index = 0; index < length; index++) {\n    child = context.children[index];\n    if (\n      Object.prototype.hasOwnProperty.call(context.left, child.childName) &&\n      child.result === undefined\n    ) {\n      delete context.left[child.childName];\n    } else if (context.left[child.childName] !== child.result) {\n      context.left[child.childName] = child.result;\n    }\n  }\n  context.setResult(context.left).exit();\n};\ncollectChildrenPatchFilter.filterName = 'collectChildren';\n\nexport const reverseFilter = function nestedReverseFilter(context) {\n  if (!context.nested) {\n    return;\n  }\n  if (context.delta._t) {\n    return;\n  }\n  let name;\n  let child;\n  for (name in context.delta) {\n    child = new ReverseContext(context.delta[name]);\n    context.push(child, name);\n  }\n  context.exit();\n};\nreverseFilter.filterName = 'objects';\n\nexport function collectChildrenReverseFilter(context) {\n  if (!context || !context.children) {\n    return;\n  }\n  if (context.delta._t) {\n    return;\n  }\n  const length = context.children.length;\n  let child;\n  const delta = {};\n  for (let index = 0; index < length; index++) {\n    child = context.children[index];\n    if (delta[child.childName] !== child.result) {\n      delta[child.childName] = child.result;\n    }\n  }\n  context.setResult(delta).exit();\n}\ncollectChildrenReverseFilter.filterName = 'collectChildren';\n", "/*\n\nLCS implementation that supports arrays or strings\n\nreference: http://en.wikipedia.org/wiki/Longest_common_subsequence_problem\n\n*/\n\nconst defaultMatch = function(array1, array2, index1, index2) {\n  return array1[index1] === array2[index2];\n};\n\nconst lengthMatrix = function(array1, array2, match, context) {\n  const len1 = array1.length;\n  const len2 = array2.length;\n  let x, y;\n\n  // initialize empty matrix of len1+1 x len2+1\n  const matrix = [len1 + 1];\n  for (x = 0; x < len1 + 1; x++) {\n    matrix[x] = [len2 + 1];\n    for (y = 0; y < len2 + 1; y++) {\n      matrix[x][y] = 0;\n    }\n  }\n  matrix.match = match;\n  // save sequence lengths for each coordinate\n  for (x = 1; x < len1 + 1; x++) {\n    for (y = 1; y < len2 + 1; y++) {\n      if (match(array1, array2, x - 1, y - 1, context)) {\n        matrix[x][y] = matrix[x - 1][y - 1] + 1;\n      } else {\n        matrix[x][y] = Math.max(matrix[x - 1][y], matrix[x][y - 1]);\n      }\n    }\n  }\n  return matrix;\n};\n\nconst backtrack = function(matrix, array1, array2, context) {\n  let index1 = array1.length;\n  let index2 = array2.length;\n  const subsequence = {\n    sequence: [],\n    indices1: [],\n    indices2: [],\n  };\n\n  while (index1 !== 0 && index2 !== 0) {\n    const sameLetter =\n      matrix.match(array1, array2, index1 - 1, index2 - 1, context);\n    if (sameLetter) {\n      subsequence.sequence.unshift(array1[index1 - 1]);\n      subsequence.indices1.unshift(index1 - 1);\n      subsequence.indices2.unshift(index2 - 1);\n      --index1;\n      --index2;\n    } else {\n      const valueAtMatrixAbove = matrix[index1][index2 - 1];\n      const valueAtMatrixLeft = matrix[index1 - 1][index2];\n      if (valueAtMatrixAbove > valueAtMatrixLeft) {\n        --index2;\n      } else {\n        --index1;\n      }\n    }\n  }\n  return subsequence;\n};\n\nconst get = function(array1, array2, match, context) {\n  const innerContext = context || {};\n  const matrix = lengthMatrix(\n    array1,\n    array2,\n    match || defaultMatch,\n    innerContext,\n  );\n  const result = backtrack(\n    matrix,\n    array1,\n    array2,\n    innerContext,\n  );\n  if (typeof array1 === 'string' && typeof array2 === 'string') {\n    result.sequence = result.sequence.join('');\n  }\n  return result;\n};\n\nexport default {\n  get,\n};\n", "import DiffContext from '../contexts/diff';\nimport PatchContext from '../contexts/patch';\nimport ReverseContext from '../contexts/reverse';\n\nimport lcs from './lcs';\n\nconst ARRAY_MOVE = 3;\n\nconst isArray =\n  typeof Array.isArray === 'function' ? Array.isArray : a => a instanceof Array;\n\nconst arrayIndexOf =\n  typeof Array.prototype.indexOf === 'function'\n    ? (array, item) => array.indexOf(item)\n    : (array, item) => {\n        const length = array.length;\n        for (let i = 0; i < length; i++) {\n          if (array[i] === item) {\n            return i;\n          }\n        }\n        return -1;\n      };\n\nfunction arraysHaveMatchByRef(array1, array2, len1, len2) {\n  for (let index1 = 0; index1 < len1; index1++) {\n    const val1 = array1[index1];\n    for (let index2 = 0; index2 < len2; index2++) {\n      const val2 = array2[index2];\n      if (index1 !== index2 && val1 === val2) {\n        return true;\n      }\n    }\n  }\n}\n\nfunction matchItems(array1, array2, index1, index2, context) {\n  const value1 = array1[index1];\n  const value2 = array2[index2];\n  if (value1 === value2) {\n    return true;\n  }\n  if (typeof value1 !== 'object' || typeof value2 !== 'object') {\n    return false;\n  }\n  const objectHash = context.objectHash;\n  if (!objectHash) {\n    // no way to match objects was provided, try match by position\n    return context.matchByPosition && index1 === index2;\n  }\n  let hash1;\n  let hash2;\n  if (typeof index1 === 'number') {\n    context.hashCache1 = context.hashCache1 || [];\n    hash1 = context.hashCache1[index1];\n    if (typeof hash1 === 'undefined') {\n      context.hashCache1[index1] = hash1 = objectHash(value1, index1);\n    }\n  } else {\n    hash1 = objectHash(value1);\n  }\n  if (typeof hash1 === 'undefined') {\n    return false;\n  }\n  if (typeof index2 === 'number') {\n    context.hashCache2 = context.hashCache2 || [];\n    hash2 = context.hashCache2[index2];\n    if (typeof hash2 === 'undefined') {\n      context.hashCache2[index2] = hash2 = objectHash(value2, index2);\n    }\n  } else {\n    hash2 = objectHash(value2);\n  }\n  if (typeof hash2 === 'undefined') {\n    return false;\n  }\n  return hash1 === hash2;\n}\n\nexport const diffFilter = function arraysDiffFilter(context) {\n  if (!context.leftIsArray) {\n    return;\n  }\n\n  const matchContext = {\n    objectHash: context.options && context.options.objectHash,\n    matchByPosition: context.options && context.options.matchByPosition,\n  };\n  let commonHead = 0;\n  let commonTail = 0;\n  let index;\n  let index1;\n  let index2;\n  const array1 = context.left;\n  const array2 = context.right;\n  const len1 = array1.length;\n  const len2 = array2.length;\n\n  let child;\n\n  if (\n    len1 > 0 &&\n    len2 > 0 &&\n    !matchContext.objectHash &&\n    typeof matchContext.matchByPosition !== 'boolean'\n  ) {\n    matchContext.matchByPosition = !arraysHaveMatchByRef(\n      array1,\n      array2,\n      len1,\n      len2,\n    );\n  }\n\n  // separate common head\n  while (\n    commonHead < len1 &&\n    commonHead < len2 &&\n    matchItems(array1, array2, commonHead, commonHead, matchContext)\n  ) {\n    index = commonHead;\n    child = new DiffContext(context.left[index], context.right[index]);\n    context.push(child, index);\n    commonHead++;\n  }\n  // separate common tail\n  while (\n    commonTail + commonHead < len1 &&\n    commonTail + commonHead < len2 &&\n    matchItems(\n      array1,\n      array2,\n      len1 - 1 - commonTail,\n      len2 - 1 - commonTail,\n      matchContext,\n    )\n  ) {\n    index1 = len1 - 1 - commonTail;\n    index2 = len2 - 1 - commonTail;\n    child = new DiffContext(context.left[index1], context.right[index2]);\n    context.push(child, index2);\n    commonTail++;\n  }\n  let result;\n  if (commonHead + commonTail === len1) {\n    if (len1 === len2) {\n      // arrays are identical\n      context.setResult(undefined).exit();\n      return;\n    }\n    // trivial case, a block (1 or more consecutive items) was added\n    result = result || {\n      _t: 'a',\n    };\n    for (index = commonHead; index < len2 - commonTail; index++) {\n      result[index] = [array2[index]];\n    }\n    context.setResult(result).exit();\n    return;\n  }\n  if (commonHead + commonTail === len2) {\n    // trivial case, a block (1 or more consecutive items) was removed\n    result = result || {\n      _t: 'a',\n    };\n    for (index = commonHead; index < len1 - commonTail; index++) {\n      result[`_${index}`] = [array1[index], 0, 0];\n    }\n    context.setResult(result).exit();\n    return;\n  }\n  // reset hash cache\n  delete matchContext.hashCache1;\n  delete matchContext.hashCache2;\n\n  // diff is not trivial, find the LCS (Longest Common Subsequence)\n  const trimmed1 = array1.slice(commonHead, len1 - commonTail);\n  const trimmed2 = array2.slice(commonHead, len2 - commonTail);\n  const seq = lcs.get(trimmed1, trimmed2, matchItems, matchContext);\n  const removedItems = [];\n  result = result || {\n    _t: 'a',\n  };\n  for (index = commonHead; index < len1 - commonTail; index++) {\n    if (arrayIndexOf(seq.indices1, index - commonHead) < 0) {\n      // removed\n      result[`_${index}`] = [array1[index], 0, 0];\n      removedItems.push(index);\n    }\n  }\n\n  let detectMove = true;\n  if (\n    context.options &&\n    context.options.arrays &&\n    context.options.arrays.detectMove === false\n  ) {\n    detectMove = false;\n  }\n  let includeValueOnMove = false;\n  if (\n    context.options &&\n    context.options.arrays &&\n    context.options.arrays.includeValueOnMove\n  ) {\n    includeValueOnMove = true;\n  }\n\n  const removedItemsLength = removedItems.length;\n  for (index = commonHead; index < len2 - commonTail; index++) {\n    const indexOnArray2 = arrayIndexOf(seq.indices2, index - commonHead);\n    if (indexOnArray2 < 0) {\n      // added, try to match with a removed item and register as position move\n      let isMove = false;\n      if (detectMove && removedItemsLength > 0) {\n        for (\n          let removeItemIndex1 = 0;\n          removeItemIndex1 < removedItemsLength;\n          removeItemIndex1++\n        ) {\n          index1 = removedItems[removeItemIndex1];\n          if (\n            matchItems(\n              trimmed1,\n              trimmed2,\n              index1 - commonHead,\n              index - commonHead,\n              matchContext,\n            )\n          ) {\n            // store position move as: [originalValue, newPosition, ARRAY_MOVE]\n            result[`_${index1}`].splice(1, 2, index, ARRAY_MOVE);\n            if (!includeValueOnMove) {\n              // don't include moved value on diff, to save bytes\n              result[`_${index1}`][0] = '';\n            }\n\n            index2 = index;\n            child = new DiffContext(\n              context.left[index1],\n              context.right[index2],\n            );\n            context.push(child, index2);\n            removedItems.splice(removeItemIndex1, 1);\n            isMove = true;\n            break;\n          }\n        }\n      }\n      if (!isMove) {\n        // added\n        result[index] = [array2[index]];\n      }\n    } else {\n      // match, do inner diff\n      index1 = seq.indices1[indexOnArray2] + commonHead;\n      index2 = seq.indices2[indexOnArray2] + commonHead;\n      child = new DiffContext(context.left[index1], context.right[index2]);\n      context.push(child, index2);\n    }\n  }\n\n  context.setResult(result).exit();\n};\ndiffFilter.filterName = 'arrays';\n\nconst compare = {\n  numerically(a, b) {\n    return a - b;\n  },\n  numericallyBy(name) {\n    return (a, b) => a[name] - b[name];\n  },\n};\n\nexport const patchFilter = function nestedPatchFilter(context) {\n  if (!context.nested) {\n    return;\n  }\n  if (context.delta._t !== 'a') {\n    return;\n  }\n  let index;\n  let index1;\n\n  const delta = context.delta;\n  const array = context.left;\n\n  // first, separate removals, insertions and modifications\n  let toRemove = [];\n  let toInsert = [];\n  const toModify = [];\n  for (index in delta) {\n    if (index !== '_t') {\n      if (index[0] === '_') {\n        // removed item from original array\n        if (delta[index][2] === 0 || delta[index][2] === ARRAY_MOVE) {\n          toRemove.push(parseInt(index.slice(1), 10));\n        } else {\n          throw new Error(\n            'only removal or move can be applied at original array indices,' +\n              ` invalid diff type: ${delta[index][2]}`,\n          );\n        }\n      } else {\n        if (delta[index].length === 1) {\n          // added item at new array\n          toInsert.push({\n            index: parseInt(index, 10),\n            value: delta[index][0],\n          });\n        } else {\n          // modified item at new array\n          toModify.push({\n            index: parseInt(index, 10),\n            delta: delta[index],\n          });\n        }\n      }\n    }\n  }\n\n  // remove items, in reverse order to avoid sawing our own floor\n  toRemove = toRemove.sort(compare.numerically);\n  for (index = toRemove.length - 1; index >= 0; index--) {\n    index1 = toRemove[index];\n    const indexDiff = delta[`_${index1}`];\n    const removedValue = array.splice(index1, 1)[0];\n    if (indexDiff[2] === ARRAY_MOVE) {\n      // reinsert later\n      toInsert.push({\n        index: indexDiff[1],\n        value: removedValue,\n      });\n    }\n  }\n\n  // insert items, in reverse order to avoid moving our own floor\n  toInsert = toInsert.sort(compare.numericallyBy('index'));\n  const toInsertLength = toInsert.length;\n  for (index = 0; index < toInsertLength; index++) {\n    const insertion = toInsert[index];\n    array.splice(insertion.index, 0, insertion.value);\n  }\n\n  // apply modifications\n  const toModifyLength = toModify.length;\n  let child;\n  if (toModifyLength > 0) {\n    for (index = 0; index < toModifyLength; index++) {\n      const modification = toModify[index];\n      child = new PatchContext(\n        context.left[modification.index],\n        modification.delta,\n      );\n      context.push(child, modification.index);\n    }\n  }\n\n  if (!context.children) {\n    context.setResult(context.left).exit();\n    return;\n  }\n  context.exit();\n};\npatchFilter.filterName = 'arrays';\n\nexport const collectChildrenPatchFilter = function collectChildrenPatchFilter(\n  context,\n) {\n  if (!context || !context.children) {\n    return;\n  }\n  if (context.delta._t !== 'a') {\n    return;\n  }\n  const length = context.children.length;\n  let child;\n  for (let index = 0; index < length; index++) {\n    child = context.children[index];\n    context.left[child.childName] = child.result;\n  }\n  context.setResult(context.left).exit();\n};\ncollectChildrenPatchFilter.filterName = 'arraysCollectChildren';\n\nexport const reverseFilter = function arraysReverseFilter(context) {\n  if (!context.nested) {\n    if (context.delta[2] === ARRAY_MOVE) {\n      context.newName = `_${context.delta[1]}`;\n      context\n        .setResult([\n          context.delta[0],\n          parseInt(context.childName.substr(1), 10),\n          ARRAY_MOVE,\n        ])\n        .exit();\n    }\n    return;\n  }\n  if (context.delta._t !== 'a') {\n    return;\n  }\n  let name;\n  let child;\n  for (name in context.delta) {\n    if (name === '_t') {\n      continue;\n    }\n    child = new ReverseContext(context.delta[name]);\n    context.push(child, name);\n  }\n  context.exit();\n};\nreverseFilter.filterName = 'arrays';\n\nconst reverseArrayDeltaIndex = (delta, index, itemDelta) => {\n  if (typeof index === 'string' && index[0] === '_') {\n    return parseInt(index.substr(1), 10);\n  } else if (isArray(itemDelta) && itemDelta[2] === 0) {\n    return `_${index}`;\n  }\n\n  let reverseIndex = +index;\n  for (const deltaIndex in delta) {\n    const deltaItem = delta[deltaIndex];\n    if (isArray(deltaItem)) {\n      if (deltaItem[2] === ARRAY_MOVE) {\n        const moveFromIndex = parseInt(deltaIndex.substr(1), 10);\n        const moveToIndex = deltaItem[1];\n        if (moveToIndex === +index) {\n          return moveFromIndex;\n        }\n        if (moveFromIndex <= reverseIndex && moveToIndex > reverseIndex) {\n          reverseIndex++;\n        } else if (\n          moveFromIndex >= reverseIndex &&\n          moveToIndex < reverseIndex\n        ) {\n          reverseIndex--;\n        }\n      } else if (deltaItem[2] === 0) {\n        const deleteIndex = parseInt(deltaIndex.substr(1), 10);\n        if (deleteIndex <= reverseIndex) {\n          reverseIndex++;\n        }\n      } else if (deltaItem.length === 1 && deltaIndex <= reverseIndex) {\n        reverseIndex--;\n      }\n    }\n  }\n\n  return reverseIndex;\n};\n\nexport function collectChildrenReverseFilter(context) {\n  if (!context || !context.children) {\n    return;\n  }\n  if (context.delta._t !== 'a') {\n    return;\n  }\n  const length = context.children.length;\n  let child;\n  const delta = {\n    _t: 'a',\n  };\n\n  for (let index = 0; index < length; index++) {\n    child = context.children[index];\n    let name = child.newName;\n    if (typeof name === 'undefined') {\n      name = reverseArrayDeltaIndex(\n        context.delta,\n        child.childName,\n        child.result,\n      );\n    }\n    if (delta[name] !== child.result) {\n      delta[name] = child.result;\n    }\n  }\n  context.setResult(delta).exit();\n}\ncollectChildrenReverseFilter.filterName = 'arraysCollectChildren';\n", "export const diffFilter = function datesDiffFilter(context) {\n  if (context.left instanceof Date) {\n    if (context.right instanceof Date) {\n      if (context.left.getTime() !== context.right.getTime()) {\n        context.setResult([context.left, context.right]);\n      } else {\n        context.setResult(undefined);\n      }\n    } else {\n      context.setResult([context.left, context.right]);\n    }\n    context.exit();\n  } else if (context.right instanceof Date) {\n    context.setResult([context.left, context.right]).exit();\n  }\n};\ndiffFilter.filterName = 'dates';\n", "/* global diff_match_patch */\nimport dmp from 'diff-match-patch';\n\nconst TEXT_DIFF = 2;\nconst DEFAULT_MIN_LENGTH = 60;\nlet cachedDiffPatch = null;\n\nconst getDiffMatchPatch = function(required) {\n  /* jshint camelcase: false */\n\n  if (!cachedDiffPatch) {\n    let instance;\n    /* eslint-disable camelcase, new-cap */\n    if (typeof diff_match_patch !== 'undefined') {\n      // already loaded, probably a browser\n      instance =\n        typeof diff_match_patch === 'function'\n          ? new diff_match_patch()\n          : new diff_match_patch.diff_match_patch();\n    } else if (dmp) {\n      try {\n        instance = dmp && new dmp();\n      } catch (err) {\n        instance = null;\n      }\n    }\n    /* eslint-enable camelcase, new-cap */\n    if (!instance) {\n      if (!required) {\n        return null;\n      }\n      const error = new Error('text diff_match_patch library not found');\n      // eslint-disable-next-line camelcase\n      error.diff_match_patch_not_found = true;\n      throw error;\n    }\n    cachedDiffPatch = {\n      diff: function(txt1, txt2) {\n        return instance.patch_toText(instance.patch_make(txt1, txt2));\n      },\n      patch: function(txt1, patch) {\n        const results = instance.patch_apply(\n          instance.patch_fromText(patch),\n          txt1,\n        );\n        for (let i = 0; i < results[1].length; i++) {\n          if (!results[1][i]) {\n            const error = new Error('text patch failed');\n            error.textPatchFailed = true;\n          }\n        }\n        return results[0];\n      },\n    };\n  }\n  return cachedDiffPatch;\n};\n\nexport const diffFilter = function textsDiffFilter(context) {\n  if (context.leftType !== 'string') {\n    return;\n  }\n  const minLength =\n    (context.options &&\n      context.options.textDiff &&\n      context.options.textDiff.minLength) ||\n    DEFAULT_MIN_LENGTH;\n  if (context.left.length < minLength || context.right.length < minLength) {\n    context.setResult([context.left, context.right]).exit();\n    return;\n  }\n  // large text, try to use a text-diff algorithm\n  const diffMatchPatch = getDiffMatchPatch();\n  if (!diffMatchPatch) {\n    // diff-match-patch library not available,\n    // fallback to regular string replace\n    context.setResult([context.left, context.right]).exit();\n    return;\n  }\n  const diff = diffMatchPatch.diff;\n  context.setResult([diff(context.left, context.right), 0, TEXT_DIFF]).exit();\n};\ndiffFilter.filterName = 'texts';\n\nexport const patchFilter = function textsPatchFilter(context) {\n  if (context.nested) {\n    return;\n  }\n  if (context.delta[2] !== TEXT_DIFF) {\n    return;\n  }\n\n  // text-diff, use a text-patch algorithm\n  const patch = getDiffMatchPatch(true).patch;\n  context.setResult(patch(context.left, context.delta[0])).exit();\n};\npatchFilter.filterName = 'texts';\n\nconst textDeltaReverse = function(delta) {\n  let i;\n  let l;\n  let line;\n  let lineTmp;\n  let header = null;\n  const headerRegex = /^@@ +-(\\d+),(\\d+) +\\+(\\d+),(\\d+) +@@$/;\n  let lineHeader;\n  const lines = delta.split('\\n');\n  for (i = 0, l = lines.length; i < l; i++) {\n    line = lines[i];\n    const lineStart = line.slice(0, 1);\n    if (lineStart === '@') {\n      header = headerRegex.exec(line);\n      lineHeader = i;\n\n      // fix header\n      lines[lineHeader] =\n        '@@ -' +\n        header[3] +\n        ',' +\n        header[4] +\n        ' +' +\n        header[1] +\n        ',' +\n        header[2] +\n        ' @@';\n    } else if (lineStart === '+') {\n      lines[i] = '-' + lines[i].slice(1);\n      if (lines[i - 1].slice(0, 1) === '+') {\n        // swap lines to keep default order (-+)\n        lineTmp = lines[i];\n        lines[i] = lines[i - 1];\n        lines[i - 1] = lineTmp;\n      }\n    } else if (lineStart === '-') {\n      lines[i] = '+' + lines[i].slice(1);\n    }\n  }\n  return lines.join('\\n');\n};\n\nexport const reverseFilter = function textsReverseFilter(context) {\n  if (context.nested) {\n    return;\n  }\n  if (context.delta[2] !== TEXT_DIFF) {\n    return;\n  }\n\n  // text-diff, use a text-diff algorithm\n  context.setResult([textDeltaReverse(context.delta[0]), 0, TEXT_DIFF]).exit();\n};\nreverseFilter.filterName = 'texts';\n", "import Processor from './processor';\nimport Pipe from './pipe';\nimport DiffContext from './contexts/diff';\nimport PatchContext from './contexts/patch';\nimport ReverseContext from './contexts/reverse';\nimport clone from './clone';\n\nimport * as trivial from './filters/trivial';\nimport * as nested from './filters/nested';\nimport * as arrays from './filters/arrays';\nimport * as dates from './filters/dates';\nimport * as texts from './filters/texts';\n\nclass DiffPatcher {\n  constructor(options) {\n    this.processor = new Processor(options);\n    this.processor.pipe(\n      new Pipe('diff')\n        .append(\n          nested.collectChildrenDiffFilter,\n          trivial.diffFilter,\n          dates.diffFilter,\n          texts.diffFilter,\n          nested.objectsDiffFilter,\n          arrays.diffFilter,\n        )\n        .shouldHaveResult(),\n    );\n    this.processor.pipe(\n      new Pipe('patch')\n        .append(\n          nested.collectChildrenPatchFilter,\n          arrays.collectChildrenPatchFilter,\n          trivial.patchFilter,\n          texts.patchFilter,\n          nested.patchFilter,\n          arrays.patchFilter,\n        )\n        .shouldHaveResult(),\n    );\n    this.processor.pipe(\n      new Pipe('reverse')\n        .append(\n          nested.collectChildrenReverseFilter,\n          arrays.collectChildrenReverseFilter,\n          trivial.reverseFilter,\n          texts.reverseFilter,\n          nested.reverseFilter,\n          arrays.reverseFilter,\n        )\n        .shouldHaveResult(),\n    );\n  }\n\n  options(...args) {\n    return this.processor.options(...args);\n  }\n\n  diff(left, right) {\n    return this.processor.process(new DiffContext(left, right));\n  }\n\n  patch(left, delta) {\n    return this.processor.process(new PatchContext(left, delta));\n  }\n\n  reverse(delta) {\n    return this.processor.process(new ReverseContext(delta));\n  }\n\n  unpatch(right, delta) {\n    return this.patch(right, this.reverse(delta));\n  }\n\n  clone(value) {\n    return clone(value);\n  }\n}\n\nexport default DiffPatcher;\n", "const isArray =\n  typeof Array.isArray === 'function' ? Array.isArray : a => a instanceof Array;\n\nconst getObjectKeys =\n  typeof Object.keys === 'function'\n    ? obj => Object.keys(obj)\n    : obj => {\n      const names = [];\n      for (const property in obj) {\n        if (Object.prototype.hasOwnProperty.call(obj, property)) {\n          names.push(property);\n        }\n      }\n      return names;\n    };\n\nconst trimUnderscore = str => {\n  if (str.substr(0, 1) === '_') {\n    return str.slice(1);\n  }\n  return str;\n};\n\nconst arrayKeyToSortNumber = key => {\n  if (key === '_t') {\n    return -1;\n  } else {\n    if (key.substr(0, 1) === '_') {\n      return parseInt(key.slice(1), 10);\n    } else {\n      return parseInt(key, 10) + 0.1;\n    }\n  }\n};\n\nconst arrayKeyComparer = (key1, key2) =>\n  arrayKeyToSortNumber(key1) - arrayKeyToSortNumber(key2);\n\nclass BaseFormatter {\n  format(delta, left) {\n    const context = {};\n    this.prepareContext(context);\n    this.recurse(context, delta, left);\n    return this.finalize(context);\n  }\n\n  prepareContext(context) {\n    context.buffer = [];\n    context.out = function(...args) {\n      this.buffer.push(...args);\n    };\n  }\n\n  typeFormattterNotFound(context, deltaType) {\n    throw new Error(`cannot format delta type: ${deltaType}`);\n  }\n\n  typeFormattterErrorFormatter(context, err) {\n    return err.toString();\n  }\n\n  finalize({ buffer }) {\n    if (isArray(buffer)) {\n      return buffer.join('');\n    }\n  }\n\n  recurse(context, delta, left, key, leftKey, movedFrom, isLast) {\n    const useMoveOriginHere = delta && movedFrom;\n    const leftValue = useMoveOriginHere ? movedFrom.value : left;\n\n    if (typeof delta === 'undefined' && typeof key === 'undefined') {\n      return undefined;\n    }\n\n    const type = this.getDeltaType(delta, movedFrom);\n    const nodeType =\n      type === 'node' ? (delta._t === 'a' ? 'array' : 'object') : '';\n\n    if (typeof key !== 'undefined') {\n      this.nodeBegin(context, key, leftKey, type, nodeType, isLast);\n    } else {\n      this.rootBegin(context, type, nodeType);\n    }\n\n    let typeFormattter;\n    try {\n      typeFormattter =\n        this[`format_${type}`] || this.typeFormattterNotFound(context, type);\n      typeFormattter.call(\n        this,\n        context,\n        delta,\n        leftValue,\n        key,\n        leftKey,\n        movedFrom,\n      );\n    } catch (err) {\n      this.typeFormattterErrorFormatter(\n        context,\n        err,\n        delta,\n        leftValue,\n        key,\n        leftKey,\n        movedFrom,\n      );\n      if (typeof console !== 'undefined' && console.error) {\n        console.error(err.stack);\n      }\n    }\n\n    if (typeof key !== 'undefined') {\n      this.nodeEnd(context, key, leftKey, type, nodeType, isLast);\n    } else {\n      this.rootEnd(context, type, nodeType);\n    }\n  }\n\n  formatDeltaChildren(context, delta, left) {\n    const self = this;\n    this.forEachDeltaKey(delta, left, (key, leftKey, movedFrom, isLast) => {\n      self.recurse(\n        context,\n        delta[key],\n        left ? left[leftKey] : undefined,\n        key,\n        leftKey,\n        movedFrom,\n        isLast,\n      );\n    });\n  }\n\n  forEachDeltaKey(delta, left, fn) {\n    const keys = getObjectKeys(delta);\n    const arrayKeys = delta._t === 'a';\n    const moveDestinations = {};\n    let name;\n    if (typeof left !== 'undefined') {\n      for (name in left) {\n        if (Object.prototype.hasOwnProperty.call(left, name)) {\n          if (\n            typeof delta[name] === 'undefined' &&\n            (!arrayKeys || typeof delta[`_${name}`] === 'undefined')\n          ) {\n            keys.push(name);\n          }\n        }\n      }\n    }\n    // look for move destinations\n    for (name in delta) {\n      if (Object.prototype.hasOwnProperty.call(delta, name)) {\n        const value = delta[name];\n        if (isArray(value) && value[2] === 3) {\n          moveDestinations[value[1].toString()] = {\n            key: name,\n            value: left && left[parseInt(name.substr(1))],\n          };\n          if (this.includeMoveDestinations !== false) {\n            if (\n              typeof left === 'undefined' &&\n              typeof delta[value[1]] === 'undefined'\n            ) {\n              keys.push(value[1].toString());\n            }\n          }\n        }\n      }\n    }\n    if (arrayKeys) {\n      keys.sort(arrayKeyComparer);\n    } else {\n      keys.sort();\n    }\n    for (let index = 0, length = keys.length; index < length; index++) {\n      const key = keys[index];\n      if (arrayKeys && key === '_t') {\n        continue;\n      }\n      const leftKey = arrayKeys\n        ? typeof key === 'number' ? key : parseInt(trimUnderscore(key), 10)\n        : key;\n      const isLast = index === length - 1;\n      fn(key, leftKey, moveDestinations[leftKey], isLast);\n    }\n  }\n\n  getDeltaType(delta, movedFrom) {\n    if (typeof delta === 'undefined') {\n      if (typeof movedFrom !== 'undefined') {\n        return 'movedestination';\n      }\n      return 'unchanged';\n    }\n    if (isArray(delta)) {\n      if (delta.length === 1) {\n        return 'added';\n      }\n      if (delta.length === 2) {\n        return 'modified';\n      }\n      if (delta.length === 3 && delta[2] === 0) {\n        return 'deleted';\n      }\n      if (delta.length === 3 && delta[2] === 2) {\n        return 'textdiff';\n      }\n      if (delta.length === 3 && delta[2] === 3) {\n        return 'moved';\n      }\n    } else if (typeof delta === 'object') {\n      return 'node';\n    }\n    return 'unknown';\n  }\n\n  parseTextDiff(value) {\n    const output = [];\n    const lines = value.split('\\n@@ ');\n    for (let i = 0, l = lines.length; i < l; i++) {\n      const line = lines[i];\n      const lineOutput = {\n        pieces: [],\n      };\n      const location = /^(?:@@ )?[-+]?(\\d+),(\\d+)/.exec(line).slice(1);\n      lineOutput.location = {\n        line: location[0],\n        chr: location[1],\n      };\n      const pieces = line.split('\\n').slice(1);\n      for (\n        let pieceIndex = 0, piecesLength = pieces.length;\n        pieceIndex < piecesLength;\n        pieceIndex++\n      ) {\n        const piece = pieces[pieceIndex];\n        if (!piece.length) {\n          continue;\n        }\n        const pieceOutput = {\n          type: 'context',\n        };\n        if (piece.substr(0, 1) === '+') {\n          pieceOutput.type = 'added';\n        } else if (piece.substr(0, 1) === '-') {\n          pieceOutput.type = 'deleted';\n        }\n        pieceOutput.text = piece.slice(1);\n        lineOutput.pieces.push(pieceOutput);\n      }\n      output.push(lineOutput);\n    }\n    return output;\n  }\n}\n\nexport default BaseFormatter;\n", "import BaseFormatter from './base';\n\nclass HtmlFormatter extends BaseFormatter {\n  typeFormattterErrorFormatter(context, err) {\n    context.out(`<pre class=\"jsondiffpatch-error\">${err}</pre>`);\n  }\n\n  formatValue(context, value) {\n    context.out(`<pre>${htmlEscape(JSON.stringify(value, null, 2))}</pre>`);\n  }\n\n  formatTextDiffString(context, value) {\n    const lines = this.parseTextDiff(value);\n    context.out('<ul class=\"jsondiffpatch-textdiff\">');\n    for (let i = 0, l = lines.length; i < l; i++) {\n      const line = lines[i];\n      context.out(\n        '<li><div class=\"jsondiffpatch-textdiff-location\">' +\n          `<span class=\"jsondiffpatch-textdiff-line-number\">${\n            line.location.line\n          }</span><span class=\"jsondiffpatch-textdiff-char\">${\n            line.location.chr\n          }</span></div><div class=\"jsondiffpatch-textdiff-line\">`,\n      );\n      const pieces = line.pieces;\n      for (\n        let pieceIndex = 0, piecesLength = pieces.length;\n        pieceIndex < piecesLength;\n        pieceIndex++\n      ) {\n        /* global decodeURI */\n        const piece = pieces[pieceIndex];\n        context.out(\n          `<span class=\"jsondiffpatch-textdiff-${piece.type}\">${htmlEscape(\n            decodeURI(piece.text),\n          )}</span>`,\n        );\n      }\n      context.out('</div></li>');\n    }\n    context.out('</ul>');\n  }\n\n  rootBegin(context, type, nodeType) {\n    const nodeClass = `jsondiffpatch-${type}${\n      nodeType ? ` jsondiffpatch-child-node-type-${nodeType}` : ''\n    }`;\n    context.out(`<div class=\"jsondiffpatch-delta ${nodeClass}\">`);\n  }\n\n  rootEnd(context) {\n    context.out(\n      `</div>${\n        context.hasArrows\n          ? '<script type=\"text/javascript\">setTimeout(' +\n            `${adjustArrows.toString()},10);</script>`\n          : ''\n      }`,\n    );\n  }\n\n  nodeBegin(context, key, leftKey, type, nodeType) {\n    const nodeClass = `jsondiffpatch-${type}${\n      nodeType ? ` jsondiffpatch-child-node-type-${nodeType}` : ''\n    }`;\n    context.out(\n      `<li class=\"${nodeClass}\" data-key=\"${leftKey}\">` +\n        `<div class=\"jsondiffpatch-property-name\">${leftKey}</div>`,\n    );\n  }\n\n  nodeEnd(context) {\n    context.out('</li>');\n  }\n\n  /* jshint camelcase: false */\n  /* eslint-disable camelcase */\n\n  format_unchanged(context, delta, left) {\n    if (typeof left === 'undefined') {\n      return;\n    }\n    context.out('<div class=\"jsondiffpatch-value\">');\n    this.formatValue(context, left);\n    context.out('</div>');\n  }\n\n  format_movedestination(context, delta, left) {\n    if (typeof left === 'undefined') {\n      return;\n    }\n    context.out('<div class=\"jsondiffpatch-value\">');\n    this.formatValue(context, left);\n    context.out('</div>');\n  }\n\n  format_node(context, delta, left) {\n    // recurse\n    const nodeType = delta._t === 'a' ? 'array' : 'object';\n    context.out(\n      `<ul class=\"jsondiffpatch-node jsondiffpatch-node-type-${nodeType}\">`,\n    );\n    this.formatDeltaChildren(context, delta, left);\n    context.out('</ul>');\n  }\n\n  format_added(context, delta) {\n    context.out('<div class=\"jsondiffpatch-value\">');\n    this.formatValue(context, delta[0]);\n    context.out('</div>');\n  }\n\n  format_modified(context, delta) {\n    context.out('<div class=\"jsondiffpatch-value jsondiffpatch-left-value\">');\n    this.formatValue(context, delta[0]);\n    context.out(\n      '</div>' + '<div class=\"jsondiffpatch-value jsondiffpatch-right-value\">',\n    );\n    this.formatValue(context, delta[1]);\n    context.out('</div>');\n  }\n\n  format_deleted(context, delta) {\n    context.out('<div class=\"jsondiffpatch-value\">');\n    this.formatValue(context, delta[0]);\n    context.out('</div>');\n  }\n\n  format_moved(context, delta) {\n    context.out('<div class=\"jsondiffpatch-value\">');\n    this.formatValue(context, delta[0]);\n    context.out(\n      `</div><div class=\"jsondiffpatch-moved-destination\">${delta[1]}</div>`,\n    );\n\n    // draw an SVG arrow from here to move destination\n    context.out(\n      /* jshint multistr: true */\n      '<div class=\"jsondiffpatch-arrow\" ' +\n        `style=\"position: relative; left: -34px;\">\n          <svg width=\"30\" height=\"60\" ` +\n        `style=\"position: absolute; display: none;\">\n          <defs>\n              <marker id=\"markerArrow\" markerWidth=\"8\" markerHeight=\"8\"\n                 refx=\"2\" refy=\"4\"\n                     orient=\"auto\" markerUnits=\"userSpaceOnUse\">\n                  <path d=\"M1,1 L1,7 L7,4 L1,1\" style=\"fill: #339;\" />\n              </marker>\n          </defs>\n          <path d=\"M30,0 Q-10,25 26,50\"\n            style=\"stroke: #88f; stroke-width: 2px; fill: none; ` +\n        `stroke-opacity: 0.5; marker-end: url(#markerArrow);\"\n          ></path>\n          </svg>\n      </div>`,\n    );\n    context.hasArrows = true;\n  }\n\n  format_textdiff(context, delta) {\n    context.out('<div class=\"jsondiffpatch-value\">');\n    this.formatTextDiffString(context, delta[0]);\n    context.out('</div>');\n  }\n}\n\nfunction htmlEscape(text) {\n  let html = text;\n  const replacements = [\n    [/&/g, '&amp;'],\n    [/</g, '&lt;'],\n    [/>/g, '&gt;'],\n    [/'/g, '&apos;'],\n    [/\"/g, '&quot;'],\n  ];\n  for (let i = 0; i < replacements.length; i++) {\n    html = html.replace(replacements[i][0], replacements[i][1]);\n  }\n  return html;\n}\n\nconst adjustArrows = function jsondiffpatchHtmlFormatterAdjustArrows(nodeArg) {\n  const node = nodeArg || document;\n  const getElementText = ({ textContent, innerText }) =>\n    textContent || innerText;\n  const eachByQuery = (el, query, fn) => {\n    const elems = el.querySelectorAll(query);\n    for (let i = 0, l = elems.length; i < l; i++) {\n      fn(elems[i]);\n    }\n  };\n  const eachChildren = ({ children }, fn) => {\n    for (let i = 0, l = children.length; i < l; i++) {\n      fn(children[i], i);\n    }\n  };\n  eachByQuery(\n    node,\n    '.jsondiffpatch-arrow',\n    ({ parentNode, children, style }) => {\n      const arrowParent = parentNode;\n      const svg = children[0];\n      const path = svg.children[1];\n      svg.style.display = 'none';\n      const destination = getElementText(\n        arrowParent.querySelector('.jsondiffpatch-moved-destination'),\n      );\n      const container = arrowParent.parentNode;\n      let destinationElem;\n      eachChildren(container, child => {\n        if (child.getAttribute('data-key') === destination) {\n          destinationElem = child;\n        }\n      });\n      if (!destinationElem) {\n        return;\n      }\n      try {\n        const distance = destinationElem.offsetTop - arrowParent.offsetTop;\n        svg.setAttribute('height', Math.abs(distance) + 6);\n        style.top = `${-8 + (distance > 0 ? 0 : distance)}px`;\n        const curve =\n          distance > 0\n            ? `M30,0 Q-10,${Math.round(distance / 2)} 26,${distance - 4}`\n            : `M30,${-distance} Q-10,${Math.round(-distance / 2)} 26,4`;\n        path.setAttribute('d', curve);\n        svg.style.display = '';\n      } catch (err) {}\n    },\n  );\n};\n\n/* jshint camelcase: true */\n/* eslint-enable camelcase */\n\nexport const showUnchanged = (show, node, delay) => {\n  const el = node || document.body;\n  const prefix = 'jsondiffpatch-unchanged-';\n  const classes = {\n    showing: `${prefix}showing`,\n    hiding: `${prefix}hiding`,\n    visible: `${prefix}visible`,\n    hidden: `${prefix}hidden`,\n  };\n  const list = el.classList;\n  if (!list) {\n    return;\n  }\n  if (!delay) {\n    list.remove(classes.showing);\n    list.remove(classes.hiding);\n    list.remove(classes.visible);\n    list.remove(classes.hidden);\n    if (show === false) {\n      list.add(classes.hidden);\n    }\n    return;\n  }\n  if (show === false) {\n    list.remove(classes.showing);\n    list.add(classes.visible);\n    setTimeout(() => {\n      list.add(classes.hiding);\n    }, 10);\n  } else {\n    list.remove(classes.hiding);\n    list.add(classes.showing);\n    list.remove(classes.hidden);\n  }\n  const intervalId = setInterval(() => {\n    adjustArrows(el);\n  }, 100);\n  setTimeout(() => {\n    list.remove(classes.showing);\n    list.remove(classes.hiding);\n    if (show === false) {\n      list.add(classes.hidden);\n      list.remove(classes.visible);\n    } else {\n      list.add(classes.visible);\n      list.remove(classes.hidden);\n    }\n    setTimeout(() => {\n      list.remove(classes.visible);\n      clearInterval(intervalId);\n    }, delay + 400);\n  }, delay);\n};\n\nexport const hideUnchanged = (node, delay) => showUnchanged(false, node, delay);\n\nexport default HtmlFormatter;\n\nlet defaultInstance;\n\nexport function format(delta, left) {\n  if (!defaultInstance) {\n    defaultInstance = new HtmlFormatter();\n  }\n  return defaultInstance.format(delta, left);\n}\n", "import BaseFormatter from './base';\n\nclass AnnotatedFormatter extends BaseFormatter {\n  constructor() {\n    super();\n    this.includeMoveDestinations = false;\n  }\n\n  prepareContext(context) {\n    super.prepareContext(context);\n    context.indent = function(levels) {\n      this.indentLevel =\n        (this.indentLevel || 0) + (typeof levels === 'undefined' ? 1 : levels);\n      this.indentPad = new Array(this.indentLevel + 1).join('&nbsp;&nbsp;');\n    };\n    context.row = (json, htmlNote) => {\n      context.out(\n        '<tr><td style=\"white-space: nowrap;\">' +\n          '<pre class=\"jsondiffpatch-annotated-indent\"' +\n          ' style=\"display: inline-block\">',\n      );\n      context.out(context.indentPad);\n      context.out('</pre><pre style=\"display: inline-block\">');\n      context.out(json);\n      context.out('</pre></td><td class=\"jsondiffpatch-delta-note\"><div>');\n      context.out(htmlNote);\n      context.out('</div></td></tr>');\n    };\n  }\n\n  typeFormattterErrorFormatter(context, err) {\n    context.row('', `<pre class=\"jsondiffpatch-error\">${err}</pre>`);\n  }\n\n  formatTextDiffString(context, value) {\n    const lines = this.parseTextDiff(value);\n    context.out('<ul class=\"jsondiffpatch-textdiff\">');\n    for (let i = 0, l = lines.length; i < l; i++) {\n      const line = lines[i];\n      context.out(\n        '<li><div class=\"jsondiffpatch-textdiff-location\">' +\n          `<span class=\"jsondiffpatch-textdiff-line-number\">${\n            line.location.line\n          }</span><span class=\"jsondiffpatch-textdiff-char\">${\n            line.location.chr\n          }</span></div><div class=\"jsondiffpatch-textdiff-line\">`,\n      );\n      const pieces = line.pieces;\n      for (\n        let pieceIndex = 0, piecesLength = pieces.length;\n        pieceIndex < piecesLength;\n        pieceIndex++\n      ) {\n        const piece = pieces[pieceIndex];\n        context.out(\n          `<span class=\"jsondiffpatch-textdiff-${piece.type}\">${\n            piece.text\n          }</span>`,\n        );\n      }\n      context.out('</div></li>');\n    }\n    context.out('</ul>');\n  }\n\n  rootBegin(context, type, nodeType) {\n    context.out('<table class=\"jsondiffpatch-annotated-delta\">');\n    if (type === 'node') {\n      context.row('{');\n      context.indent();\n    }\n    if (nodeType === 'array') {\n      context.row(\n        '\"_t\": \"a\",',\n        'Array delta (member names indicate array indices)',\n      );\n    }\n  }\n\n  rootEnd(context, type) {\n    if (type === 'node') {\n      context.indent(-1);\n      context.row('}');\n    }\n    context.out('</table>');\n  }\n\n  nodeBegin(context, key, leftKey, type, nodeType) {\n    context.row(`&quot;${key}&quot;: {`);\n    if (type === 'node') {\n      context.indent();\n    }\n    if (nodeType === 'array') {\n      context.row(\n        '\"_t\": \"a\",',\n        'Array delta (member names indicate array indices)',\n      );\n    }\n  }\n\n  nodeEnd(context, key, leftKey, type, nodeType, isLast) {\n    if (type === 'node') {\n      context.indent(-1);\n    }\n    context.row(`}${isLast ? '' : ','}`);\n  }\n\n  /* jshint camelcase: false */\n\n  /* eslint-disable camelcase */\n  format_unchanged() {}\n\n  format_movedestination() {}\n\n  format_node(context, delta, left) {\n    // recurse\n    this.formatDeltaChildren(context, delta, left);\n  }\n}\n\n/* eslint-enable camelcase */\n\nconst wrapPropertyName = name =>\n  `<pre style=\"display:inline-block\">&quot;${name}&quot;</pre>`;\n\nconst deltaAnnotations = {\n  added(delta, left, key, leftKey) {\n    const formatLegend = ' <pre>([newValue])</pre>';\n    if (typeof leftKey === 'undefined') {\n      return `new value${formatLegend}`;\n    }\n    if (typeof leftKey === 'number') {\n      return `insert at index ${leftKey}${formatLegend}`;\n    }\n    return `add property ${wrapPropertyName(leftKey)}${formatLegend}`;\n  },\n  modified(delta, left, key, leftKey) {\n    const formatLegend = ' <pre>([previousValue, newValue])</pre>';\n    if (typeof leftKey === 'undefined') {\n      return `modify value${formatLegend}`;\n    }\n    if (typeof leftKey === 'number') {\n      return `modify at index ${leftKey}${formatLegend}`;\n    }\n    return `modify property ${wrapPropertyName(leftKey)}${formatLegend}`;\n  },\n  deleted(delta, left, key, leftKey) {\n    const formatLegend = ' <pre>([previousValue, 0, 0])</pre>';\n    if (typeof leftKey === 'undefined') {\n      return `delete value${formatLegend}`;\n    }\n    if (typeof leftKey === 'number') {\n      return `remove index ${leftKey}${formatLegend}`;\n    }\n    return `delete property ${wrapPropertyName(leftKey)}${formatLegend}`;\n  },\n  moved(delta, left, key, leftKey) {\n    return (\n      'move from <span title=\"(position to remove at original state)\">' +\n      `index ${leftKey}</span> to <span title=\"(position to insert at final` +\n      ` state)\">index ${delta[1]}</span>`\n    );\n  },\n  textdiff(delta, left, key, leftKey) {\n    const location =\n      typeof leftKey === 'undefined'\n        ? ''\n        : typeof leftKey === 'number'\n          ? ` at index ${leftKey}`\n          : ` at property ${wrapPropertyName(leftKey)}`;\n    return (\n      `text diff${location}, format is <a href=\"https://code.google.com/` +\n      'p/google-diff-match-patch/wiki/Unidiff\">a variation of Unidiff</a>'\n    );\n  },\n};\n\nconst formatAnyChange = function(context, delta) {\n  const deltaType = this.getDeltaType(delta);\n  const annotator = deltaAnnotations[deltaType];\n  const htmlNote =\n    annotator &&\n    annotator.apply(annotator, Array.prototype.slice.call(arguments, 1));\n  let json = JSON.stringify(delta, null, 2);\n  if (deltaType === 'textdiff') {\n    // split text diffs lines\n    json = json.split('\\\\n').join('\\\\n\"+\\n   \"');\n  }\n  context.indent();\n  context.row(json, htmlNote);\n  context.indent(-1);\n};\n\n/* eslint-disable camelcase */\nAnnotatedFormatter.prototype.format_added = formatAnyChange;\nAnnotatedFormatter.prototype.format_modified = formatAnyChange;\nAnnotatedFormatter.prototype.format_deleted = formatAnyChange;\nAnnotatedFormatter.prototype.format_moved = formatAnyChange;\nAnnotatedFormatter.prototype.format_textdiff = formatAnyChange;\n/* eslint-enable camelcase */\n\n/* jshint camelcase: true */\n\nexport default AnnotatedFormatter;\n\nlet defaultInstance;\n\nexport function format(delta, left) {\n  if (!defaultInstance) {\n    defaultInstance = new AnnotatedFormatter();\n  }\n  return defaultInstance.format(delta, left);\n}\n", "import BaseFormatter from './base';\n\nconst OPERATIONS = {\n  add: 'add',\n  remove: 'remove',\n  replace: 'replace',\n  move: 'move',\n};\n\nclass JSONFormatter extends BaseFormatter {\n  constructor() {\n    super();\n    this.includeMoveDestinations = true;\n  }\n\n  prepareContext(context) {\n    super.prepareContext(context);\n    context.result = [];\n    context.path = [];\n    context.pushCurrentOp = function(obj) {\n      const { op, value } = obj;\n      const val = {\n        op,\n        path: this.currentPath(),\n      };\n      if (typeof value !== 'undefined') {\n        val.value = value;\n      }\n      this.result.push(val);\n    };\n\n    context.pushMoveOp = function(to) {\n      const from = this.currentPath();\n      this.result.push({\n        op: OPERATIONS.move,\n        from,\n        path: this.toPath(to),\n      });\n    };\n\n    context.currentPath = function() {\n      return `/${this.path.join('/')}`;\n    };\n\n    context.toPath = function(toPath) {\n      const to = this.path.slice();\n      to[to.length - 1] = toPath;\n      return `/${to.join('/')}`;\n    };\n  }\n\n  typeFormattterErrorFormatter(context, err) {\n    context.out(`[ERROR] ${err}`);\n  }\n\n  rootBegin() {}\n  rootEnd() {}\n\n  nodeBegin({ path }, key, leftKey) {\n    path.push(leftKey);\n  }\n\n  nodeEnd({ path }) {\n    path.pop();\n  }\n\n  /* jshint camelcase: false */\n  /* eslint-disable camelcase */\n\n  format_unchanged() {}\n\n  format_movedestination() {}\n\n  format_node(context, delta, left) {\n    this.formatDeltaChildren(context, delta, left);\n  }\n\n  format_added(context, delta) {\n    context.pushCurrentOp({ op: OPERATIONS.add, value: delta[0] });\n  }\n\n  format_modified(context, delta) {\n    context.pushCurrentOp({ op: OPERATIONS.replace, value: delta[1] });\n  }\n\n  format_deleted(context) {\n    context.pushCurrentOp({ op: OPERATIONS.remove });\n  }\n\n  format_moved(context, delta) {\n    const to = delta[1];\n    context.pushMoveOp(to);\n  }\n\n  format_textdiff() {\n    throw new Error('Not implemented');\n  }\n\n  format(delta, left) {\n    const context = {};\n    this.prepareContext(context);\n    this.recurse(context, delta, left);\n    return context.result;\n  }\n}\n\n/* jshint camelcase: true */\n/* eslint-enable camelcase */\n\nexport default JSONFormatter;\n\nconst last = arr => arr[arr.length - 1];\n\nconst sortBy = (arr, pred) => {\n  arr.sort(pred);\n  return arr;\n};\n\nconst compareByIndexDesc = (indexA, indexB) => {\n  const lastA = parseInt(indexA, 10);\n  const lastB = parseInt(indexB, 10);\n  if (!(isNaN(lastA) || isNaN(lastB))) {\n    return lastB - lastA;\n  } else {\n    return 0;\n  }\n};\n\nconst opsByDescendingOrder = removeOps => sortBy(removeOps, (a, b) => {\n  const splitA = a.path.split('/');\n  const splitB = b.path.split('/');\n  if (splitA.length !== splitB.length) {\n    return splitA.length - splitB.length;\n  } else {\n    return compareByIndexDesc(last(splitA), last(splitB));\n  }\n});\n\nexport const partitionOps = (arr, fns) => {\n  const initArr = Array(fns.length + 1).fill().map(() => []);\n  return arr\n    .map(item => {\n      let position = fns.map(fn => fn(item)).indexOf(true);\n      if (position < 0) {\n        position = fns.length;\n      }\n      return { item, position };\n    })\n    .reduce((acc, item) => {\n      acc[item.position].push(item.item);\n      return acc;\n    }, initArr);\n};\nconst isMoveOp = ({ op }) => op === 'move';\nconst isRemoveOp = ({ op }) => op === 'remove';\n\nconst reorderOps = diff => {\n  const [moveOps, removedOps, restOps] =\n    partitionOps(diff, [isMoveOp, isRemoveOp]);\n  const removeOpsReverse = opsByDescendingOrder(removedOps);\n  return [...removeOpsReverse, ...moveOps, ...restOps];\n};\n\nlet defaultInstance;\n\nexport const format = (delta, left) => {\n  if (!defaultInstance) {\n    defaultInstance = new JSONFormatter();\n  }\n  return reorderOps(defaultInstance.format(delta, left));\n};\n\nexport const log = (delta, left) => {\n  console.log(format(delta, left));\n};\n", "import chalk from 'chalk';\nimport BaseFormatter from './base';\n\nfunction chalkColor(name) {\n  return (\n    (chalk && chalk[name]) ||\n    function(...args) {\n      return args;\n    }\n  );\n}\n\nconst colors = {\n  added: chalkColor('green'),\n  deleted: chalkColor('red'),\n  movedestination: chalkColor('gray'),\n  moved: chalkColor('yellow'),\n  unchanged: chalkColor('gray'),\n  error: chalkColor('white.bgRed'),\n  textDiffLine: chalkColor('gray'),\n};\n\nclass ConsoleFormatter extends BaseFormatter {\n  constructor() {\n    super();\n    this.includeMoveDestinations = false;\n  }\n\n  prepareContext(context) {\n    super.prepareContext(context);\n    context.indent = function(levels) {\n      this.indentLevel =\n        (this.indentLevel || 0) + (typeof levels === 'undefined' ? 1 : levels);\n      this.indentPad = new Array(this.indentLevel + 1).join('  ');\n      this.outLine();\n    };\n    context.outLine = function() {\n      this.buffer.push(`\\n${this.indentPad || ''}`);\n    };\n    context.out = function(...args) {\n      for (let i = 0, l = args.length; i < l; i++) {\n        const lines = args[i].split('\\n');\n        let text = lines.join(`\\n${this.indentPad || ''}`);\n        if (this.color && this.color[0]) {\n          text = this.color[0](text);\n        }\n        this.buffer.push(text);\n      }\n    };\n    context.pushColor = function(color) {\n      this.color = this.color || [];\n      this.color.unshift(color);\n    };\n    context.popColor = function() {\n      this.color = this.color || [];\n      this.color.shift();\n    };\n  }\n\n  typeFormattterErrorFormatter(context, err) {\n    context.pushColor(colors.error);\n    context.out(`[ERROR]${err}`);\n    context.popColor();\n  }\n\n  formatValue(context, value) {\n    context.out(JSON.stringify(value, null, 2));\n  }\n\n  formatTextDiffString(context, value) {\n    const lines = this.parseTextDiff(value);\n    context.indent();\n    for (let i = 0, l = lines.length; i < l; i++) {\n      const line = lines[i];\n      context.pushColor(colors.textDiffLine);\n      context.out(`${line.location.line},${line.location.chr} `);\n      context.popColor();\n      const pieces = line.pieces;\n      for (\n        let pieceIndex = 0, piecesLength = pieces.length;\n        pieceIndex < piecesLength;\n        pieceIndex++\n      ) {\n        const piece = pieces[pieceIndex];\n        context.pushColor(colors[piece.type]);\n        context.out(piece.text);\n        context.popColor();\n      }\n      if (i < l - 1) {\n        context.outLine();\n      }\n    }\n    context.indent(-1);\n  }\n\n  rootBegin(context, type, nodeType) {\n    context.pushColor(colors[type]);\n    if (type === 'node') {\n      context.out(nodeType === 'array' ? '[' : '{');\n      context.indent();\n    }\n  }\n\n  rootEnd(context, type, nodeType) {\n    if (type === 'node') {\n      context.indent(-1);\n      context.out(nodeType === 'array' ? ']' : '}');\n    }\n    context.popColor();\n  }\n\n  nodeBegin(context, key, leftKey, type, nodeType) {\n    context.pushColor(colors[type]);\n    context.out(`${leftKey}: `);\n    if (type === 'node') {\n      context.out(nodeType === 'array' ? '[' : '{');\n      context.indent();\n    }\n  }\n\n  nodeEnd(context, key, leftKey, type, nodeType, isLast) {\n    if (type === 'node') {\n      context.indent(-1);\n      context.out(nodeType === 'array' ? ']' : `}${isLast ? '' : ','}`);\n    }\n    if (!isLast) {\n      context.outLine();\n    }\n    context.popColor();\n  }\n\n  /* jshint camelcase: false */\n  /* eslint-disable camelcase */\n\n  format_unchanged(context, delta, left) {\n    if (typeof left === 'undefined') {\n      return;\n    }\n    this.formatValue(context, left);\n  }\n\n  format_movedestination(context, delta, left) {\n    if (typeof left === 'undefined') {\n      return;\n    }\n    this.formatValue(context, left);\n  }\n\n  format_node(context, delta, left) {\n    // recurse\n    this.formatDeltaChildren(context, delta, left);\n  }\n\n  format_added(context, delta) {\n    this.formatValue(context, delta[0]);\n  }\n\n  format_modified(context, delta) {\n    context.pushColor(colors.deleted);\n    this.formatValue(context, delta[0]);\n    context.popColor();\n    context.out(' => ');\n    context.pushColor(colors.added);\n    this.formatValue(context, delta[1]);\n    context.popColor();\n  }\n\n  format_deleted(context, delta) {\n    this.formatValue(context, delta[0]);\n  }\n\n  format_moved(context, delta) {\n    context.out(`==> ${delta[1]}`);\n  }\n\n  format_textdiff(context, delta) {\n    this.formatTextDiffString(context, delta[0]);\n  }\n}\n\n/* eslint-enable camelcase */\n\n/* jshint camelcase: true */\n\nexport default ConsoleFormatter;\n\nlet defaultInstance;\n\nexport const format = (delta, left) => {\n  if (!defaultInstance) {\n    defaultInstance = new ConsoleFormatter();\n  }\n  return defaultInstance.format(delta, left);\n};\n\nexport function log(delta, left) {\n  console.log(format(delta, left));\n}\n", "// use as 2nd parameter for JSON.parse to revive Date instances\nexport default function dateReviver(key, value) {\n  let parts;\n  if (typeof value === 'string') {\n    // eslint-disable-next-line max-len\n    parts = /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2})(?:\\.(\\d*))?(Z|([+-])(\\d{2}):(\\d{2}))$/.exec(\n      value,\n    );\n    if (parts) {\n      return new Date(\n        Date.UTC(\n          +parts[1],\n          +parts[2] - 1,\n          +parts[3],\n          +parts[4],\n          +parts[5],\n          +parts[6],\n          +(parts[7] || 0),\n        ),\n      );\n    }\n  }\n  return value;\n}\n", "import DiffPatcher from './diffpatcher';\nexport DiffPatcher from './diffpatcher';\n\nexport * as formatters from './formatters/index';\n\nexport * as console from './formatters/console';\n\nexport function create(options) {\n  return new DiffPatcher(options);\n}\n\nexport dateReviver from './date-reviver';\n\nlet defaultInstance;\n\nexport function diff() {\n  if (!defaultInstance) {\n    defaultInstance = new DiffPatcher();\n  }\n  return defaultInstance.diff.apply(defaultInstance, arguments);\n}\n\nexport function patch() {\n  if (!defaultInstance) {\n    defaultInstance = new DiffPatcher();\n  }\n  return defaultInstance.patch.apply(defaultInstance, arguments);\n}\n\nexport function unpatch() {\n  if (!defaultInstance) {\n    defaultInstance = new DiffPatcher();\n  }\n  return defaultInstance.unpatch.apply(defaultInstance, arguments);\n}\n\nexport function reverse() {\n  if (!defaultInstance) {\n    defaultInstance = new DiffPatcher();\n  }\n  return defaultInstance.reverse.apply(defaultInstance, arguments);\n}\n\nexport function clone() {\n  if (!defaultInstance) {\n    defaultInstance = new DiffPatcher();\n  }\n  return defaultInstance.clone.apply(defaultInstance, arguments);\n}\n"],
  "mappings": "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",
  "names": ["diff_match_patch", "dmp", "longtext", "shorttext", "html", "patch", "diff", "get", "index", "chalk", "styles", "chalk", "Processor", "constructor", "options", "selfOptions", "pipes", "pipe", "name", "pipeArg", "processor", "process", "input", "context", "nextPipe", "lastPipe", "lastContext", "nextAfterChildren", "next", "hasResult", "result", "undefined", "Pipe", "filters", "Error", "debug", "length", "index", "filter", "log", "filterName", "exiting", "resultCheck", "msg", "console", "append", "push", "arguments", "prepend", "unshift", "indexOf", "list", "map", "f", "after", "params", "Array", "prototype", "slice", "call", "splice", "apply", "before", "replace", "remove", "clear", "shouldHaveResult", "should", "error", "noResult", "Context", "setResult", "exit", "switchTo", "child", "parent", "childName", "root", "children", "isArray", "a", "cloneRegExp", "re", "regexMatch", "exec", "toString", "RegExp", "clone", "arg", "Date", "getTime", "cloned", "Object", "hasOwnProperty", "DiffContext", "left", "right", "cloneDiffValues", "defaultClone", "PatchContext", "delta", "ReverseContext", "diffFilter", "trivialMatchesDiffFilter", "leftType", "rightType", "leftIsArray", "rightIsArray", "patchFilter", "trivialMatchesPatchFilter", "nested", "regexArgs", "reverseFilter", "trivialReferseFilter", "collectChildrenDiffFilter", "_t", "objectsDiffFilter", "propertyFilter", "nestedPatchFilter", "collectChildrenPatchFilter", "nestedReverseFilter", "collectChildrenReverseFilter", "defaultMatch", "array1", "array2", "index1", "index2", "lengthMatrix", "match", "len1", "len2", "x", "y", "matrix", "Math", "max", "backtrack", "subsequence", "sequence", "indices1", "indices2", "sameLetter", "valueAtMatrixAbove", "valueAtMatrixLeft", "get", "innerContext", "join", "ARRAY_MOVE", "arrayIndexOf", "array", "item", "i", "arraysHaveMatchByRef", "val1", "val2", "matchItems", "value1", "value2", "objectHash", "matchByPosition", "hash1", "hash2", "hashCache1", "hashCache2", "arraysDiffFilter", "matchContext", "commonHead", "commonTail", "trimmed1", "trimmed2", "seq", "lcs", "removedItems", "detectMove", "arrays", "includeValueOnMove", "removedItemsLength", "indexOnArray2", "isMove", "removeItemIndex1", "compare", "numerically", "b", "numericallyBy", "toRemove", "toInsert", "toModify", "parseInt", "value", "sort", "indexDiff", "removedValue", "toInsertLength", "insertion", "toModifyLength", "modification", "arraysReverseFilter", "newName", "substr", "reverseArrayDeltaIndex", "itemDelta", "reverseIndex", "deltaIndex", "deltaItem", "moveFromIndex", "moveToIndex", "deleteIndex", "datesDiffFilter", "TEXT_DIFF", "DEFAULT_MIN_LENGTH", "cachedDiffPatch", "getDiffMatchPatch", "required", "instance", "diff_match_patch", "dmp", "err", "diff_match_patch_not_found", "diff", "txt1", "txt2", "patch_toText", "patch_make", "patch", "results", "patch_apply", "patch_fromText", "textPatchFailed", "textsDiffFilter", "minLength", "textDiff", "diffMatchPatch", "textsPatchFilter", "textDeltaReverse", "l", "line", "lineTmp", "header", "headerRegex", "lineHeader", "lines", "split", "lineStart", "textsReverseFilter", "DiffPatcher", "trivial", "dates", "texts", "reverse", "unpatch", "getObjectKeys", "keys", "obj", "names", "property", "trimUnderscore", "str", "arrayKeyToSortNumber", "key", "arrayKeyComparer", "key1", "key2", "BaseFormatter", "format", "prepareContext", "recurse", "finalize", "buffer", "out", "typeFormattterNotFound", "deltaType", "typeFormattterErrorFormatter", "_ref", "leftKey", "movedFrom", "isLast", "useMoveOriginHere", "leftValue", "type", "getDeltaType", "nodeType", "nodeBegin", "rootBegin", "typeFormattter", "stack", "nodeEnd", "rootEnd", "formatDeltaChildren", "self", "forEachDeltaKey", "fn", "arrayKeys", "moveDestinations", "includeMoveDestinations", "parseTextDiff", "output", "lineOutput", "pieces", "location", "chr", "pieceIndex", "piecesLength", "piece", "pieceOutput", "text", "HtmlFormatter", "formatValue", "htmlEscape", "JSON", "stringify", "formatTextDiffString", "decodeURI", "nodeClass", "hasArrows", "adjustArrows", "format_unchanged", "format_movedestination", "format_node", "format_added", "format_modified", "format_deleted", "format_moved", "format_textdiff", "html", "replacements", "jsondiffpatchHtmlFormatterAdjustArrows", "nodeArg", "node", "document", "getElementText", "textContent", "innerText", "eachByQuery", "el", "query", "elems", "querySelectorAll", "eachChildren", "_ref2", "_ref3", "parentNode", "style", "arrowParent", "svg", "path", "display", "destination", "querySelector", "container", "destinationElem", "getAttribute", "distance", "offsetTop", "setAttribute", "abs", "top", "curve", "round", "showUnchanged", "show", "delay", "body", "prefix", "classes", "showing", "hiding", "visible", "hidden", "classList", "add", "setTimeout", "intervalId", "setInterval", "clearInterval", "hideUnchanged", "defaultInstance", "AnnotatedFormatter", "indent", "levels", "indentLevel", "indentPad", "row", "json", "htmlNote", "wrapPropertyName", "deltaAnnotations", "added", "formatLegend", "modified", "deleted", "moved", "textdiff", "formatAnyChange", "annotator", "OPERATIONS", "move", "JSONFormatter", "pushCurrentOp", "op", "val", "currentPath", "pushMoveOp", "to", "from", "toPath", "pop", "last", "arr", "sortBy", "pred", "compareByIndexDesc", "indexA", "indexB", "lastA", "lastB", "isNaN", "opsByDescendingOrder", "removeOps", "splitA", "splitB", "partitionOps", "fns", "initArr", "fill", "position", "reduce", "acc", "isMoveOp", "isRemoveOp", "_ref4", "reorderOps", "moveOps", "removedOps", "restOps", "removeOpsReverse", "chalkColor", "chalk", "_len", "args", "_key", "colors", "movedestination", "unchanged", "textDiffLine", "ConsoleFormatter", "outLine", "_len2", "_key2", "color", "pushColor", "popColor", "shift", "dateReviver", "parts", "UTC", "create"]
}
