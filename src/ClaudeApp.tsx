import React, { useState, useRef, useEffect } from 'react';
import { applyPatch } from 'fast-json-patch';
import { ClaudeAPIService, MockAIService, PatchOperation } from './services/claudeAPI';
import { forceScrollbarVisibility, checkScrollProperties } from './utils/scrollTest';
import { DownloadService } from './services/downloadService';
import { PublishService } from './services/publishService';
import { FilePublishService } from './services/filePublishService';
import { BlobPublishService } from './services/blobPublishService';
import PublishDialog from './components/PublishDialog';

interface ChatMessage {
  id: string;
  role: 'user' | 'assistant';
  content: string;
  timestamp: number;
  patches?: any[];
}

// ProductImageGallery Component
interface ProductImageGalleryProps {
  images: Array<{ url: string; alt: string; originalUrl?: string }>;
  style?: React.CSSProperties;
}

function ProductImageGallery({ images, style }: ProductImageGalleryProps) {
  const [currentImageIndex, setCurrentImageIndex] = useState(0);
  const [imageAspectRatio, setImageAspectRatio] = useState<number | null>(null);
  
  if (!images || images.length === 0) {
    return null;
  }

  const currentImage = images[currentImageIndex];

  const handleImageLoad = (event: React.SyntheticEvent<HTMLImageElement>) => {
    const img = event.currentTarget;
    const aspectRatio = img.naturalWidth / img.naturalHeight;
    setImageAspectRatio(aspectRatio);
  };

  return (
    <div style={{ ...style, width: '100%' }}>
      
      {/* Main Image */}
      <div style={{
        marginBottom: images.length > 1 ? '1rem' : '0',
        borderRadius: '12px',
        overflow: 'hidden',
        boxShadow: '0 8px 24px rgba(0,0,0,0.12)',
        backgroundColor: '#f8fafc',
        maxWidth: '500px',
        margin: '0 auto 1rem auto',
        // Dynamic height based on aspect ratio
        minHeight: imageAspectRatio ? 
          (imageAspectRatio > 1.5 ? '250px' : imageAspectRatio < 0.8 ? '400px' : '300px') : '300px'
      }}>
        <img
          src={currentImage.url}
          alt={currentImage.alt}
          onLoad={handleImageLoad}
          style={{
            width: '100%',
            height: 'auto',
            maxHeight: imageAspectRatio && imageAspectRatio < 0.8 ? '600px' : '500px',
            minHeight: '200px',
            objectFit: 'contain',
            display: 'block',
            transition: 'opacity 0.3s ease'
          }}
        />
      </div>

      {/* Thumbnail Gallery - Always show when multiple images */}
      {images.length > 1 && (
        <div>
          <div style={{
            display: 'flex',
            gap: '0.75rem',
            justifyContent: 'center',
            flexWrap: 'wrap',
            maxWidth: '100%',
            overflowX: 'auto',
            padding: '0.5rem',
            background: 'linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%)',
            borderRadius: '16px',
            border: '1px solid #e2e8f0'
          }}>
          {images.map((image, index) => (
            <div
              key={index}
              style={{
                cursor: 'pointer',
                borderRadius: '12px',
                overflow: 'hidden',
                border: currentImageIndex === index ? '3px solid #3b82f6' : '2px solid #e5e7eb',
                transition: 'all 0.3s ease',
                flexShrink: 0,
                boxShadow: currentImageIndex === index 
                  ? '0 8px 20px rgba(59, 130, 246, 0.3)' 
                  : '0 4px 8px rgba(0, 0, 0, 0.1)',
                transform: currentImageIndex === index ? 'scale(1.05)' : 'scale(1)'
              }}
              onClick={() => {
                setCurrentImageIndex(index);
                setImageAspectRatio(null); // Reset aspect ratio for new image
              }}
              onMouseEnter={(e) => {
                // Switch to this image on hover
                setCurrentImageIndex(index);
                setImageAspectRatio(null);
                e.currentTarget.style.transform = 'scale(1.1)';
                e.currentTarget.style.boxShadow = '0 12px 24px rgba(59, 130, 246, 0.4)';
              }}
              onMouseLeave={(e) => {
                e.currentTarget.style.transform = currentImageIndex === index ? 'scale(1.05)' : 'scale(1)';
                e.currentTarget.style.boxShadow = currentImageIndex === index 
                  ? '0 8px 20px rgba(59, 130, 246, 0.3)' 
                  : '0 4px 8px rgba(0, 0, 0, 0.1)';
              }}
            >
              <img
                src={image.url}
                alt={`${image.alt} - Áº©Áï•Âõæ ${index + 1}`}
                style={{
                  width: '100px',
                  height: '100px',
                  objectFit: 'contain',
                  display: 'block',
                  backgroundColor: '#f8fafc'
                }}
              />
            </div>
          ))}
          </div>
        </div>
      )}

      {/* Image Counter */}
      {images.length > 1 && (
        <div style={{
          textAlign: 'center',
          marginTop: '0.5rem',
          fontSize: '0.875rem',
          color: '#6b7280'
        }}>
          {currentImageIndex + 1} / {images.length}
        </div>
      )}
    </div>
  );
}

// Initialize API services
let claudeService: ClaudeAPIService | null = null;
const mockService = new MockAIService();

function ClaudeApp() {
  const [pageData, setPageData] = useState({
    hero: {
      headline: "Revolutionary Skincare Experience",
      subhead: "Using unique scientific formula for professional care",
      cta: "Try Now",
      ctaColor: "#f97316", // Ê©ôËâ≤
      image: "https://images.unsplash.com/photo-1556228578-0d85b1a4d571?w=800&h=400&fit=crop"
    },
    usps: [
      { icon: "‚ú®", text: "7-day visible improvement" },
      { icon: "üß™", text: "Scientific formula, safe and gentle" },
      { icon: "üèÜ", text: "Trusted by 100k+ users" }
    ]
  });

  const [messages, setMessages] = useState<ChatMessage[]>([]);
  const [inputMessage, setInputMessage] = useState('');
  const [isProcessing, setIsProcessing] = useState(false);
  const [apiKey, setApiKey] = useState('');
  const [showSettings, setShowSettings] = useState(false);
  const [useClaudeAPI, setUseClaudeAPI] = useState(false);
  const [isDownloading, setIsDownloading] = useState(false);
  const [isPublishing, setIsPublishing] = useState(false);
  const [showPublishDialog, setShowPublishDialog] = useState(false);
  const [customPageName, setCustomPageName] = useState('');
  const [publishedPages, setPublishedPages] = useState<string[]>([]);
  
  // Product URL form state - simplified
  const [productUrl, setProductUrl] = useState('');
  const [isGenerating, setIsGenerating] = useState(false);
  
  // Current product URL from bookmark extraction
  const [currentProductUrl, setCurrentProductUrl] = useState('');
  
  // Brand configuration
  const brandConfig = {
    name: "Premium Skincare",
    logoUrl: "https://images.unsplash.com/photo-1556228578-0d85b1a4d571?w=200&h=60&fit=crop",
    colors: {
      primary: "#007bff",
      accent: "#6c757d"
    },
    font: "system-ui, -apple-system, sans-serif",
    tone: "professional" as const,
    forbidden: []
  };
  
  // Ref for auto-scrolling to bottom of messages
  const messagesEndRef = useRef<HTMLDivElement>(null);
  const messagesContainerRef = useRef<HTMLDivElement>(null);

  // Auto-scroll to bottom when new messages are added
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
    
    // Debug scroll properties
    if (messagesContainerRef.current) {
      checkScrollProperties(messagesContainerRef.current);
    }
  }, [messages, isProcessing]);

  // Force scrollbar visibility on mount
  useEffect(() => {
    forceScrollbarVisibility();
  }, []);

  // Â§ÑÁêÜ‰π¶Á≠æÂ∑•ÂÖ∑Êï∞ÊçÆ - ÈáçÊñ∞ÂêØÁî®‰ª•ÊîØÊåÅÊõ¥Â•ΩÁöÑÂÜÖÂÆπÊèêÂèñ
  useEffect(() => {
    // ÁõëÂê¨Êù•Ëá™‰π¶Á≠æÂ∑•ÂÖ∑ÁöÑpostMessage
    const handleMessage = (event: MessageEvent) => {
      if (event.data && event.data.type === 'PAGEEDITOR_DATA') {
        const data = event.data.data;
        console.log('üìñ Êé•Êî∂Âà∞‰π¶Á≠æÂ∑•ÂÖ∑Êï∞ÊçÆ:', data);
        
        // Áõ¥Êé•Ë∞ÉÁî®ÂàÜÊûêAPIÂ§ÑÁêÜ‰π¶Á≠æÊï∞ÊçÆ
        handleBookmarkletData(data);
      }
    };

    window.addEventListener('message', handleMessage);
    
    // Ê£ÄÊü•localStorage‰∏≠ÁöÑ‰π¶Á≠æÊï∞ÊçÆ
    const checkStoredData = () => {
      try {
        const storedData = localStorage.getItem('pageeditor_extracted_data');
        if (storedData) {
          const data = JSON.parse(storedData);
          console.log('üìñ ÂèëÁé∞Êú¨Âú∞Â≠òÂÇ®ÁöÑ‰π¶Á≠æÊï∞ÊçÆ:', data);
          
          // Â§ÑÁêÜÂ≠òÂÇ®ÁöÑÊï∞ÊçÆ
          handleBookmarkletData(data);
          
          // Ê∏ÖÈô§Â∑≤‰ΩøÁî®ÁöÑÊï∞ÊçÆ
          localStorage.removeItem('pageeditor_extracted_data');
        }
      } catch (e) {
        console.error('Ëß£Êûê‰π¶Á≠æÊï∞ÊçÆÂ§±Ë¥•:', e);
      }
    };

    // È°µÈù¢Âä†ËΩΩÊó∂Ê£ÄÊü•Êï∞ÊçÆ
    checkStoredData();
    
    return () => {
      window.removeEventListener('message', handleMessage);
    };
  }, []);

  // Â§ÑÁêÜ‰π¶Á≠æÂ∑•ÂÖ∑ÊèêÂèñÁöÑÊï∞ÊçÆ
  const handleBookmarkletData = async (data: any) => {
    setIsGenerating(true);
    
    try {
      // ÊòæÁ§∫Â§ÑÁêÜÊ∂àÊÅØ
      const processingMsg: ChatMessage = {
        id: Date.now().toString(),
        role: 'assistant',
        content: `üìñ Â∑≤Êé•Êî∂‰π¶Á≠æÂ∑•ÂÖ∑Êï∞ÊçÆÔºÅ\n\n‚úÖ È°µÈù¢: ${data.title || 'Êú™Áü•'}\nüìÑ ÂÜÖÂÆπ: ${data.content ? Math.min(data.content.length, 1000) + '...' : 'Êó†'}\nüñºÔ∏è ÂõæÁâá: ${data.images ? data.images.length : 0} Âº†\nüîó Êù•Ê∫ê: ${data.url || 'Êú™Áü•'}\n\nü§ñ Ê≠£Âú®ËøõË°åAIÊô∫ËÉΩÂàÜÊûê...`,
        timestamp: Date.now()
      };
      setMessages(prev => [...prev, processingMsg]);

      // Ë∞ÉÁî®ÊµèËßàÂô®ÂÜÖÂÆπÂàÜÊûêAPI
      const response = await fetch('/api/analyze-browser-content', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          url: data.url,
          title: data.title,
          content: data.content,
          images: data.images || []
        })
      });

      if (!response.ok) {
        throw new Error(`ÂÜÖÂÆπÂàÜÊûêÂ§±Ë¥•: ${response.status} ${response.statusText}`);
      }

      const result = await response.json();
      
      if (result.success && result.pageData) {
        // Êõ¥Êñ∞È°µÈù¢Êï∞ÊçÆ
        setPageData(result.pageData);
        
        // ‰øùÂ≠òÂïÜÂìÅURL
        setCurrentProductUrl(data.url || '');
        
        // ÊòæÁ§∫ÊàêÂäüÊ∂àÊÅØ
        const imageProcessing = result.extractedInfo?.imageProcessing;
        const imageStatusText = imageProcessing 
          ? `‚Ä¢ ÂõæÁâáÂ§ÑÁêÜ: ${imageProcessing.successful}/${imageProcessing.attempted} Âº†ÊàêÂäü${imageProcessing.failed > 0 ? ` (${imageProcessing.failed}Âº†Â§±Ë¥•)` : ''}`
          : `‚Ä¢ ÂõæÁâá: ${result.extractedInfo?.imageCount || 0} Âº†`;
        
        const successMsg: ChatMessage = {
          id: (Date.now() + 1).toString(),
          role: 'assistant',
          content: `üéâ ‰π¶Á≠æÊï∞ÊçÆÂàÜÊûêÂÆåÊàêÔºÅ\n\n‚úÖ Â∑≤ÁîüÊàêÂØºË¥≠È°µÈù¢:\n‚Ä¢ Ê†áÈ¢ò: ${result.pageData.hero?.headline || 'Êú™ÊèêÂèñ'}\n‚Ä¢ ÊèèËø∞: ${result.pageData.hero?.subhead || 'Êú™ÊèêÂèñ'}\n‚Ä¢ ÁâπÊÄß: ${result.pageData.usps?.length || 0} ‰∏™ÂçñÁÇπ\n‚Ä¢ ÊñáÊú¨ÈïøÂ∫¶: ${result.extractedInfo?.textLength || 0} Â≠óÁ¨¶\n${imageStatusText}\n\nÊÇ®ÂèØ‰ª•ÁªßÁª≠ÈÄöËøáAIÂØπËØùËøõË°å‰∏™ÊÄßÂåñË∞ÉÊï¥ÔºÅ`,
          timestamp: Date.now()
        };
        setMessages(prev => [...prev, successMsg]);
      } else {
        throw new Error(result.message || 'ÂàÜÊûê‰π¶Á≠æÊï∞ÊçÆÂ§±Ë¥•');
      }
      
    } catch (error) {
      console.error('‰π¶Á≠æÊï∞ÊçÆÂ§ÑÁêÜÂ§±Ë¥•:', error);
      
      const errorMsg: ChatMessage = {
        id: (Date.now() + 1).toString(),
        role: 'assistant',
        content: `‚ùå ‰π¶Á≠æÊï∞ÊçÆÂ§ÑÁêÜÂ§±Ë¥•: ${error instanceof Error ? error.message : 'Êú™Áü•ÈîôËØØ'}\n\nüîß ÊÇ®ÂèØ‰ª•Â∞ùËØï:\n‚Ä¢ ÈáçÊñ∞Âú®ÂïÜÂìÅÈ°µÈù¢ÁÇπÂáª‰π¶Á≠æ\n‚Ä¢ ÊàñËÄÖ‰ΩøÁî®‰∏ãÊñπÁöÑURLËæìÂÖ•ÊñπÂºè\n‚Ä¢ ÊàñËÄÖÁõ¥Êé•ÈÄöËøáAIÂØπËØùÂàõÂª∫È°µÈù¢`,
        timestamp: Date.now()
      };
      setMessages(prev => [...prev, errorMsg]);
    } finally {
      setIsGenerating(false);
    }
  };

  // Test function to add multiple messages (for testing scroll)
  const addTestMessages = () => {
    const testMessages: ChatMessage[] = [
      { id: '1', role: 'user', content: 'ÊääÊ†áÈ¢òÊîπÂæóÊõ¥Âê∏Âºï‰∫∫', timestamp: Date.now() - 5000 },
      { id: '2', role: 'assistant', content: '‚ú® Ê®°ÊãüAI Â∑≤ÁêÜËß£ÊÇ®ÁöÑË¶ÅÊ±ÇÔºåÊ≠£Âú®‰øÆÊîπÈ°µÈù¢Ôºö\n\n‚Ä¢ Êõ¥Êñ∞‰∫Ü‰∏ªÊ†áÈ¢ò', timestamp: Date.now() - 4000, patches: [{ op: 'replace', path: '/hero/headline', value: 'Êñ∞Ê†áÈ¢ò' }] },
      { id: '3', role: 'user', content: 'Ê∑ªÂä†‰∏Ä‰∏™ÁéØ‰øùÁõ∏ÂÖ≥ÁöÑÂçñÁÇπ', timestamp: Date.now() - 3000 },
      { id: '4', role: 'assistant', content: 'ü§ñ Ê®°ÊãüAI Â∑≤ÁêÜËß£ÊÇ®ÁöÑË¶ÅÊ±ÇÔºåÊ≠£Âú®‰øÆÊîπÈ°µÈù¢Ôºö\n\n‚Ä¢ Ê∑ªÂä†‰∫ÜÊñ∞ÂçñÁÇπ: 100%ÁéØ‰øùÂèØÊåÅÁª≠ÂåÖË£Ö', timestamp: Date.now() - 2000, patches: [{ op: 'add', path: '/usps/-', value: { icon: 'üå±', text: '100%ÁéØ‰øùÂèØÊåÅÁª≠ÂåÖË£Ö' } }] },
      { id: '5', role: 'user', content: 'ÊääÊåâÈíÆÊîπÊàêÁ´ãÂç≥Ë¥≠‰π∞', timestamp: Date.now() - 1000 },
      { id: '6', role: 'assistant', content: '‚ú® Ê®°ÊãüAI Â∑≤ÁêÜËß£ÊÇ®ÁöÑË¶ÅÊ±ÇÔºåÊ≠£Âú®‰øÆÊîπÈ°µÈù¢Ôºö\n\n‚Ä¢ Êõ¥Êñ∞‰∫ÜË°åÂä®ÊåâÈíÆ', timestamp: Date.now() - 500, patches: [{ op: 'replace', path: '/hero/cta', value: 'Á´ãÂç≥Ë¥≠‰π∞' }] },
      { id: '7', role: 'user', content: 'Ëøô‰∏™È°µÈù¢ÁúãËµ∑Êù•‰∏çÈîôÔºåËÉΩÂÜçÊ∑ªÂä†‰∏Ä‰∫õÁßëÊäÄÊÑüÁöÑÂÖÉÁ¥†ÂêóÔºüËÆ©Êï¥‰ΩìÊÑüËßâÊõ¥Áé∞‰ª£Âåñ‰∏Ä‰∫õ', timestamp: Date.now() - 200 },
      { id: '8', role: 'assistant', content: 'üöÄ ÂæàÂ•ΩÁöÑÂª∫ËÆÆÔºÅÊàëÊù•‰∏∫È°µÈù¢Ê∑ªÂä†Êõ¥Â§öÁßëÊäÄÊÑüÂÖÉÁ¥†Ôºö\n\n‚Ä¢ Êõ¥Êñ∞‰∫Ü‰∏ªÊ†áÈ¢òÔºåÂä†ÂÖ•ÁßëÊäÄÂÖÉÁ¥†\n‚Ä¢ ‰øÆÊîπ‰∫ÜÂâØÊ†áÈ¢òÔºåÁ™ÅÂá∫AIÊäÄÊúØ\n‚Ä¢ Ê∑ªÂä†‰∫ÜÁßëÊäÄÁõ∏ÂÖ≥ÁöÑÂçñÁÇπ\n\nÁé∞Âú®È°µÈù¢ÁúãËµ∑Êù•Êõ¥Âä†Áé∞‰ª£ÂåñÂíåÁßëÊäÄÊÑüÂçÅË∂≥ÔºÅ', timestamp: Date.now(), patches: [] }
    ];
    setMessages(testMessages);
  };

  // Initialize Claude service when API key is provided
  const initializeClaudeService = (apiKey: string) => {
    console.log('üîß Initializing Claude service with API key:', {
      hasKey: !!apiKey,
      keyLength: apiKey ? apiKey.length : 0,
      startsCorrectly: apiKey ? apiKey.startsWith('sk-ant-api03-') : false,
      firstChars: apiKey ? apiKey.substring(0, 20) : 'none',
      actualApiKey: apiKey // ‰∏¥Êó∂Ë∞ÉËØï - ÊòæÁ§∫ÂÆåÊï¥ API Key
    });
    
    try {
      if (apiKey && apiKey.startsWith('sk-ant-api03-')) {
        claudeService = new ClaudeAPIService(apiKey);
        console.log('‚úÖ Claude service initialized successfully');
        return true;
      } else {
        console.log('‚ùå Claude service initialization failed - invalid API key format');
        console.log('API Key check details:', {
          apiKeyExists: !!apiKey,
          apiKeyType: typeof apiKey,
          startsWith: apiKey ? apiKey.startsWith('sk-ant-api03-') : 'N/A',
          fullKey: apiKey || 'null'
        });
        return false;
      }
    } catch (error) {
      console.error('‚ùå Error during Claude service initialization:', error);
      return false;
    }
  };

  const handleSendMessage = async () => {
    if (!inputMessage.trim() || isProcessing) return;
    
    const userMessage = inputMessage.trim();
    setInputMessage('');
    setIsProcessing(true);
    
    // Add user message
    const userMsg: ChatMessage = {
      id: Date.now().toString(),
      role: 'user',
      content: userMessage,
      timestamp: Date.now()
    };
    
    try {
      setMessages(prev => {
        if (!Array.isArray(prev)) {
          console.error('Messages state is corrupted when adding user message, resetting');
          return [userMsg];
        }
        return [...prev, userMsg];
      });
    } catch (stateError) {
      console.error('Failed to add user message:', stateError);
      // This is critical - if we can't add user message, reset and try again
      setMessages([userMsg]);
    }
    
    try {
      let patches: PatchOperation[];
      let responseContent: string;
      
      if (useClaudeAPI && apiKey) {
        // Always reinitialize Claude service to ensure fresh state
        const initResult = initializeClaudeService(apiKey);
        console.log('Claude service initialization result:', initResult);
        
        if (!initResult) {
          console.log('Failed to initialize Claude service. API Key details:', {
            apiKey: apiKey ? `${apiKey.substring(0, 20)}...` : 'null',
            length: apiKey ? apiKey.length : 0,
            startsCorrectly: apiKey ? apiKey.startsWith('sk-ant-api03-') : false
          });
          throw new Error(`Êó†ÊïàÁöÑ API Key: ËØ∑Á°Æ‰øùËæìÂÖ•Ê≠£Á°ÆÁöÑ Claude API Key (sk-ant-api03-...)
          
ÂΩìÂâç API Key ‰ø°ÊÅØ:
- ÈïøÂ∫¶: ${apiKey ? apiKey.length : 0}
- Ê†ºÂºèÊ£ÄÊü•: ${apiKey ? apiKey.startsWith('sk-ant-api03-') ? '‚úÖ Ê≠£Á°Æ' : '‚ùå ÈîôËØØ' : '‚ùå Á©∫ÂÄº'}`);
        }
        
        // Use real Claude API
        if (!claudeService) {
          throw new Error('ClaudeÊúçÂä°ÂàùÂßãÂåñÂ§±Ë¥•');
        }
        patches = await claudeService.generatePatches(userMessage, pageData);
        responseContent = `‚ú® Claude AI Â∑≤Ê†πÊçÆÊÇ®ÁöÑË¶ÅÊ±ÇÂÆåÊàê‰øÆÊîπÔºö\n\n`;
      } else {
        // Use mock AI for demo
        patches = await mockService.generatePatches(userMessage);
        responseContent = `ü§ñ Ê®°ÊãüAI Â∑≤ÁêÜËß£ÊÇ®ÁöÑË¶ÅÊ±ÇÔºåÊ≠£Âú®‰øÆÊîπÈ°µÈù¢Ôºö\n\n`;
      }
      
      if (patches && patches.length > 0) {
        console.log('Applying patches:', patches);
        
        // Apply patches to page data
        try {
          const result = applyPatch({ ...pageData }, patches);
          if (result.newDocument) {
            setPageData(result.newDocument);
          } else {
            throw new Error('Â∫îÁî®Ë°•‰∏ÅÂ§±Ë¥•ÔºöËøîÂõû‰∫ÜÊó†ÊïàÁöÑÊï∞ÊçÆÁªìÊûÑ');
          }
        } catch (patchError) {
          console.error('Patch application failed:', patchError);
          throw new Error('Â∫îÁî®È°µÈù¢‰øÆÊîπÂ§±Ë¥•: ' + (patchError instanceof Error ? patchError.message : 'Êú™Áü•ÈîôËØØ'));
        }
        
        // Describe what was changed
        const changes = patches.map((patch: any) => {
          if (patch.path.includes('/hero/headline')) return '‚Ä¢ Êõ¥Êñ∞‰∫Ü‰∏ªÊ†áÈ¢ò';
          if (patch.path.includes('/hero/subhead')) return '‚Ä¢ Êõ¥Êñ∞‰∫ÜÂâØÊ†áÈ¢ò';
          if (patch.path.includes('/hero/cta') && !patch.path.includes('ctaColor')) return '‚Ä¢ Êõ¥Êñ∞‰∫ÜË°åÂä®ÊåâÈíÆÊñáÊ°à';
          if (patch.path.includes('/hero/ctaColor')) return '‚Ä¢ Êõ¥Êñ∞‰∫ÜË°åÂä®ÊåâÈíÆÈ¢úËâ≤';
          if (patch.path.includes('/usps')) {
            if (patch.op === 'add') return `‚Ä¢ Ê∑ªÂä†‰∫ÜÊñ∞ÂçñÁÇπ: ${patch.value.text}`;
            if (patch.op === 'replace') return '‚Ä¢ ‰øÆÊîπ‰∫ÜÂçñÁÇπÂÜÖÂÆπ';
          }
          return `‚Ä¢ ‰øÆÊîπ‰∫Ü ${patch.path}`;
        });
        
        responseContent += changes.join('\n');
        
        // Add assistant message with patches
        const assistantMsg: ChatMessage = {
          id: (Date.now() + 1).toString(),
          role: 'assistant',
          content: responseContent,
          timestamp: Date.now(),
          patches: patches || []
        };
        
        // Safely update messages state
        try {
          setMessages(prev => {
            if (!Array.isArray(prev)) {
              console.error('Messages state is corrupted, resetting');
              return [assistantMsg];
            }
            return [...prev, assistantMsg];
          });
        } catch (stateError) {
          console.error('Failed to update messages state:', stateError);
          throw new Error('Áä∂ÊÄÅÊõ¥Êñ∞Â§±Ë¥•: Êó†Ê≥ïÊ∑ªÂä†Âä©ÊâãÂõûÂ§ç');
        }
        
      } else {
        // No patches generated
        const assistantMsg: ChatMessage = {
          id: (Date.now() + 1).toString(),
          role: 'assistant',
          content: useClaudeAPI 
            ? 'Êä±Ê≠âÔºåClaude AI Ê≤°ÊúâÁêÜËß£ÊÇ®ÁöÑ‰øÆÊîπË¶ÅÊ±Ç„ÄÇËØ∑Â∞ùËØïÊõ¥ÂÖ∑‰ΩìÁöÑÊèèËø∞ÔºåÊØîÂ¶Ç"ÊääÊ†áÈ¢òÊîπÂæóÊõ¥Âê∏Âºï‰∫∫"Êàñ"Ê∑ªÂä†‰∏Ä‰∏™ÁéØ‰øùÁõ∏ÂÖ≥ÁöÑÂçñÁÇπ"„ÄÇ'
            : 'Êä±Ê≠âÔºåÊàëÊ≤°ÊúâÁêÜËß£ÊÇ®ÁöÑ‰øÆÊîπË¶ÅÊ±Ç„ÄÇËØ∑Â∞ùËØïËøô‰∫õÊåá‰ª§Ôºö\n\n‚Ä¢ "ÊääÊ†áÈ¢òÊîπÂæóÊõ¥Âê∏Âºï‰∫∫"\n‚Ä¢ "Ê∑ªÂä†‰∏Ä‰∏™ÁéØ‰øùÁõ∏ÂÖ≥ÁöÑÂçñÁÇπ"\n‚Ä¢ "ÊääÊåâÈíÆÊîπÊàêÁ´ãÂç≥Ë¥≠‰π∞"\n‚Ä¢ "‰øÆÊîπÂâØÊ†áÈ¢ò"',
          timestamp: Date.now()
        };
        try {
          setMessages(prev => {
            if (!Array.isArray(prev)) {
              console.error('Messages state is corrupted, resetting');
              return [assistantMsg];
            }
            return [...prev, assistantMsg];
          });
        } catch (stateError) {
          console.error('Failed to update messages state:', stateError);
          throw new Error('Áä∂ÊÄÅÊõ¥Êñ∞Â§±Ë¥•: Êó†Ê≥ïÊ∑ªÂä†Âä©ÊâãÂõûÂ§ç');
        }
      }
      
    } catch (error) {
      console.error('AI processing failed:', error);
      const errorMsg: ChatMessage = {
        id: (Date.now() + 1).toString(),
        role: 'assistant',
        content: `‚ùå Â§ÑÁêÜÂ§±Ë¥•: ${error instanceof Error ? error.message : 'Êú™Áü•ÈîôËØØ'}\n\n${useClaudeAPI ? 'ËØ∑Ê£ÄÊü•API KeyÊòØÂê¶Ê≠£Á°ÆÔºåÊàñÂàáÊç¢Âà∞Ê®°ÊãüÊ®°ÂºèÁªßÁª≠‰ΩìÈ™å„ÄÇ' : ''}`,
        timestamp: Date.now()
      };
      try {
        setMessages(prev => {
          if (!Array.isArray(prev)) {
            console.error('Messages state is corrupted during error handling, resetting');
            return [errorMsg];
          }
          return [...prev, errorMsg];
        });
      } catch (stateError) {
        console.error('Failed to update messages state during error handling:', stateError);
        // Reset messages state as last resort
        setMessages([errorMsg]);
      }
    }
    
    setIsProcessing(false);
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const formatTime = (timestamp: number) => {
    return new Date(timestamp).toLocaleTimeString('zh-CN', { 
      hour: '2-digit', 
      minute: '2-digit' 
    });
  };

  // ‰∏ãËΩΩÂØºË¥≠È°µÂäüËÉΩ
  const handleDownloadLandingPage = async () => {
    setIsDownloading(true);
    
    try {
      await DownloadService.downloadLandingPage(pageData, brandConfig, {
        includeSources: true,
        includeAssets: true,
        format: 'html'
      });
      
      // Ê∑ªÂä†ÊàêÂäüÊ∂àÊÅØÂà∞ËÅäÂ§©
      const successMsg: ChatMessage = {
        id: Date.now().toString(),
        role: 'assistant',
        content: 'üéâ ÂØºË¥≠È°µ‰∏ãËΩΩÊàêÂäüÔºÅ\n\nZIPÂåÖÂåÖÂê´Ôºö\n‚Ä¢ index.html - ÂÆåÊï¥ÁöÑHTMLÈ°µÈù¢\n‚Ä¢ assets/styles.css - Ê†∑ÂºèÊñá‰ª∂\n‚Ä¢ assets/scripts.js - ‰∫§‰∫íËÑöÊú¨\n‚Ä¢ README.md - ‰ΩøÁî®ËØ¥Êòé\n‚Ä¢ sources/ - Ê∫êÊï∞ÊçÆÊñá‰ª∂\n\nÊÇ®ÂèØ‰ª•Áõ¥Êé•ÈÉ®ÁΩ≤Âà∞‰ªª‰ΩïÈùôÊÄÅÊâòÁÆ°Âπ≥Âè∞ÔºÅ',
        timestamp: Date.now()
      };
      setMessages(prev => [...prev, successMsg]);
      
    } catch (error) {
      console.error('Download failed:', error);
      
      // Ê∑ªÂä†ÈîôËØØÊ∂àÊÅØÂà∞ËÅäÂ§©
      const errorMsg: ChatMessage = {
        id: Date.now().toString(),
        role: 'assistant',
        content: `‚ùå ‰∏ãËΩΩÂ§±Ë¥•: ${error instanceof Error ? error.message : 'Êú™Áü•ÈîôËØØ'}\n\nËØ∑ÈáçËØïÊàñÊ£ÄÊü•ÊµèËßàÂô®ËÆæÁΩÆ„ÄÇ`,
        timestamp: Date.now()
      };
      setMessages(prev => [...prev, errorMsg]);
    } finally {
      setIsDownloading(false);
    }
  };

  // ÂèëÂ∏ÉÈ°µÈù¢ÂäüËÉΩ
  const handlePublishPage = () => {
    setShowPublishDialog(true);
  };

  const handleConfirmPublish = async () => {
    if (!customPageName.trim()) return;

    setIsPublishing(true);
    
    try {
      // È™åËØÅÈ°µÈù¢ÂêçÁß∞
      const validation = FilePublishService.validatePageName(customPageName.trim());
      if (!validation.valid) {
        throw new Error(validation.message);
      }

      // È°µÈù¢Â≠òÂú®ÊÄßÊ£ÄÊü•Áî±APIÁ´ØÁÇπÂ§ÑÁêÜ
      
      // Debug: Ê£ÄÊü•ÂΩìÂâçÂïÜÂìÅURL
      console.log('üîç ÂèëÂ∏ÉË∞ÉËØï‰ø°ÊÅØ:', {
        pageName: customPageName.trim(),
        currentProductUrl: currentProductUrl,
        hasProductUrl: !!currentProductUrl
      });

      const result = await BlobPublishService.publishPage(pageData, brandConfig, {
        pageName: customPageName.trim(),
        includeSources: true,
        productUrl: currentProductUrl
      });

      if (result.success) {
        // Êõ¥Êñ∞Â∑≤ÂèëÂ∏ÉÈ°µÈù¢ÂàóË°®
        setPublishedPages(PublishService.getPublishedPages());
        
        // Ê∑ªÂä†ÊàêÂäüÊ∂àÊÅØÂà∞ËÅäÂ§©
        const successMsg: ChatMessage = {
          id: Date.now().toString(),
          role: 'assistant',
          content: `üéâ È°µÈù¢ÂèëÂ∏ÉÊàêÂäüÔºÅ\n\nüìç ËÆøÈóÆÂú∞ÂùÄ: ${result.url}\nüìÅ ÁîüÊàêÊñá‰ª∂: ${result.files?.length || 0} ‰∏™\n\nÈ°µÈù¢Â∑≤ÊàêÂäüÈÉ®ÁΩ≤ÔºåÊÇ®ÂèØ‰ª•Á´ãÂç≥ËÆøÈóÆÔºÅ\n\nüîó [ÁÇπÂáªÊñ∞Ê†áÁ≠æÈ°µÊâìÂºÄ](${result.url})`,
          timestamp: Date.now()
        };
        setMessages(prev => [...prev, successMsg]);
        
        // ÈáçÁΩÆË°®Âçï
        setCustomPageName('');
        setShowPublishDialog(false);
      } else {
        // Ê∑ªÂä†ÈîôËØØÊ∂àÊÅØÂà∞ËÅäÂ§©
        const errorMsg: ChatMessage = {
          id: Date.now().toString(),
          role: 'assistant',
          content: `‚ùå ÂèëÂ∏ÉÂ§±Ë¥•: ${result.message}\n\nËØ∑ÈáçËØïÊàñÈÄâÊã©ÂÖ∂‰ªñÈ°µÈù¢ÂêçÁß∞„ÄÇ`,
          timestamp: Date.now()
        };
        setMessages(prev => [...prev, errorMsg]);
      }
      
    } catch (error) {
      console.error('Publish failed:', error);
      
      const errorMsg: ChatMessage = {
        id: Date.now().toString(),
        role: 'assistant',
        content: `‚ùå ÂèëÂ∏ÉÂ§±Ë¥•: ${error instanceof Error ? error.message : 'Êú™Áü•ÈîôËØØ'}\n\nËØ∑ÈáçËØïÊàñÊ£ÄÊü•È°µÈù¢ÂêçÁß∞„ÄÇ`,
        timestamp: Date.now()
      };
      setMessages(prev => [...prev, errorMsg]);
    } finally {
      setIsPublishing(false);
    }
  };

  const validatePageName = (name: string) => {
    return BlobPublishService.validatePageName(name);
  };

  // Â§ÑÁêÜÂïÜÂìÅÁΩëÂùÄÁîüÊàêÂØºË¥≠È°µ - ‰ΩøÁî®ÊµèËßàÂô®ÂÜÖÂÆπÊèêÂèñ
  const handleGenerateFromUrl = async () => {
    if (!productUrl.trim()) return;
    
    setIsGenerating(true);
    
    try {
      // È™åËØÅURLÊ†ºÂºè
      const url = new URL(productUrl.trim());
      
      // Ê∑ªÂä†Â§ÑÁêÜ‰∏≠Ê∂àÊÅØÂà∞ËÅäÂ§©
      const processingMsg: ChatMessage = {
        id: Date.now().toString(),
        role: 'assistant',
        content: `üîç Ê≠£Âú®Êô∫ËÉΩÂàÜÊûêÂïÜÂìÅÈ°µÈù¢: ${url.href}\n\nüåê Ê≠•È™§1: Âú®Êñ∞Á™óÂè£ÊâìÂºÄÂïÜÂìÅÈ°µÈù¢\n‚è∞ Ê≠•È™§2: Á≠âÂæÖÈ°µÈù¢Âä†ËΩΩÂÆåÊàê\nüëç Ê≠•È™§3: ÊâãÂä®ÂÖ≥Èó≠Á™óÂè£Âç≥ÂèØÂºÄÂßãÂàÜÊûê`,
        timestamp: Date.now()
      };
      setMessages(prev => [...prev, processingMsg]);

      // Âú®Êñ∞Á™óÂè£ÊâìÂºÄÂïÜÂìÅÈ°µÈù¢Âπ∂ÊèêÂèñÂÜÖÂÆπ
      const popup = window.open(url.href, '_blank', 'width=1200,height=800,scrollbars=yes');
      
      if (!popup) {
        throw new Error('Êó†Ê≥ïÊâìÂºÄÊñ∞Á™óÂè£ÔºåËØ∑ÂÖÅËÆ∏ÂºπÁ™óÂêéÈáçËØï');
      }

      // Á≠âÂæÖÈ°µÈù¢Âä†ËΩΩÂπ∂ÂÖÅËÆ∏Áî®Êà∑ÊâãÂä®ÂÖ≥Èó≠Á™óÂè£
      await new Promise((resolve, reject) => {
        let attempts = 0;
        const maxAttempts = 120; // ÊúÄÂ§öÁ≠âÂæÖ120ÁßíÔºàÁªôÁî®Êà∑Êõ¥Â§öÊó∂Èó¥Ôºâ
        let lastExtractedData: any = null;
        let hasTriedExtraction = false;
        
        // Êõ¥Êñ∞ÊèêÁ§∫Ê∂àÊÅØ
        const updateMessage: ChatMessage = {
          id: (Date.now() + 0.5).toString(),
          role: 'assistant',
          content: `üîç Â∑≤Âú®Êñ∞Á™óÂè£ÊâìÂºÄÂïÜÂìÅÈ°µÈù¢\n\n‚ú® ËØ∑Á≠âÂæÖÈ°µÈù¢ÂÆåÂÖ®Âä†ËΩΩÔºåÁ°ÆËÆ§ÂèØ‰ª•ÁúãÂà∞ÂïÜÂìÅ‰ø°ÊÅØÂêéÔºåÊâãÂä®ÂÖ≥Èó≠ËØ•Á™óÂè£Âç≥ÂèØÂºÄÂßãÂàÜÊûê\n\nüìù Á≥ªÁªüÂ∞ÜËá™Âä®ÊèêÂèñÈ°µÈù¢ÂÜÖÂÆπÂπ∂ËøõË°åAIÂàÜÊûê`,
          timestamp: Date.now()
        };
        setMessages(prev => [...prev.slice(0, -1), updateMessage]); // ÊõøÊç¢ÊúÄÂêé‰∏ÄÊù°Ê∂àÊÅØ
        
        const checkAndExtract = () => {
          attempts++;
          
          // Â¶ÇÊûúÁ™óÂè£Ë¢´ÂÖ≥Èó≠ÔºåÂ∞ùËØï‰ΩøÁî®ÊúÄÂêé‰∏ÄÊ¨°ÊèêÂèñÁöÑÊï∞ÊçÆ
          if (popup.closed) {
            if (lastExtractedData) {
              console.log('üëç Áî®Êà∑ÊâãÂä®ÂÖ≥Èó≠Á™óÂè£Ôºå‰ΩøÁî®Â∑≤ÂáÜÂ§áÁöÑÂÜÖÂÆπ');
              resolve(lastExtractedData);
            } else {
              // Âç≥‰ΩøÊ≤°ÊúâÊèêÂèñÂà∞ÂÜÖÂÆπÔºå‰πüÂàõÂª∫‰∏Ä‰∏™Âü∫Êú¨ÁöÑÊï∞ÊçÆÁªìÊûÑ
              console.log('‚ö†Ô∏è Á™óÂè£ÂÖ≥Èó≠‰ΩÜÊ≤°ÊúâÊèêÂèñÂà∞ÂÜÖÂÆπÔºå‰ΩøÁî®Â§áÁî®ÊñπÊ°à');
              const fallbackData = {
                url: url.href,
                title: 'ÂïÜÂìÅÈ°µÈù¢ÂàÜÊûê',
                content: `${url.href.includes('taobao') ? 'Ê∑òÂÆùÂïÜÂìÅ' : url.href.includes('jd.com') ? '‰∫¨‰∏úÂïÜÂìÅ' : url.href.includes('tmall') ? 'Â§©Áå´ÂïÜÂìÅ' : 'ÁîµÂïÜÂïÜÂìÅ'} Á≤æÈÄâ‰ºòË¥® ÂìÅË¥®‰øùËØÅ Âø´ÈÄüÈÖçÈÄÅ ÂîÆÂêéÊó†Âøß Áî®Êà∑Â•ΩËØÑ ÂÄºÂæó‰ø°Ëµñ ‰∏ì‰∏öÂìÅË¥® Á≤æÂøÉÁ≤æÈÄâ ‰ºòË¥®ÊúçÂä° Ë¥¥ÂøÉÂîÆÂêé`,
                images: []
              };
              resolve(fallbackData);
            }
            return;
          }
          
          if (attempts > maxAttempts) {
            // Ë∂ÖÊó∂ÂêéÂ∞ùËØï‰ΩøÁî®Â∑≤ÊèêÂèñÁöÑÂÜÖÂÆπ
            popup.close();
            if (lastExtractedData) {
              resolve(lastExtractedData);
            } else {
              // Ë∂ÖÊó∂‰πü‰ΩøÁî®Â§áÁî®Êï∞ÊçÆ
              const timeoutFallbackData = {
                url: url.href,
                title: 'ÂïÜÂìÅÈ°µÈù¢ÂàÜÊûê',
                content: `${url.href.includes('taobao') ? 'Ê∑òÂÆùÂïÜÂìÅ' : url.href.includes('jd.com') ? '‰∫¨‰∏úÂïÜÂìÅ' : url.href.includes('tmall') ? 'Â§©Áå´ÂïÜÂìÅ' : 'ÁîµÂïÜÂïÜÂìÅ'} Á≤æÈÄâ‰ºòË¥® ÂìÅË¥®‰øùËØÅ Âø´ÈÄüÈÖçÈÄÅ ÂîÆÂêéÊó†Âøß Áî®Êà∑Â•ΩËØÑ ÂÄºÂæó‰ø°Ëµñ`,
                images: []
              };
              resolve(timeoutFallbackData);
            }
            return;
          }

          try {
            // Â∞ùËØïÊèêÂèñÈ°µÈù¢ÂÜÖÂÆπ
            let extractedData = null;
            let canAccessDocument = false;
            
            try {
              // Ê£ÄÊü•ÊòØÂê¶ÂèØ‰ª•ËÆøÈóÆË∑®ÂüüÊñáÊ°£
              if (popup.document && popup.document.domain) {
                canAccessDocument = true;
                extractedData = extractContentFromPage(popup.document, url.href);
              }
            } catch (crossOriginError) {
              console.log('‚ö†Ô∏è Ë∑®ÂüüÈôêÂà∂ÔºåÊó†Ê≥ïËÆøÈóÆÈ°µÈù¢DOMÔºå‰ΩøÁî®Â§áÁî®ÊñπÊ°à');
              canAccessDocument = false;
            }
            
            // Â¶ÇÊûúÂèØ‰ª•ËÆøÈóÆ‰∏îÊèêÂèñÂà∞ÊúâÊïàÂÜÖÂÆπ
            if (canAccessDocument && extractedData && extractedData.content && extractedData.content.length > 50) {
              lastExtractedData = extractedData;
              hasTriedExtraction = true;
              console.log('‚úÖ Â∑≤ÊèêÂèñÈ°µÈù¢ÂÜÖÂÆπÔºåÁ≠âÂæÖÁî®Êà∑ÂÖ≥Èó≠Á™óÂè£');
              
              const readyMessage: ChatMessage = {
                id: (Date.now() + 0.7).toString(),
                role: 'assistant', 
                content: `‚úÖ È°µÈù¢Â∑≤Âä†ËΩΩÂÆåÊàêÔºÅ\n\nüëç Â∑≤ÊèêÂèñÂà∞ÂïÜÂìÅ‰ø°ÊÅØÔºà${lastExtractedData.content.length}Â≠óÁ¨¶Ôºâ\nüñºÔ∏è ÂèëÁé∞ ${lastExtractedData.images?.length || 0} Âº†ÂïÜÂìÅÂõæÁâá\n\nüîí ËØ∑ÊâãÂä®ÂÖ≥Èó≠ÂïÜÂìÅÈ°µÈù¢Á™óÂè£ÔºåÁ≥ªÁªüÂ∞ÜÁ´ãÂç≥ÂºÄÂßãÂàÜÊûê`,
                timestamp: Date.now()
              };
              setMessages(prev => [...prev.slice(0, -1), readyMessage]);
            } else if (!canAccessDocument && attempts > 5) {
              // Ë∑®ÂüüÈôêÂà∂‰∏îÂ∑≤Á≠âÂæÖ‰∏ÄÊÆµÊó∂Èó¥ÔºåÊèêÁ§∫Áî®Êà∑ÂèØ‰ª•ÂÖ≥Èó≠Á™óÂè£
              if (!hasTriedExtraction) {
                hasTriedExtraction = true;
                // ÂàõÂª∫‰∏Ä‰∏™Âü∫Êú¨ÁöÑÂ§áÁî®Êï∞ÊçÆÁªìÊûÑ
                lastExtractedData = {
                  url: url.href,
                  title: 'ÂïÜÂìÅÈ°µÈù¢', // ÈªòËÆ§Ê†áÈ¢ò
                  content: `Á≤æÈÄâÂïÜÂìÅ ‰ºòË¥®ÂìÅË¥® Âø´ÈÄüÈÖçÈÄÅ ÂîÆÂêé‰øùÈöú Áî®Êà∑Â•ΩËØÑ ÂÄºÂæó‰ø°Ëµñ ${url.href.includes('taobao') ? 'Ê∑òÂÆùÂïÜÂìÅ' : url.href.includes('jd.com') ? '‰∫¨‰∏úÂïÜÂìÅ' : url.href.includes('tmall') ? 'Â§©Áå´ÂïÜÂìÅ' : 'Á≤æÈÄâÂïÜÂìÅ'} ‰∏ì‰∏öÂìÅË¥® Áî®Êà∑‰ø°ËµñÁöÑÈÄâÊã©`,
                  images: [] // ÊöÇÊó∂Êó†Ê≥ïÊèêÂèñÂõæÁâá
                };
                
                const crossOriginMessage: ChatMessage = {
                  id: (Date.now() + 0.8).toString(),
                  role: 'assistant',
                  content: `‚ö†Ô∏è Ê£ÄÊµãÂà∞Ë∑®ÂüüÈôêÂà∂ÔºåÊó†Ê≥ïÁõ¥Êé•ËÆøÈóÆÈ°µÈù¢ÂÜÖÂÆπ\n\nüõ†Ô∏è Â∑≤ÂêØÁî®Â§áÁî®ÊñπÊ°àÔºåÂ∞Ü‰ΩøÁî®Êô∫ËÉΩÂàÜÊûêÁîüÊàêÂØºË¥≠È°µ\n\nüëç ËØ∑ÊâãÂä®ÂÖ≥Èó≠ÂïÜÂìÅÈ°µÈù¢Á™óÂè£ÔºåÁ≥ªÁªüÂ∞ÜÂºÄÂßãÂàÜÊûê`,
                  timestamp: Date.now()
                };
                setMessages(prev => [...prev.slice(0, -1), crossOriginMessage]);
              }
            }
            
            setTimeout(checkAndExtract, 1000);
          } catch (e) {
            console.log('Ê£ÄÊü•È°µÈù¢Êó∂ÂèëÁîüÈîôËØØ:', e.message);
            // ÁªßÁª≠Á≠âÂæÖ
            setTimeout(checkAndExtract, 1500);
          }
        };
        
        // ÂºÄÂßãÊ£ÄÊü•
        setTimeout(checkAndExtract, 2000); // Á≠âÂæÖ2ÁßíÂêéÂºÄÂßãÊ£ÄÊü•
      }).then(async (extractedData: any) => {
        // Ë∞ÉÁî®ÊµèËßàÂô®ÂÜÖÂÆπÂàÜÊûêAPI
        const response = await fetch('/api/analyze-browser-content', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(extractedData)
        });

        if (!response.ok) {
          throw new Error(`ÂÜÖÂÆπÂàÜÊûêÂ§±Ë¥•: ${response.status} ${response.statusText}`);
        }

        const result = await response.json();
        
        if (result.success && result.pageData) {
          // Êõ¥Êñ∞È°µÈù¢Êï∞ÊçÆ
          setPageData(result.pageData);
          
          // Ê∑ªÂä†ÊàêÂäüÊ∂àÊÅØ
          const successMsg: ChatMessage = {
            id: (Date.now() + 1).toString(),
            role: 'assistant',
            content: `üéâ ÂØºË¥≠È°µÁîüÊàêÊàêÂäüÔºÅ\n\n‚úÖ Â∑≤ÂàÜÊûêÂïÜÂìÅ‰ø°ÊÅØ:\n‚Ä¢ Ê†áÈ¢ò: ${result.pageData.hero?.headline || 'Êú™ÊèêÂèñ'}\n‚Ä¢ ÊèèËø∞: ${result.pageData.hero?.subhead || 'Êú™ÊèêÂèñ'}\n‚Ä¢ ÁâπÊÄß: ${result.pageData.usps?.length || 0} ‰∏™ÂçñÁÇπ\n‚Ä¢ ÊñáÊú¨ÈïøÂ∫¶: ${result.extractedInfo?.textLength || 0} Â≠óÁ¨¶\n‚Ä¢ ÂõæÁâá: ${result.extractedInfo?.imageCount || 0} Âº†\n\nÊÇ®ÂèØ‰ª•ÁªßÁª≠ÈÄöËøáAIÂØπËØùËøõË°å‰∏™ÊÄßÂåñË∞ÉÊï¥ÔºÅ`,
            timestamp: Date.now()
          };
          setMessages(prev => [...prev, successMsg]);
          
          // Ê∏ÖÁ©∫URLËæìÂÖ•
          setProductUrl('');
        } else {
          throw new Error(result.message || 'ÊèêÂèñÂïÜÂìÅ‰ø°ÊÅØÂ§±Ë¥•');
        }
      });
      
    } catch (error) {
      console.error('Generate from URL failed:', error);
      
      // Ê∑ªÂä†ÈîôËØØÊ∂àÊÅØ
      const errorMsg: ChatMessage = {
        id: (Date.now() + 1).toString(),
        role: 'assistant',
        content: `‚ùå ÁîüÊàêÂ§±Ë¥•: ${error instanceof Error ? error.message : 'Êú™Áü•ÈîôËØØ'}\n\nüìù Ê≠£Á°ÆÊìç‰ΩúÊ≠•È™§:\n1Ô∏è‚É£ ÁÇπÂáª‚ÄúÊô∫ËÉΩÂàÜÊûê‚ÄùÊåâÈíÆ\n2Ô∏è‚É£ ÂÖÅËÆ∏ÊµèËßàÂô®ÂºπÁ™óÊâìÂºÄÂïÜÂìÅÈ°µÈù¢\n3Ô∏è‚É£ Á≠âÂæÖÈ°µÈù¢ÂÆåÂÖ®Âä†ËΩΩÔºàÂèØ‰ª•ÁúãÂà∞ÂïÜÂìÅ‰ø°ÊÅØÔºâ\n4Ô∏è‚É£ Áõ¥Êé•ÂÖ≥Èó≠ÂïÜÂìÅÈ°µÈù¢Á™óÂè£ÔºàÊó†ÈúÄÁ≠âÂæÖÊèêÁ§∫Ôºâ\n5Ô∏è‚É£ Á≥ªÁªü‰ºöËá™Âä®‰ΩøÁî®Â§áÁî®ÊñπÊ°àÂàÜÊûê\n\nüîß Â¶ÇÊûúËøòÊòØÂ§±Ë¥•ÔºåËØ∑Â∞ùËØïÁõ¥Êé•‰ΩøÁî®AIÂØπËØùÂäüËÉΩÊâãÂä®ÂàõÂª∫È°µÈù¢„ÄÇ`,
        timestamp: Date.now()
      };
      setMessages(prev => [...prev, errorMsg]);
    } finally {
      setIsGenerating(false);
    }
  };

  // ‰ªéÈ°µÈù¢DOMÊèêÂèñÂÜÖÂÆπÁöÑÂáΩÊï∞
  const extractContentFromPage = (doc: Document, url: string) => {
    try {
      const title = doc.title || '';
      let content = '';
      
      console.log('üîç ÂºÄÂßãÊèêÂèñÈ°µÈù¢ÂÜÖÂÆπÔºåÊ†áÈ¢ò:', title);
      
      // Â∞ùËØïÊèêÂèñ‰∏ªË¶ÅÂÜÖÂÆπ
      const contentSelectors = [
        '.product-detail', '.item-detail', '.product-info', '.goods-detail', '.product-content',
        '[class*="product"]', '[class*="item"]', '[class*="goods"]', '[id*="product"]',
        '.detail', '.description', '.summary',
        'main', '.main', '#main', '.content', '#content', '.container'
      ];
      
      let extracted = false;
      for (const selector of contentSelectors) {
        try {
          const elements = doc.querySelectorAll(selector);
          for (const element of elements) {
            const text = element.textContent || '';
            if (text.length > 200) {
              content = text;
              extracted = true;
              console.log(`‚úÖ ‰ΩøÁî®ÈÄâÊã©Âô® "${selector}" ÊèêÂèñÂà∞ÂÜÖÂÆπ:`, text.substring(0, 100) + '...');
              break;
            }
          }
          if (extracted) break;
        } catch (selectorError) {
          console.log(`‚ö†Ô∏è ÈÄâÊã©Âô® "${selector}" Â§±Ë¥•:`, selectorError.message);
        }
      }
      
      // Â¶ÇÊûúÊ≤°ÊúâÊâæÂà∞ÁâπÂÆöÂå∫ÂüüÔºåÊèêÂèñbodyÂÜÖÂÆπ
      if (!extracted && doc.body) {
        try {
          content = doc.body.textContent || '';
          console.log('üìÑ ‰ΩøÁî®bodyÂÜÖÂÆπÔºåÈïøÂ∫¶:', content.length);
        } catch (bodyError) {
          console.log('‚ö†Ô∏è Êó†Ê≥ïËÆøÈóÆbodyÂÜÖÂÆπ:', bodyError.message);
        }
      }
      
      // Â¶ÇÊûúËøòÊòØÊ≤°ÊúâÂÜÖÂÆπÔºå‰ΩøÁî®Ê†áÈ¢ò‰Ωú‰∏∫ÂÜÖÂÆπ
      if (!content || content.length < 50) {
        content = title || 'ÂïÜÂìÅÈ°µÈù¢';
        console.log('‚ö†Ô∏è Êó†Ê≥ïÊèêÂèñË∂≥Â§üÂÜÖÂÆπÔºå‰ΩøÁî®Ê†áÈ¢ò‰Ωú‰∏∫Â§áÁî®');
      }
      
      // Ê∏ÖÁêÜÂÜÖÂÆπ
      content = content
        .replace(/\s+/g, ' ')
        .replace(/ÁôªÂΩï|Ê≥®ÂÜå|Ë¥≠Áâ©ËΩ¶|ÂÆ¢Êúç|Â∏ÆÂä©|È¶ñÈ°µ|ÂØºËà™|ËèúÂçï/g, '')
        .trim()
        .substring(0, 8000); // ÈôêÂà∂ÈïøÂ∫¶
      
      // ÊèêÂèñÂõæÁâáÈìæÊé•
      const images: string[] = [];
      try {
        let imgElements = doc.querySelectorAll('img[src*="product"], img[src*="item"], img[src*="goods"], .product img, .item img, .goods img');
        
        if (imgElements.length === 0) {
          imgElements = doc.querySelectorAll('img');
        }
        
        for (let i = 0; i < Math.min(imgElements.length, 5); i++) {
          const img = imgElements[i] as HTMLImageElement;
          const src = img.src || img.getAttribute('data-src') || img.getAttribute('data-original');
          if (src && src.indexOf('http') === 0 && src.indexOf('data:') !== 0) {
            // ÊîæÊùæÂõæÁâáÂ∞∫ÂØ∏ÈôêÂà∂ÔºåÂõ†‰∏∫Êüê‰∫õÂõæÁâáÂèØËÉΩËøòÊú™Âä†ËΩΩ
            images.push(src);
          }
        }
        console.log('üñºÔ∏è ÊèêÂèñÂà∞ÂõæÁâáÊï∞Èáè:', images.length);
      } catch (imageError) {
        console.log('‚ö†Ô∏è ÂõæÁâáÊèêÂèñÂ§±Ë¥•:', imageError.message);
      }
      
      const result = {
        url: url,
        title: title || 'ÂïÜÂìÅÈ°µÈù¢',
        content: content,
        images: images
      };
      
      console.log('‚úÖ ÊúÄÁªàÊèêÂèñÁªìÊûú:', {
        title: result.title,
        contentLength: result.content.length,
        imageCount: result.images.length
      });
      
      return result;
      
    } catch (error) {
      console.log('‚ùå DOMÊèêÂèñÂ§±Ë¥•:', error.message);
      
      // ËøîÂõû‰∏Ä‰∏™Âü∫Êú¨ÁöÑÂ§áÁî®ÁªìÊûú
      return {
        url: url,
        title: 'ÂïÜÂìÅÈ°µÈù¢ÂàÜÊûê',
        content: `${url.includes('taobao') ? 'Ê∑òÂÆùÂïÜÂìÅ' : url.includes('jd.com') ? '‰∫¨‰∏úÂïÜÂìÅ' : url.includes('tmall') ? 'Â§©Áå´ÂïÜÂìÅ' : 'ÁîµÂïÜÂïÜÂìÅ'} Á≤æÈÄâ‰ºòË¥® ÂìÅË¥®‰øùËØÅ Âø´ÈÄüÈÖçÈÄÅ`,
        images: []
      };
    }
  };

  // Ê∏≤ÊüìÊ∂àÊÅØÂÜÖÂÆπÔºåÊîØÊåÅMarkdownÈìæÊé•
  const renderMessageContent = (content: string) => {
    // ÁÆÄÂçïÁöÑMarkdownÈìæÊé•Ëß£ÊûêÔºö[text](url)
    const linkRegex = /\[([^\]]+)\]\(([^)]+)\)/g;
    const parts: React.ReactNode[] = [];
    let lastIndex = 0;
    let match;

    while ((match = linkRegex.exec(content)) !== null) {
      // Ê∑ªÂä†ÈìæÊé•ÂâçÁöÑÊñáÊú¨
      if (match.index > lastIndex) {
        parts.push(content.substring(lastIndex, match.index));
      }
      
      // Ê∑ªÂä†ÈìæÊé•
      const [, linkText, url] = match;
      parts.push(
        <a
          key={match.index}
          href={url}
          target="_blank"
          rel="noopener noreferrer"
          style={{
            color: '#3b82f6',
            textDecoration: 'underline',
            fontWeight: 600
          }}
          onMouseOver={(e) => {
            e.currentTarget.style.color = '#1d4ed8';
          }}
          onMouseOut={(e) => {
            e.currentTarget.style.color = '#3b82f6';
          }}
        >
          {linkText}
        </a>
      );
      
      lastIndex = linkRegex.lastIndex;
    }
    
    // Ê∑ªÂä†Ââ©‰ΩôÊñáÊú¨
    if (lastIndex < content.length) {
      parts.push(content.substring(lastIndex));
    }
    
    return parts.length > 0 ? parts : content;
  };

  // ÂàùÂßãÂåñÂ∑≤ÂèëÂ∏ÉÈ°µÈù¢ÂàóË°®ÂíåAPIËÆæÁΩÆ
  useEffect(() => {
    setPublishedPages(PublishService.getPublishedPages());
    
    // ‰ªéÁéØÂ¢ÉÂèòÈáèÊàñ localStorage ËØªÂèñ API ËÆæÁΩÆ
    const envApiKey = import.meta.env.VITE_CLAUDE_API_KEY;
    const savedApiKey = localStorage.getItem('claude-api-key');
    const savedUseClaudeAPI = localStorage.getItem('use-claude-api') === 'true';
    
    // ‰ºòÂÖà‰ΩøÁî®ÁéØÂ¢ÉÂèòÈáè‰∏≠ÁöÑ API Key
    const finalApiKey = envApiKey || savedApiKey;
    
    if (finalApiKey) {
      setApiKey(finalApiKey);
      console.log('üîë API Key loaded from:', envApiKey ? 'environment variable' : 'localStorage');
    }
    
    if (savedUseClaudeAPI || envApiKey) {
      setUseClaudeAPI(true);
    }
  }, []);

  // ‰øùÂ≠òAPIËÆæÁΩÆÂà∞localStorage
  useEffect(() => {
    if (apiKey) {
      localStorage.setItem('claude-api-key', apiKey);
    }
  }, [apiKey]);

  useEffect(() => {
    localStorage.setItem('use-claude-api', useClaudeAPI.toString());
  }, [useClaudeAPI]);

  return (
    <div style={{ minHeight: '100vh', background: '#f8fafc', fontFamily: '-apple-system, BlinkMacSystemFont, "Segoe UI", sans-serif' }}>
      {/* Header */}
      <header style={{ 
        background: 'white', 
        borderBottom: '1px solid #e2e8f0', 
        padding: '1rem 2rem',
        boxShadow: '0 1px 3px rgba(0,0,0,0.1)'
      }}>
        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}>
          <div>
            <h1 style={{ fontSize: '1.5rem', color: '#1f2937', margin: 0 }}>
              ÂØºË¥≠È°µAIÁîüÊàêÂ∑•ÂÖ∑
              {useClaudeAPI && <span style={{ 
                marginLeft: '0.5rem', 
                padding: '0.25rem 0.5rem', 
                background: '#10b981', 
                color: 'white', 
                fontSize: '0.75rem', 
                borderRadius: '9999px' 
              }}>
                SharetoX
              </span>}
              {!useClaudeAPI && <span style={{ 
                marginLeft: '0.5rem', 
                padding: '0.25rem 0.5rem', 
                background: '#6b7280', 
                color: 'white', 
                fontSize: '0.75rem', 
                borderRadius: '9999px' 
              }}>
                ÊºîÁ§∫Ê®°Âºè
              </span>}
            </h1>
            <p style={{ color: '#6b7280', marginTop: '0.25rem', margin: 0 }}>
              Áî®Ëá™ÁÑ∂ËØ≠Ë®ÄÂëäËØâÊàëÊÇ®ÊÉ≥Ë¶ÅÁöÑ‰øÆÊîπÔºåÊàë‰ºöÂÆûÊó∂Êõ¥Êñ∞È°µÈù¢
            </p>
          </div>
          
          <div style={{ display: 'flex', alignItems: 'center', gap: '0.75rem' }}>
            <span style={{ fontSize: '0.75rem', color: '#6b7280' }}>
              ËØ∑ÊãñÊãΩÊåâÈíÆÂà∞ÊµèËßàÂô®‰π¶Á≠æÊ†è
            </span>
            <div style={{ position: 'relative' }}>
              <a href="javascript:(function(){var title=document.title||'';var url=window.location.href;var content='';var selectors=['.BasicContent--wrapper','.DetailModule--module','.ItemContent','.BasicContent','.tb-detail','.detail-content','.product-detail','.item-detail','.product-info','.goods-detail','[class*=product]','[class*=item]','[class*=goods]','[id*=product]','.tm-detail','.tb-property','.J_DivItemDesc','#J_DivItemDesc','main','.main','#main','.content','#content'];var extracted=false;for(var i=0;i<selectors.length&&!extracted;i++){try{var elements=document.querySelectorAll(selectors[i]);for(var k=0;k<elements.length;k++){var element=elements[k];if(element){var text=element.innerText||element.textContent||'';if(text.length>200){content=text;extracted=true;break;}}}}catch(e){}}if(!extracted){try{var allText=document.body.innerText||document.body.textContent||'';var lines=allText.split('\\n').filter(function(line){return line.trim().length>10&&!line.match(/ÁôªÂΩï|Ê≥®ÂÜå|Ë¥≠Áâ©ËΩ¶|ÂÆ¢Êúç|Â∏ÆÂä©|È¶ñÈ°µ|ÂØºËà™|ËèúÂçï|ÊêúÁ¥¢|ÁÉ≠Èó®|Êé®Ëçê|Êî∂Ëóè|ÂÖ≥Ê≥®|ÂàÜ‰∫´/);});content=lines.slice(0,20).join(' ');}catch(e){content='Ê∑òÂÆùÂïÜÂìÅ ‰ºòË¥®ÂïÜÂìÅ Á≤æÈÄâÂ•ΩË¥ß Âø´ÈÄüÈÖçÈÄÅ';}}content=content.replace(/\\s+/g,' ').replace(/ÁôªÂΩï|Ê≥®ÂÜå|Ë¥≠Áâ©ËΩ¶|ÂÆ¢Êúç|Â∏ÆÂä©|È¶ñÈ°µ|ÂØºËà™|ËèúÂçï|ÊêúÁ¥¢|ÁÉ≠Èó®|Êé®Ëçê|Êî∂Ëóè|ÂÖ≥Ê≥®|ÂàÜ‰∫´|Á´ãÂç≥Ë¥≠‰π∞|Âä†ÂÖ•Ë¥≠Áâ©ËΩ¶|Áé∞Ë¥ß|ÊúâÂ∫ìÂ≠ò|Êª°Âáè|‰ºòÊÉ†Âà∏|È¢ÜÂà∏|ÂÖ≥Â∫ó|Â∫óÈì∫/g,'').trim();if(content.length>8000){content=content.substring(0,8000);}if(content.length<50){content='Ê∑òÂÆùÁ≤æÈÄâÂïÜÂìÅ ‰ºòË¥®Â•ΩË¥ß ÂìÅË¥®‰øùËØÅ Âø´ÈÄüÈÖçÈÄÅ Áî®Êà∑Â•ΩËØÑÊé®Ëçê';}var images=[];try{var imgs=document.querySelectorAll('img');var imgData=[];for(var i=0;i<imgs.length;i++){var img=imgs[i];var srcs=[img.src,img.getAttribute('data-src'),img.getAttribute('data-original'),img.getAttribute('data-lazy-src'),img.getAttribute('data-ks-lazyload'),img.getAttribute('data-lazy')];for(var s=0;s<srcs.length;s++){var src=srcs[s];if(src&&src.indexOf('http')===0&&src.indexOf('data:')!==0){var rect=img.getBoundingClientRect();var score=rect.width*rect.height;if(rect.width<100||rect.height<100)score=0;if(src.includes('logo')||src.includes('banner')||src.includes('icon')||src.includes('button')||src.includes('nav')||src.includes('menu'))score=0;if(src.includes('jfs.jd.com'))score+=80000;if(src.includes('400x400')||src.includes('800x800')||src.includes('_400x400')||src.includes('_800x800'))score+=100000;if(src.includes('product')||src.includes('item')||src.includes('goods')||src.includes('TB1')||src.includes('TB2'))score+=50000;if(img.alt&&(img.alt.includes('ÂïÜÂìÅ')||img.alt.includes('‰∫ßÂìÅ')))score+=30000;if(src.includes('.taobao.')||src.includes('.tmall.')||src.includes('.alicdn.'))score+=20000;if(img.className&&(img.className.includes('product')||img.className.includes('item')||img.className.includes('goods')))score+=40000;if(img.parentElement&&img.parentElement.className&&(img.parentElement.className.includes('product')||img.parentElement.className.includes('item')))score+=35000;imgData.push({src:src,score:score});break;}}}imgData.sort(function(a,b){return b.score-a.score;});for(var j=0;j<Math.min(imgData.length,5);j++){images.push(imgData[j].src);}}catch(e){}var data={title:title,url:url,content:content,images:images,timestamp:new Date().toISOString()};localStorage.setItem('pageeditor_extracted_data',JSON.stringify(data));var pageUrl=window.location.hostname.includes('localhost')?'http://localhost:3001':'https://pageeditor.sharetox.com';var popup=window.open(pageUrl,'pageeditor','width=1200,height=800,scrollbars=yes,resizable=yes');if(!popup){alert('Êï∞ÊçÆÂ∑≤ÊèêÂèñÔºÅËØ∑ÊâãÂä®ÊâìÂºÄ PageEditor È°µÈù¢„ÄÇ');}else{setTimeout(function(){try{popup.postMessage({type:'PAGEEDITOR_DATA',data:data},'*');}catch(e){}},2000);}})()"
                style={{
                  display: 'inline-block',
                  background: '#f97316',
                  color: 'white',
                  padding: '0.5rem 1rem',
                  borderRadius: '6px',
                  textDecoration: 'none',
                  fontSize: '0.875rem',
                  fontWeight: 600,
                  cursor: 'move',
                  transition: 'all 0.2s',
                  border: 'none'
                }}
                onMouseEnter={(e) => {
                  e.currentTarget.style.background = '#ea580c';
                  e.currentTarget.style.transform = 'translateY(-1px)';
                  const tooltip = e.currentTarget.parentElement?.querySelector('.bookmark-tooltip') as HTMLElement;
                  if (tooltip) tooltip.style.display = 'block';
                }}
                onMouseLeave={(e) => {
                  e.currentTarget.style.background = '#f97316';
                  e.currentTarget.style.transform = 'translateY(0)';
                  const tooltip = e.currentTarget.parentElement?.querySelector('.bookmark-tooltip') as HTMLElement;
                  if (tooltip) tooltip.style.display = 'none';
                }}
              >
                ‰∏ÄÈîÆÁîüÊàêÂØºË¥≠È°µ
              </a>
              <div
                className="bookmark-tooltip"
                style={{
                  display: 'none',
                  position: 'absolute',
                  top: '100%',
                  right: '0',
                  marginTop: '8px',
                  background: '#1f2937',
                  color: 'white',
                  padding: '12px 16px',
                  borderRadius: '8px',
                  boxShadow: '0 4px 12px rgba(0, 0, 0, 0.15)',
                  fontSize: '0.75rem',
                  lineHeight: '1.4',
                  minWidth: '280px',
                  zIndex: 1000
                }}
              >
                <div style={{ fontWeight: 600, marginBottom: '8px' }}>
                  üìñ ‰π¶Á≠æÂ∑•ÂÖ∑‰ΩøÁî®ÊñπÊ≥ïÔºö
                </div>
                <div>
                  1Ô∏è‚É£ Â∞ÜÊåâÈíÆÊãñÊãΩÂà∞ÊµèËßàÂô®‰π¶Á≠æÊ†è<br/>
                  2Ô∏è‚É£ ÊâìÂºÄ‰ªªÊÑèÁîµÂïÜÂïÜÂìÅÈ°µÈù¢<br/>
                  3Ô∏è‚É£ ÁÇπÂáª‰π¶Á≠æÊ†è‰∏≠ÁöÑÊåâÈíÆ<br/>
                  4Ô∏è‚É£ Ëá™Âä®ÊèêÂèñÂïÜÂìÅ‰ø°ÊÅØÂπ∂ÁîüÊàêÂØºË¥≠È°µ
                </div>
              </div>
            </div>
            <button
              onClick={() => setShowSettings(!showSettings)}
              style={{
                background: '#f3f4f6',
                border: '1px solid #d1d5db',
                padding: '0.5rem',
                borderRadius: '6px',
                cursor: 'pointer'
              }}
            >
              ‚öôÔ∏è ËÆæÁΩÆ
            </button>
          </div>
        </div>
        
        {/* Settings Panel */}
        {showSettings && (
          <div style={{
            marginTop: '1rem',
            padding: '1rem',
            background: '#f9fafb',
            border: '1px solid #e5e7eb',
            borderRadius: '6px'
          }}>
            <div style={{ display: 'flex', alignItems: 'center', marginBottom: '1rem' }}>
              <input
                type="checkbox"
                id="useClaudeAPI"
                checked={useClaudeAPI}
                onChange={(e) => setUseClaudeAPI(e.target.checked)}
                style={{ marginRight: '0.5rem' }}
              />
              <label htmlFor="useClaudeAPI" style={{ fontSize: '0.875rem' }}>
                ÂêØÁî®ÁúüÂÆû Claude API
              </label>
            </div>
            
            {useClaudeAPI && (
              <div>
                <label style={{ display: 'block', fontSize: '0.875rem', fontWeight: 500, marginBottom: '0.5rem' }}>
                  Claude API Key:
                </label>
                <input
                  type="password"
                  value={apiKey}
                  onChange={(e) => setApiKey(e.target.value)}
                  placeholder="sk-ant-api03-..."
                  style={{
                    width: '100%',
                    padding: '0.5rem',
                    border: '1px solid #d1d5db',
                    borderRadius: '4px',
                    fontSize: '0.875rem'
                  }}
                />
                <div style={{ 
                  fontSize: '0.75rem', 
                  color: '#6b7280', 
                  margin: '0.5rem 0',
                  padding: '0.75rem',
                  background: '#fff3cd',
                  border: '1px solid #ffeaa7',
                  borderRadius: '4px'
                }}>
                  <div style={{ fontWeight: 600, marginBottom: '0.5rem' }}>‚ö†Ô∏è CORS ÈôêÂà∂ËØ¥Êòé:</div>
                  <div>Áî±‰∫éÊµèËßàÂô®ÂÆâÂÖ®Á≠ñÁï•Ôºå‰ªé localhost Áõ¥Êé•Ë∞ÉÁî® Claude API ÂèØËÉΩË¢´ÈòªÊ≠¢„ÄÇ</div>
                  <div style={{ marginTop: '0.5rem' }}>
                    <strong>Âª∫ËÆÆ:</strong>
                    <div>‚Ä¢ ÂÖà‰ΩìÈ™åÊºîÁ§∫Ê®°ÂºèÁöÑÂÆåÊï¥ÂäüËÉΩ</div>
                    <div>‚Ä¢ ÈÉ®ÁΩ≤Âà∞Áîü‰∫ßÁéØÂ¢ÉÂêé‰ΩøÁî®ÁúüÂÆûAPI</div>
                    <div>‚Ä¢ ÊàñÈÄöËøáÂêéÁ´Ø‰ª£ÁêÜË∞ÉÁî®API</div>
                  </div>
                </div>
                <p style={{ fontSize: '0.75rem', color: '#6b7280', margin: '0' }}>
                  Âú® <a href="https://console.anthropic.com/" target="_blank" rel="noopener noreferrer" style={{ color: '#3b82f6' }}>Anthropic Console</a> Ëé∑Âèñ API Key
                </p>
              </div>
            )}
            
            {!useClaudeAPI && (
              <div style={{
                fontSize: '0.75rem',
                color: '#059669',
                background: '#d1fae5',
                padding: '0.75rem',
                borderRadius: '4px',
                border: '1px solid #a7f3d0'
              }}>
                <div style={{ fontWeight: 600, marginBottom: '0.5rem' }}>üí° ÊºîÁ§∫Ê®°ÂºèÂ∑≤ÂêØÁî®</div>
                <div>ÂΩìÂâç‰ΩøÁî®ÂÜÖÁΩÆAIËßÑÂàôÔºåÊîØÊåÅ‰ª•‰∏ãÊåá‰ª§ÊºîÁ§∫Ôºö</div>
                <div style={{ marginTop: '0.5rem', fontSize: '0.7rem' }}>
                  ‚Ä¢ "ÊääÊ†áÈ¢òÊîπÂæóÊõ¥ÁßëÊäÄÊÑü"<br/>
                  ‚Ä¢ "Ê∑ªÂä†‰∏Ä‰∏™ÁéØ‰øùÁõ∏ÂÖ≥ÁöÑÂçñÁÇπ"<br/>  
                  ‚Ä¢ "ÊääÊåâÈíÆÊîπÊàêÁ´ãÂç≥Ë¥≠‰π∞"<br/>
                  ‚Ä¢ "‰øÆÊîπÂâØÊ†áÈ¢ò"
                </div>
              </div>
            )}
          </div>
        )}
      </header>


      <div style={{ 
        maxWidth: '1400px', 
        margin: '0 auto', 
        padding: '1rem', 
        display: 'grid', 
        gridTemplateColumns: window.innerWidth > 1024 ? '400px 1fr' : '1fr',
        gap: '1rem',
        height: 'calc(100vh - 140px)'
      }}>
        
        {/* Left Panel: Chat Interface */}
        <div style={{ 
          background: 'white', 
          borderRadius: '8px', 
          boxShadow: '0 1px 3px rgba(0,0,0,0.1)',
          display: 'flex',
          flexDirection: 'column',
          height: '100%',  // Ensure full height
          minHeight: '0'   // Allow flex children to shrink
        }}>
          <div style={{ 
            background: '#f1f5f9', 
            padding: '1rem', 
            borderBottom: '1px solid #e2e8f0',
            fontWeight: 600,
            borderTopLeftRadius: '8px',
            borderTopRightRadius: '8px',
            display: 'flex',
            justifyContent: 'space-between',
            alignItems: 'center'
          }}>
            <span>üí¨ AI ÂØπËØùÁºñËæë</span>
            <div style={{ position: 'relative', display: 'inline-block' }}>
              <span 
                style={{
                  cursor: 'help',
                  fontSize: '1rem',
                  color: '#6b7280',
                  padding: '4px',
                  borderRadius: '50%',
                  display: 'inline-flex',
                  alignItems: 'center',
                  justifyContent: 'center',
                  transition: 'all 0.2s'
                }}
                onMouseEnter={(e) => {
                  e.currentTarget.style.color = '#3b82f6';
                  e.currentTarget.style.background = 'rgba(59, 130, 246, 0.1)';
                  const tooltip = e.currentTarget.nextElementSibling as HTMLElement;
                  if (tooltip) tooltip.style.display = 'block';
                }}
                onMouseLeave={(e) => {
                  e.currentTarget.style.color = '#6b7280';
                  e.currentTarget.style.background = 'transparent';
                  const tooltip = e.currentTarget.nextElementSibling as HTMLElement;
                  if (tooltip) tooltip.style.display = 'none';
                }}
              >
                ‚ÑπÔ∏è
              </span>
              <div
                style={{
                  display: 'none',
                  position: 'absolute',
                  top: '100%',
                  right: '0',
                  marginTop: '8px',
                  background: '#1f2937',
                  color: 'white',
                  padding: '12px 16px',
                  borderRadius: '8px',
                  boxShadow: '0 4px 12px rgba(0, 0, 0, 0.15)',
                  fontSize: '0.75rem',
                  lineHeight: '1.4',
                  minWidth: '320px',
                  maxWidth: '400px',
                  zIndex: 1000,
                  whiteSpace: 'pre-line'
                }}
              >
                {`‚úÖ ÂèØ‰ª•‰øÆÊîπÁöÑÂÖÉÁ¥†Ôºö
‚Ä¢ ‰∏ªÊ†áÈ¢òÂíåÂâØÊ†áÈ¢ò
‚Ä¢ ÊåâÈíÆÊñáÂ≠óÂíåÈ¢úËâ≤
‚Ä¢ ÂçñÁÇπÂÜÖÂÆπÔºàÂèØ‰øÆÊîπ/Êñ∞Â¢ûÔºâ

‚ùå ‰∏çËÉΩ‰øÆÊîπÁöÑÂÖÉÁ¥†Ôºö
‚Ä¢ È°µÈù¢Â∏ÉÂ±ÄÂíåÊ†∑Âºè
‚Ä¢ ÂõæÁâáÂíåËÉåÊôØ
‚Ä¢ Â≠ó‰ΩìÂíåÈó¥Ë∑ù

üé® ÊîØÊåÅÁöÑÊåâÈíÆÈ¢úËâ≤Ôºö
Ê©ôËâ≤„ÄÅÁ∫¢Ëâ≤„ÄÅÁªøËâ≤„ÄÅËìùËâ≤„ÄÅÁ¥´Ëâ≤

üí¨ Á§∫‰æãÊåá‰ª§Ôºö
"ÊääÊ†áÈ¢òÊîπÂæóÊõ¥ÁßëÊäÄÊÑü"
"ÊåâÈíÆÈ¢úËâ≤Êîπ‰∏∫Á∫¢Ëâ≤"
"Ê∑ªÂä†ÁéØ‰øùÂçñÁÇπ"`}
                <div style={{
                  position: 'absolute',
                  top: '-6px',
                  right: '12px',
                  width: '0',
                  height: '0',
                  borderLeft: '6px solid transparent',
                  borderRight: '6px solid transparent',
                  borderBottom: '6px solid #1f2937'
                }}></div>
              </div>
            </div>
          </div>
          
          {/* Messages */}
          <div 
            ref={messagesContainerRef}
            className="messages-container"
            style={{ 
              flex: 1, 
              minHeight: '0',       // Allow flex item to shrink below content size
              overflowY: 'scroll',  // Force show scrollbar
              overflowX: 'hidden',
              padding: '1rem', 
              display: 'flex', 
              flexDirection: 'column', 
              gap: '1rem',
              scrollBehavior: 'smooth'
            }}
          >
            {messages.length === 0 && (
              <div style={{ textAlign: 'center', color: '#6b7280', padding: '2rem 0' }}>
                <div style={{ fontSize: '2rem', marginBottom: '1rem' }}>ü§ñ</div>
                <p>ÂºÄÂßãÂØπËØùÔºåÊàëÊù•Â∏ÆÊÇ®ÁºñËæëÈ°µÈù¢</p>
                <div style={{ fontSize: '0.875rem', marginTop: '1rem', textAlign: 'left' }}>
                  <p style={{ fontWeight: 500, marginBottom: '0.5rem' }}>ËØïËØïËøô‰∫õÊåá‰ª§Ôºö</p>
                  <p style={{ color: '#3b82f6', margin: '0.25rem 0' }}>‚Ä¢ "ÊääÊ†áÈ¢òÊîπÂæóÊõ¥ÁßëÊäÄÊÑü"</p>
                  <p style={{ color: '#3b82f6', margin: '0.25rem 0' }}>‚Ä¢ "Ê∑ªÂä†‰∏Ä‰∏™ÁéØ‰øùÁõ∏ÂÖ≥ÁöÑÂçñÁÇπ"</p>
                  <p style={{ color: '#3b82f6', margin: '0.25rem 0' }}>‚Ä¢ "ÊääÊåâÈíÆÊîπÊàêÁ´ãÂç≥Ë¥≠‰π∞"</p>
                </div>
                
                {/* Test button for scroll demo */}
                <button
                  onClick={addTestMessages}
                  style={{
                    marginTop: '1rem',
                    padding: '0.5rem 1rem',
                    background: '#f3f4f6',
                    border: '1px solid #d1d5db',
                    borderRadius: '6px',
                    fontSize: '0.75rem',
                    cursor: 'pointer',
                    color: '#6b7280'
                  }}
                >
                  üß™ Âä†ËΩΩÊµãËØïÂØπËØù (ÊºîÁ§∫ÊªöÂä®ÊïàÊûú)
                </button>
              </div>
            )}
            
            {messages.map((message) => (
              <div
                key={message.id}
                className={`message-${message.role}`}
                style={{
                  display: 'flex',
                  justifyContent: message.role === 'user' ? 'flex-end' : 'flex-start'
                }}
              >
                <div 
                  className="message-bubble"
                  style={{
                    maxWidth: '80%',
                    padding: '0.75rem 1rem',
                    borderRadius: message.role === 'user' ? '18px 18px 4px 18px' : '18px 18px 18px 4px',
                    background: message.role === 'user' 
                      ? 'linear-gradient(135deg, #3b82f6 0%, #2563eb 100%)' 
                      : 'linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%)',
                    color: message.role === 'user' ? 'white' : '#1f2937',
                    boxShadow: message.role === 'user' 
                      ? '0 4px 12px rgba(59, 130, 246, 0.3)' 
                      : '0 4px 12px rgba(0, 0, 0, 0.1)',
                    border: message.role === 'assistant' ? '1px solid #e2e8f0' : 'none',
                    position: 'relative'
                  }}
                >
                  {/* Message role indicator */}
                  <div style={{
                    position: 'absolute',
                    top: '-8px',
                    [message.role === 'user' ? 'right' : 'left']: '12px',
                    background: message.role === 'user' ? '#2563eb' : '#6b7280',
                    color: 'white',
                    padding: '2px 6px',
                    borderRadius: '8px',
                    fontSize: '0.6rem',
                    fontWeight: 500
                  }}>
                    {message.role === 'user' ? 'üë§' : 'ü§ñ'}
                  </div>
                  
                  <div style={{ 
                    fontSize: '0.875rem', 
                    whiteSpace: 'pre-wrap',
                    lineHeight: '1.5',
                    marginTop: '4px'
                  }}>
                    {renderMessageContent(message.content)}
                  </div>
                  
                  <div style={{ 
                    fontSize: '0.7rem', 
                    opacity: 0.7, 
                    marginTop: '0.5rem',
                    display: 'flex',
                    justifyContent: 'space-between',
                    alignItems: 'center'
                  }}>
                    <span>{formatTime(message.timestamp)}</span>
                    {message.patches && message.patches.length > 0 && (
                      <span style={{
                        background: 'rgba(59, 130, 246, 0.1)',
                        color: '#2563eb',
                        padding: '2px 6px',
                        borderRadius: '10px',
                        fontSize: '0.65rem',
                        fontWeight: 500
                      }}>
                        {message.patches.length} ‰∏™‰øÆÊîπ
                      </span>
                    )}
                  </div>
                </div>
              </div>
            ))}
            
            {isProcessing && (
              <div style={{ 
                display: 'flex', 
                alignItems: 'center', 
                gap: '0.5rem', 
                color: '#6b7280',
                padding: '0.75rem',
                background: '#f8fafc',
                borderRadius: '12px',
                border: '1px solid #e2e8f0'
              }}>
                <div style={{ 
                  fontSize: '1.2rem',
                  animation: 'pulse 1.5s ease-in-out infinite'
                }}>ü§î</div>
                <span>AIÊ≠£Âú®Â§ÑÁêÜÊÇ®ÁöÑËØ∑Ê±Ç...</span>
                <div style={{ 
                  display: 'flex', 
                  gap: '2px',
                  marginLeft: 'auto'
                }}>
                  <div style={{ 
                    width: '4px', 
                    height: '4px', 
                    borderRadius: '50%', 
                    background: '#6b7280',
                    animation: 'bounce 1.4s ease-in-out infinite both'
                  }}></div>
                  <div style={{ 
                    width: '4px', 
                    height: '4px', 
                    borderRadius: '50%', 
                    background: '#6b7280',
                    animation: 'bounce 1.4s ease-in-out 0.16s infinite both'
                  }}></div>
                  <div style={{ 
                    width: '4px', 
                    height: '4px', 
                    borderRadius: '50%', 
                    background: '#6b7280',
                    animation: 'bounce 1.4s ease-in-out 0.32s infinite both'
                  }}></div>
                </div>
              </div>
            )}
            
            {/* Invisible element for auto-scroll target */}
            <div ref={messagesEndRef} style={{ height: '1px' }} />
          </div>
          
          {/* Input */}
          <div style={{ 
            padding: '1rem', 
            borderTop: '1px solid #e2e8f0',
            display: 'flex',
            gap: '0.5rem'
          }}>
            <textarea
              value={inputMessage}
              onChange={(e) => setInputMessage(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder="ÊèèËø∞ÊÇ®ÊÉ≥Ë¶ÅÁöÑ‰øÆÊîπ..."
              disabled={isProcessing}
              className="chat-input"
              style={{
                flex: 1,
                minHeight: '60px',
                maxHeight: '120px',
                padding: '0.75rem',
                border: '2px solid #e2e8f0',
                borderRadius: '12px',
                resize: 'none',
                fontSize: '0.875rem',
                fontFamily: 'inherit',
                outline: 'none',
                transition: 'border-color 0.2s ease',
                background: 'white'
              }}
              onFocus={(e) => e.target.style.borderColor = '#3b82f6'}
              onBlur={(e) => e.target.style.borderColor = '#e2e8f0'}
            />
            <button
              onClick={handleSendMessage}
              disabled={!inputMessage.trim() || isProcessing}
              style={{
                background: isProcessing ? '#9ca3af' : '#3b82f6',
                color: 'white',
                border: 'none',
                padding: '0.75rem 1rem',
                borderRadius: '8px',
                cursor: isProcessing ? 'not-allowed' : 'pointer',
                fontSize: '1rem'
              }}
            >
              üì§
            </button>
          </div>
        </div>

        {/* Right Panel: Live Preview */}
        <div style={{ 
          background: 'white', 
          borderRadius: '8px', 
          boxShadow: '0 1px 3px rgba(0,0,0,0.1)',
          overflow: 'auto'
        }}>
          <div style={{ 
            background: '#f1f5f9', 
            padding: '1rem', 
            borderBottom: '1px solid #e2e8f0',
            fontWeight: 600,
            position: 'sticky',
            top: 0,
            zIndex: 1,
            display: 'flex',
            justifyContent: 'space-between',
            alignItems: 'center'
          }}>
            <span>üëÅÔ∏è ÂÆûÊó∂È¢ÑËßà</span>
            
            <div style={{ display: 'flex', gap: '0.5rem' }}>
              <button
                onClick={handleDownloadLandingPage}
                disabled={isDownloading}
                style={{
                  background: isDownloading ? '#9ca3af' : 'linear-gradient(135deg, #10b981 0%, #059669 100%)',
                  color: 'white',
                  border: 'none',
                  padding: '0.5rem 1rem',
                  borderRadius: '8px',
                  fontSize: '0.875rem',
                  fontWeight: 500,
                  cursor: isDownloading ? 'not-allowed' : 'pointer',
                  display: 'flex',
                  alignItems: 'center',
                  gap: '0.5rem',
                  boxShadow: '0 2px 4px rgba(16, 185, 129, 0.3)',
                  transition: 'all 0.2s ease'
                }}
                onMouseOver={(e) => {
                  if (!isDownloading) {
                    e.currentTarget.style.transform = 'translateY(-1px)';
                    e.currentTarget.style.boxShadow = '0 4px 8px rgba(16, 185, 129, 0.4)';
                  }
                }}
                onMouseOut={(e) => {
                  if (!isDownloading) {
                    e.currentTarget.style.transform = 'translateY(0)';
                    e.currentTarget.style.boxShadow = '0 2px 4px rgba(16, 185, 129, 0.3)';
                  }
                }}
              >
                {isDownloading ? (
                  <>
                    <div style={{ 
                      width: '14px', 
                      height: '14px', 
                      border: '2px solid transparent',
                      borderTop: '2px solid white',
                      borderRadius: '50%',
                      animation: `spin 1s linear infinite`
                    }} />
                    ÊâìÂåÖ‰∏≠...
                  </>
                ) : (
                  <>
                    üì¶ ‰∏ãËΩΩ
                  </>
                )}
              </button>

              <button
                onClick={handlePublishPage}
                disabled={isPublishing || isDownloading}
                style={{
                  background: (isPublishing || isDownloading) ? '#9ca3af' : 'linear-gradient(135deg, #3b82f6 0%, #1d4ed8 100%)',
                  color: 'white',
                  border: 'none',
                  padding: '0.5rem 1rem',
                  borderRadius: '8px',
                  fontSize: '0.875rem',
                  fontWeight: 500,
                  cursor: (isPublishing || isDownloading) ? 'not-allowed' : 'pointer',
                  display: 'flex',
                  alignItems: 'center',
                  gap: '0.5rem',
                  boxShadow: '0 2px 4px rgba(59, 130, 246, 0.3)',
                  transition: 'all 0.2s ease'
                }}
                onMouseOver={(e) => {
                  if (!isPublishing && !isDownloading) {
                    e.currentTarget.style.transform = 'translateY(-1px)';
                    e.currentTarget.style.boxShadow = '0 4px 8px rgba(59, 130, 246, 0.4)';
                  }
                }}
                onMouseOut={(e) => {
                  if (!isPublishing && !isDownloading) {
                    e.currentTarget.style.transform = 'translateY(0)';
                    e.currentTarget.style.boxShadow = '0 2px 4px rgba(59, 130, 246, 0.3)';
                  }
                }}
              >
                üöÄ ÂèëÂ∏É
              </button>
            </div>
          </div>
          
          <div style={{ padding: '2rem' }}>
            {/* Hero Section */}
            <div style={{ textAlign: 'center', marginBottom: '3rem' }}>
              <h1 style={{ 
                fontSize: '2.5rem', 
                fontWeight: 'bold', 
                color: '#1f2937',
                marginBottom: '1rem',
                lineHeight: '1.2'
              }}>
                {pageData.hero.headline}
              </h1>
              <p style={{ 
                fontSize: '1.25rem', 
                color: '#6b7280',
                marginBottom: '2rem',
                lineHeight: '1.6'
              }}>
                {pageData.hero.subhead}
              </p>
              <button style={{
                background: pageData.hero.ctaColor || '#3b82f6',
                color: 'white',
                border: 'none',
                padding: '1rem 2rem',
                fontSize: '1.1rem',
                fontWeight: 600,
                borderRadius: '10px',
                cursor: 'pointer',
                boxShadow: `0 4px 6px ${pageData.hero.ctaColor || '#3b82f6'}40`,
                transform: 'translateY(0)',
                transition: 'all 0.2s'
              }}
              onMouseOver={(e) => {
                const color = pageData.hero.ctaColor || '#3b82f6';
                e.currentTarget.style.transform = 'translateY(-2px)';
                e.currentTarget.style.boxShadow = `0 6px 12px ${color}66`;
              }}
              onMouseOut={(e) => {
                const color = pageData.hero.ctaColor || '#3b82f6';
                e.currentTarget.style.transform = 'translateY(0)';
                e.currentTarget.style.boxShadow = `0 4px 6px ${color}40`;
              }}>
                {pageData.hero.cta}
              </button>
              
              {/* Product Image Gallery */}
              <ProductImageGallery 
                images={pageData.images || (pageData.hero.image ? [{ url: pageData.hero.image, alt: 'ÂïÜÂìÅÂõæÁâá' }] : [])}
                style={{
                  margin: '2rem auto 0',
                  maxWidth: '600px'
                }}
              />
            </div>

            {/* USPs */}
            <div>
              <h2 style={{ 
                fontSize: '1.75rem', 
                fontWeight: 600, 
                marginBottom: '1.5rem',
                textAlign: 'center',
                color: '#1f2937'
              }}>
                Ê†∏ÂøÉ‰ºòÂäø
              </h2>
              <div style={{ 
                display: 'grid', 
                gap: '1rem',
                gridTemplateColumns: (() => {
                  if (window.innerWidth <= 768) return '1fr';
                  const uspCount = pageData.usps.length;
                  if (uspCount === 1) return '1fr';
                  if (uspCount === 2) return 'repeat(2, 1fr)';
                  if (uspCount === 3) return 'repeat(3, 1fr)';
                  if (uspCount === 4) return 'repeat(2, 1fr)';
                  if (uspCount === 5) return 'repeat(3, 1fr)';
                  return 'repeat(auto-fit, minmax(250px, 1fr))';
                })(),
                maxWidth: (() => {
                  const uspCount = pageData.usps.length;
                  if (uspCount === 1) return '400px';
                  if (uspCount === 2) return '800px';
                  return '100%';
                })(),
                margin: '0 auto'
              }}>
                {pageData.usps.map((usp, index) => (
                  <div
                    key={index}
                    style={{
                      display: 'flex',
                      alignItems: 'center',
                      gap: '1rem',
                      padding: '1.5rem',
                      background: 'linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%)',
                      borderRadius: '12px',
                      border: '1px solid #e2e8f0',
                      transition: 'all 0.2s',
                      cursor: 'default'
                    }}
                    onMouseOver={(e) => {
                      e.currentTarget.style.transform = 'translateY(-2px)';
                      e.currentTarget.style.boxShadow = '0 8px 24px rgba(0,0,0,0.08)';
                    }}
                    onMouseOut={(e) => {
                      e.currentTarget.style.transform = 'translateY(0)';
                      e.currentTarget.style.boxShadow = 'none';
                    }}
                  >
                    <div style={{
                      fontSize: '2rem',
                      width: '3rem',
                      height: '3rem',
                      display: 'flex',
                      alignItems: 'center',
                      justifyContent: 'center',
                      background: 'white',
                      borderRadius: '12px',
                      boxShadow: '0 2px 8px rgba(0,0,0,0.08)'
                    }}>
                      {usp.icon}
                    </div>
                    <div style={{ 
                      fontSize: '1rem',
                      fontWeight: 500,
                      color: '#374151',
                      lineHeight: '1.5'
                    }}>
                      {usp.text}
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        </div>
      </div>

      <PublishDialog
        showDialog={showPublishDialog}
        customPageName={customPageName}
        setCustomPageName={setCustomPageName}
        isPublishing={isPublishing}
        onPublish={handleConfirmPublish}
        onClose={() => setShowPublishDialog(false)}
        validatePageName={validatePageName}
        publishedPages={publishedPages}
      />
    </div>
  );
}

export default ClaudeApp;
